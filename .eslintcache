[{"/home/est-dell-1/kirthika/Marico-SHE/src/index.js":"1","/home/est-dell-1/kirthika/Marico-SHE/src/reportWebVitals.js":"2","/home/est-dell-1/kirthika/Marico-SHE/src/App.js":"3","/home/est-dell-1/kirthika/Marico-SHE/src/serviceWorker.js":"4","/home/est-dell-1/kirthika/Marico-SHE/src/helpers/index.js":"5","/home/est-dell-1/kirthika/Marico-SHE/src/helpers/store.js":"6","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/index.js":"7","/home/est-dell-1/kirthika/Marico-SHE/src/constants/index.js":"8","/home/est-dell-1/kirthika/Marico-SHE/src/constants/constants.js":"9","/home/est-dell-1/kirthika/Marico-SHE/src/component/CustomScrollDiv/CustomScrollDiv.js":"10","/home/est-dell-1/kirthika/Marico-SHE/src/component/PrivateRoute/index.js":"11","/home/est-dell-1/kirthika/Marico-SHE/src/component/PrivateRoute/PrivateRoute.jsx":"12","/home/est-dell-1/kirthika/Marico-SHE/src/actions/index.js":"13","/home/est-dell-1/kirthika/Marico-SHE/src/actions/actions.js":"14","/home/est-dell-1/kirthika/Marico-SHE/src/services/index.js":"15","/home/est-dell-1/kirthika/Marico-SHE/src/config.js":"16","/home/est-dell-1/kirthika/Marico-SHE/src/services/services.js":"17","/home/est-dell-1/kirthika/Marico-SHE/src/helpers/auth-header.js":"18","/home/est-dell-1/kirthika/Marico-SHE/src/helpers/history.js":"19","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/councilmeeting.js":"20","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/mrmmeeting.js":"21","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ScheduleCouncilMeeting/ScheduleCouncilMeeting.js":"22","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/NeedsAndExpectations/NeedsAndExpectations.js":"23","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/MYTask/MyTask.js":"24","/home/est-dell-1/kirthika/Marico-SHE/src/component/ComingSoon/ComingSoon.js":"25","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ScheduleMrmMeeting/ScheduleMrmMeeting.js":"26","/home/est-dell-1/kirthika/Marico-SHE/src/container/Login/Login.js":"27","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/agenda.js":"28","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/units.js":"29","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/unittype.js":"30","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/members.js":"31","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/mrmrecommendation.js":"32","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/agendafor.js":"33","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/RiskAndOpportunities/RiskAndOpportunities.js":"34","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ComplianceObligations/ComplianceObligations.js":"35","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ResourceRoleResponsibility/ResourceRoleResponsibility.js":"36","/home/est-dell-1/kirthika/Marico-SHE/src/container/Scheduler/Scheduler/Scheduler.js":"37","/home/est-dell-1/kirthika/Marico-SHE/src/container/Scheduler/CalendarView/index.js":"38","/home/est-dell-1/kirthika/Marico-SHE/src/container/Scheduler/CalendarView/CalendarView.js":"39","/home/est-dell-1/kirthika/Marico-SHE/src/container/Dashboard/Dashboard.js":"40","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/Audits/Audits.js":"41","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/Dashboard/Dashboard.js":"42","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/AuditList/AuditList.js":"43","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/PerformAudits/PerformAudits.js":"44","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/PerformMeetings/PerformMeetings.js":"45","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/selectaudit.js":"46","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/audits.js":"47","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/AuditList-UI/AuditList.js":"48","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/shemeeting.js":"49","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/needsexpectations.js":"50","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/sherecommendations.js":"51","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/auditsid.js":"52","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ManagementDashboard/ManagementDashboard.js":"53","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/needsexpectation.js":"54","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/dashboard.js":"55","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/rrraa.js":"56","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/monthlyscore.js":"57","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/sheaction.js":"58","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/scheduler.js":"59","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulertype.js":"60","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulermeetingsubtype.js":"61","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulerfrequency.js":"62","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/riskopportunities.js":"63","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/complianceobligations.js":"64","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulermtd.js":"65","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulerdays.js":"66","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/selectaudittype.js":"67","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulerfrequencyrepeaton.js":"68","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/authentication.js":"69","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/departments.js":"70","/home/est-dell-1/kirthika/Marico-SHE/src/container/MYTask/MYTask/index.js":"71","/home/est-dell-1/kirthika/Marico-SHE/src/container/MYTask/MYTask/MyTask.js":"72"},{"size":443,"mtime":1620264280807,"results":"73","hashOfConfig":"74"},{"size":362,"mtime":1611927026082,"results":"75","hashOfConfig":"76"},{"size":19194,"mtime":1622528794250,"results":"77","hashOfConfig":"74"},{"size":5085,"mtime":1619003778410,"results":"78","hashOfConfig":"74"},{"size":82,"mtime":1619003778410,"results":"79","hashOfConfig":"74"},{"size":354,"mtime":1619003778410,"results":"80","hashOfConfig":"74"},{"size":2161,"mtime":1622456320868,"results":"81","hashOfConfig":"74"},{"size":28,"mtime":1619003778406,"results":"82","hashOfConfig":"74"},{"size":15122,"mtime":1622456320704,"results":"83","hashOfConfig":"74"},{"size":4173,"mtime":1619003778406,"results":"84","hashOfConfig":"74"},{"size":32,"mtime":1619003778406,"results":"85","hashOfConfig":"74"},{"size":454,"mtime":1622207610681,"results":"86","hashOfConfig":"74"},{"size":26,"mtime":1619003778406,"results":"87","hashOfConfig":"74"},{"size":84092,"mtime":1622527319350,"results":"88","hashOfConfig":"74"},{"size":27,"mtime":1619003778410,"results":"89","hashOfConfig":"74"},{"size":388,"mtime":1622528789822,"results":"90","hashOfConfig":"74"},{"size":33839,"mtime":1622527319350,"results":"91","hashOfConfig":"74"},{"size":153,"mtime":1619003778410,"results":"92","hashOfConfig":"74"},{"size":135,"mtime":1619003778410,"results":"93","hashOfConfig":"74"},{"size":2356,"mtime":1619003778410,"results":"94","hashOfConfig":"74"},{"size":2856,"mtime":1619003778410,"results":"95","hashOfConfig":"74"},{"size":49963,"mtime":1620183188071,"results":"96","hashOfConfig":"74"},{"size":40978,"mtime":1622456320752,"results":"97","hashOfConfig":"74"},{"size":22015,"mtime":1622456320728,"results":"98","hashOfConfig":"74"},{"size":821,"mtime":1620183187763,"results":"99","hashOfConfig":"74"},{"size":93950,"mtime":1622196220676,"results":"100","hashOfConfig":"74"},{"size":4019,"mtime":1622528785378,"results":"101","hashOfConfig":"74"},{"size":675,"mtime":1619003778410,"results":"102","hashOfConfig":"74"},{"size":670,"mtime":1619003778410,"results":"103","hashOfConfig":"74"},{"size":688,"mtime":1619003778410,"results":"104","hashOfConfig":"74"},{"size":1185,"mtime":1620622435987,"results":"105","hashOfConfig":"74"},{"size":1293,"mtime":1619003778410,"results":"106","hashOfConfig":"74"},{"size":693,"mtime":1619935439404,"results":"107","hashOfConfig":"74"},{"size":39752,"mtime":1622456320808,"results":"108","hashOfConfig":"74"},{"size":40625,"mtime":1622456320716,"results":"109","hashOfConfig":"74"},{"size":38408,"mtime":1622456320780,"results":"110","hashOfConfig":"74"},{"size":112407,"mtime":1622527319350,"results":"111","hashOfConfig":"74"},{"size":31,"mtime":1619656742355,"results":"112","hashOfConfig":"74"},{"size":13224,"mtime":1622527319350,"results":"113","hashOfConfig":"74"},{"size":736,"mtime":1619656742267,"results":"114","hashOfConfig":"74"},{"size":7461,"mtime":1621321179231,"results":"115","hashOfConfig":"74"},{"size":1302,"mtime":1620183187863,"results":"116","hashOfConfig":"74"},{"size":11615,"mtime":1620799752602,"results":"117","hashOfConfig":"74"},{"size":39164,"mtime":1620183187895,"results":"118","hashOfConfig":"74"},{"size":136627,"mtime":1622456320780,"results":"119","hashOfConfig":"74"},{"size":612,"mtime":1620183188155,"results":"120","hashOfConfig":"74"},{"size":1592,"mtime":1620568989210,"results":"121","hashOfConfig":"74"},{"size":8023,"mtime":1620183187767,"results":"122","hashOfConfig":"74"},{"size":3721,"mtime":1622456320896,"results":"123","hashOfConfig":"74"},{"size":2712,"mtime":1621922440936,"results":"124","hashOfConfig":"74"},{"size":3486,"mtime":1620901966832,"results":"125","hashOfConfig":"74"},{"size":632,"mtime":1620622435771,"results":"126","hashOfConfig":"74"},{"size":30932,"mtime":1622456320740,"results":"127","hashOfConfig":"74"},{"size":674,"mtime":1621479680527,"results":"128","hashOfConfig":"74"},{"size":642,"mtime":1621146282425,"results":"129","hashOfConfig":"74"},{"size":2525,"mtime":1621922440972,"results":"130","hashOfConfig":"74"},{"size":740,"mtime":1621146282473,"results":"131","hashOfConfig":"74"},{"size":686,"mtime":1621146282489,"results":"132","hashOfConfig":"74"},{"size":2550,"mtime":1621176704278,"results":"133","hashOfConfig":"74"},{"size":620,"mtime":1621170409025,"results":"134","hashOfConfig":"74"},{"size":670,"mtime":1621176704310,"results":"135","hashOfConfig":"74"},{"size":636,"mtime":1621170409025,"results":"136","hashOfConfig":"74"},{"size":2736,"mtime":1621922440952,"results":"137","hashOfConfig":"74"},{"size":2839,"mtime":1621922440916,"results":"138","hashOfConfig":"74"},{"size":635,"mtime":1621321179275,"results":"139","hashOfConfig":"74"},{"size":611,"mtime":1621259510182,"results":"140","hashOfConfig":"74"},{"size":635,"mtime":1621321179275,"results":"141","hashOfConfig":"74"},{"size":685,"mtime":1621323885672,"results":"142","hashOfConfig":"74"},{"size":959,"mtime":1621434518166,"results":"143","hashOfConfig":"74"},{"size":641,"mtime":1622456320844,"results":"144","hashOfConfig":"74"},{"size":25,"mtime":1622527319350,"results":"145","hashOfConfig":"74"},{"size":22423,"mtime":1622527319350,"results":"146","hashOfConfig":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},"1g3copd",{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},"48woxr",{"filePath":"153","messages":"154","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":92,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},"/home/est-dell-1/kirthika/Marico-SHE/src/index.js",["318"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./helpers\";\nimport \"./style.scss\";\nimport \"./responsive.css\";\nimport App from \"./App\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n//reportWebVitals();\n","/home/est-dell-1/kirthika/Marico-SHE/src/reportWebVitals.js",[],["319","320"],"/home/est-dell-1/kirthika/Marico-SHE/src/App.js",["321","322","323","324","325","326","327","328","329","330","331","332"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, Menu,  Dropdown, Card } from 'antd';\nimport { PrivateRoute } from \"./component/PrivateRoute\";\nimport { Route, Link, Redirect, Switch, Router, BrowserRouter } from \"react-router-dom\";\nimport {\nUserOutlined,\nBellOutlined,\nLockOutlined,\nLogoutOutlined,\nSettingOutlined,\nMenuUnfoldOutlined,\nDownOutlined,\nHomeOutlined\n} from '@ant-design/icons';\nimport './App.scss';\nimport { Login } from \"./container/Login/Login\";\nimport { Dashboard }  from './container/Dashboard/Dashboard';\nimport { ManagementDashboard }  from './container/Management/ManagementDashboard/ManagementDashboard';\nimport { Scheduler } from \"./container/Scheduler/Scheduler/Scheduler\";\nimport { PerformMeetings } from \"./container/Management/PerformMeetings/PerformMeetings\";\nimport { AuditDashboard } from \"./container/Audit/Dashboard/Dashboard\";\nimport { Audits } from \"./container/Audit/Audits/Audits\";\nimport { PerformAudits } from \"./container/Audit/PerformAudits/PerformAudits\";\nimport { CalendarView } from \"./container/Scheduler/CalendarView\";\nimport { ScheduleCouncilMeeting } from \"./container/Management/ScheduleCouncilMeeting/ScheduleCouncilMeeting\";\nimport { ScheduleMrmMeeting } from \"./container/Management/ScheduleMrmMeeting/ScheduleMrmMeeting\";\n//import { MyTask }  from './container/Management/MYTask/MyTask';\nimport { MyTask }  from './container/MYTask/MYTask';\nimport { NeedsAndExpectations }  from './container/Management/NeedsAndExpectations/NeedsAndExpectations';\nimport { ComplianceObligations }  from './container/Management/ComplianceObligations/ComplianceObligations';\nimport { ResourceRoleResponsibility }  from './container/Management/ResourceRoleResponsibility/ResourceRoleResponsibility';\nimport { RiskAndOpportunities }  from './container/Management/RiskAndOpportunities/RiskAndOpportunities';\nimport { ComingSoon } from './component/ComingSoon/ComingSoon';\nimport history from \"./helpers/history.js\";\nimport Logo from \"./component/images/logo.jpg\";\nimport Favicon from \"./component/images/favicon.png\";\nimport User from \"./component/images/user.jpg\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faDownload, faEdit, faUpload, faFileImport, faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\nimport { API_URL, LOGOUT_URL } from \"./config.js\";\nlibrary.add(fab, faDownload, faEdit, faUpload, faFileImport, faClipboardCheck);\nconst { SubMenu } = Menu;  \nconst {  Sider } = Layout;\nfunction App() {\nconst [collapsed, setcollapsed] = useState(true);\nconst [username, setusername] = useState('')\nlet user = JSON.parse(localStorage.getItem('user'));\nuseEffect(()=>{\nif(user != null || ''){\nsetusername(user.member_name);\n}  \n});\nconst LogoutApp = () => {\n  localStorage.clear();\n  window.location.reload();\n  //window.location.href = LOGOUT_URL;\n}\n//Settings UI\nconst title = (\n<div className=\"x-card-profile\">\n  <div className=\"x-profile-left\">\n    <div className=\"x-profile-image\"><img src={User} alt=\"User\"/></div>\n    <div className=\"x-profile-name\">{username}</div>\n  </div>\n  <div className=\"x-profile-right\">\n    <div onClick = {LogoutApp}>\n      <LogoutOutlined  />\n    </div>\n  </div>\n</div>\n);\nconst menu = (\n<Card title={title} bordered={false} className=\"x-card-user\">\n  <Menu className=\"user-list\">\n  <Menu.Item key=\"0\">\n      <div onClick = {LogoutApp}>\n        <HomeOutlined />\n        <a rel=\"noopener noreferrer\" href=\"#\">\n        Home\n        </a>\n      </div>\n    </Menu.Item>\n    <Menu.Item key=\"1\">\n      <div>\n        <UserOutlined/>\n        <a rel=\"noopener noreferrer\" href=\"#\">\n        Profile\n        </a>\n      </div>\n    </Menu.Item>\n    <Menu.Item key=\"2\">\n      <div>\n        <LockOutlined />\n        <a rel=\"noopener noreferrer\" href=\"#\">\n        Change Password\n        </a>\n      </div>\n    </Menu.Item>\n  </Menu>\n</Card>\n);\n//Notification UI\nconst notification =(\n<Card title=\"Notifications\" bordered={false} className=\"x-card-notification\">\n  <div className=\"card-content\">\n    <p>Notification 1</p>\n    <p>Notification 2</p>\n    <p>Notification 3</p>\n  </div>\n  <div className=\"card-footer\">\n    <p className=\"text-center\">Show All</p>\n  </div>\n</Card>\n);\n//FrequentSearch UI\nconst frequentSearch = (\n<Card bordered={false} className=\"x-card-user\">\n  <Menu className=\"user-list\">\n    <Menu.Item key=\"1\">Clicking me will not close the menu.</Menu.Item>\n    <Menu.Item key=\"2\">Clicking me will not close the menu also.</Menu.Item>\n    <Menu.Item key=\"3\">Clicking me will close the menu.</Menu.Item>\n  </Menu>\n</Card>\n);\n// submenu keys of first level\nconst rootSubmenuKeys = [\"sub1\", \"sub2\", \"sub3\", \"sub4\",\"sub5\", \"sub6\", \n\"sub7\", \"sub8\",\"sub9\", \"sub10\", \"sub11\", \"sub12\",\"sub13\", \n\"sub14\", \"sub15\", \"sub16\",\"sub17\", \"sub18\", \"sub19\", \"sub20\",\"sub21\", \"sub22\", \"sub23\", \"sub24\"];\nconst [openKeys, setOpenKeys] = React.useState([\"sub23\"]);\nconst onOpenChange = keys => {\nconst latestOpenKey = keys.find(key => openKeys.indexOf(key) === -1);\nif (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\nsetOpenKeys(keys);\n} else {\nsetOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n}\n};\nconst LoginContainer = () => (\n<div className=\"container\">\n  <Route exact path=\"/\" render={() =>\n  <Redirect to=\"/login\" />\n  } />\n  <Route exact path=\"/login\" component={Login} />\n</div>\n);\nconst DefaultContainer = () => (\n<Layout>\n  <Sider trigger={null} collapsible collapsed={!collapsed}  className=\"x-side-menu\">\n    <div className=\"x-logo-section\">\n      {!collapsed ? \n      <div>\n        <a href=\"#\">\n        <img src={Favicon} alt=\"Logo\"/>\n        </a>\n      </div>\n      : \n      <div>\n        <a href=\"#\">\n        <img src={Logo} alt=\"Logo\"/>\n        </a>\n      </div>\n      }\n    </div>\n    <Menu theme=\"dark\"  openKeys={openKeys}  onOpenChange={onOpenChange}  mode=\"inline\" defaultSelectedKeys={['231']}>\n      <SubMenu key=\"sub23\" icon={\n      <span className=\"x-menu-icon\">sc</span>\n      } title=\"Scheduler\">\n      <Menu.Item key=\"231\">\n        <Link to=\"/scheduler\">\n        Schedule\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"232\">\n        <Link to=\"/calendarview\">\n        Calendar View\n        </Link>\n      </Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub24\" icon={\n      <span className=\"x-menu-icon\">mt</span>\n      } title=\"My Task\">\n      <Menu.Item key=\"241\">\n        <Link to=\"/mytask\">\n        My Task\n        </Link>\n      </Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub1\" icon={\n      <span className=\"x-menu-icon\">sm</span>\n      } title=\"SHE Management\">\n      <Menu.Item key=\"11\">\n        <Link to=\"/managementdashboard\">\n        Dashboard\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"12\">\n        <Link to=\"/performmeetings\">\n        Perform Meetings\n        </Link>\n      </Menu.Item>\n      {/* <Menu.Item key=\"13\">\n        <Link to=\"/mytask\">\n        My Task\n        </Link>\n      </Menu.Item> */}\n      {/* \n      <Menu.Item key=\"13\">\n        <Link to=\"/schedulecouncilmeeting\">\n        SHE Council Meeting\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"14\">\n        <Link to=\"/schedulemrmmeeting\">\n        MRM Meeting\n        </Link>\n      </Menu.Item>\n      */}\n      <Menu.Item key=\"15\">\n        <Link to=\"/needsandexpectations\">\n        Needs And Expectations\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"16\">\n        <Link to=\"/RRRAAA\">\n        Resource,Role,Responsibility,Accountability And Authority\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"17\">\n        <Link to=\"/complianceobligations\">\n        Compliance Obligations\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"18\">\n        <Link to=\"/riskandopportunities\">\n        Risk And Opportunities\n        </Link>\n      </Menu.Item>\n      <Menu.Item key=\"19\">\n        <Link to=\"/comingsoon\">\n        SHE Competency Matrix\n        </Link>\n      </Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub2\" icon={\n      <span className=\"x-menu-icon\">ac</span>\n      } title=\"Audit Protocol\">\n        <Menu.Item key=\"21\">\n        <Link to=\"/auditdashboard\">\n          Dashboard\n          </Link>\n          </Menu.Item>\n      \n      <Menu.Item key=\"22\">\n      <Link to=\"/audits\">\n        Manage Audits\n        </Link>\n        </Menu.Item>\n        <Menu.Item key=\"23\">\n      <Link to=\"/performaudits\">\n        Perform Audits\n        </Link>\n        </Menu.Item>\n      {/* <Menu.Item key=\"21\">Audit Checklist</Menu.Item>\n      <Menu.Item key=\"22\">Internal Audits Schedule(As Per ISO And OSHAS)</Menu.Item>\n      <Menu.Item key=\"23\">Internal Audit Check Sheet(EMS/OSHAS)</Menu.Item> */}\n      </SubMenu>\n      <SubMenu key=\"sub3\" icon={\n      <span className=\"x-menu-icon\">mc</span>\n      } title=\"Management of Change\">\n      <Menu.Item key=\"31\">Change Request Form</Menu.Item>\n      <Menu.Item key=\"32\">Register of Change Request Forms</Menu.Item>\n      <Menu.Item key=\"33\">Pre-Commissioning Checklist</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub4\" icon={\n      <span className=\"x-menu-icon\">hi</span>\n      } title=\"Hazard Identification & Risk Assesment & Job Safety Analysis\">\n      <Menu.Item key=\"41\">HIRA Assesment Sheet</Menu.Item>\n      <Menu.Item key=\"42\">Risk Register</Menu.Item>\n      <Menu.Item key=\"43\">JSA Format</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub5\" icon={\n      <span className=\"x-menu-icon\">hw</span>\n      } title=\"Hazards Operability\">\n      <Menu.Item key=\"51\">HAZOP Worksheet</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub6\" icon={\n      <span className=\"x-menu-icon\">ir</span>\n      } title=\"Incident Reporting & Investigation\">\n      <Menu.Item key=\"61\">Incident Reporting</Menu.Item>\n      <Menu.Item key=\"62\">Incident Investigation Report</Menu.Item>\n      <Menu.Item key=\"63\">Near Miss Reporting</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub7\" icon={\n      <span className=\"x-menu-icon\">fl</span>\n      } title=\"Fire And Life Safety\">\n      <Menu.Item key=\"71\">Fire Doors</Menu.Item>\n      <Menu.Item key=\"72\">Fire Extinguisher Requirements</Menu.Item>\n      <Menu.Item key=\"73\">Fire Load Calculation</Menu.Item>\n      <Menu.Item key=\"74\">Inspection of Fire Extinguishers</Menu.Item>\n      <Menu.Item key=\"75\">Fire Pump Room Checklist</Menu.Item>\n      <Menu.Item key=\"76\">Inspection of Hydrant Boxes And Hose Reels</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub8\" icon={\n      <span className=\"x-menu-icon\">ep</span>\n      } title=\"Emergency Preparedness\">\n      <Menu.Item key=\"81\">General Information of The Plant</Menu.Item>\n      <Menu.Item key=\"82\">Details of Key Personnel</Menu.Item>\n      <Menu.Item key=\"83\">Details of Fire Extinguishing System</Menu.Item>\n      <Menu.Item key=\"84\">External Communication</Menu.Item>\n      <Menu.Item key=\"85\">List of Fire Fighters And First Aiders</Menu.Item>\n      <Menu.Item key=\"86\">List of First Aid Boxes</Menu.Item>\n      <Menu.Item key=\"87\">Location And List of Fire Extinguisher</Menu.Item>\n      <Menu.Item key=\"88\">List of PPE's Available at Control Centre</Menu.Item>\n      <Menu.Item key=\"89\">Plant Layout</Menu.Item>\n      <Menu.Item key=\"810\">Mock-Drill Report</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub9\" icon={\n      <span className=\"x-menu-icon\">cm</span>\n      } title=\"Contractor Management\">\n      <Menu.Item key=\"91\">Contractor Evaluation Sheet</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub10\" icon={\n      <span className=\"x-menu-icon\">wp</span>\n      } title=\"Work Permit System\">\n      <Menu.Item key=\"101\">Type-A Permit</Menu.Item>\n      <Menu.Item key=\"102\">Type-A-1 Permit</Menu.Item>\n      <Menu.Item key=\"103\">Type-A-2 Permit</Menu.Item>\n      <Menu.Item key=\"104\">Type-B Permit</Menu.Item>\n      <Menu.Item key=\"105\">E Permit</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub11\" icon={\n      <span className=\"x-menu-icon\">li</span>\n      } title=\"Lockout Tag out\">\n      <Menu.Item key=\"111\">Lock Issuance Register</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub12\" icon={\n      <span className=\"x-menu-icon\">es</span>\n      } title=\"Electrical Safety\">\n      <Menu.Item key=\"121\">ELCB Register</Menu.Item>\n      <Menu.Item key=\"122\">Earth Pit Test Record</Menu.Item>\n      <Menu.Item key=\"123\">Transformer Checklist</Menu.Item>\n      <Menu.Item key=\"124\">DG Checklist</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub13\" icon={\n      <span className=\"x-menu-icon\">cm</span>\n      } title=\"Machine Guarding\">\n      <Menu.Item key=\"131\">Checklist of Machine Guarding</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub14\" icon={\n      <span className=\"x-menu-icon\">cm</span>\n      } title=\"Chemical And Material Safety\">\n      <Menu.Item key=\"141\">Tanker Loading/Unloading Checklist</Menu.Item>\n      <Menu.Item key=\"142\">Inspection of Safety Shower/Eye Wash Station</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub15\" icon={\n      <span className=\"x-menu-icon\">rs</span>\n      } title=\"Road Safety\">\n      <Menu.Item key=\"151\">Operational Checklist</Menu.Item>\n      <Menu.Item key=\"152\">Workplace Traffic Checklist</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub16\" icon={\n      <span className=\"x-menu-icon\">hw</span>\n      } title=\"Hot Work Area\">\n      <Menu.Item key=\"161\">Welding Machine Checklist</Menu.Item>\n      <Menu.Item key=\"162\">Gas Cutting Checklist</Menu.Item>\n      <Menu.Item key=\"163\">Portable Grinding Checklist</Menu.Item>\n      <Menu.Item key=\"164\">Bench Grinding Checklist</Menu.Item>\n      <Menu.Item key=\"165\">Pedestal Drilling Machine Checklist</Menu.Item>\n      <Menu.Item key=\"166\">Portable Drill Checklist</Menu.Item>\n      <Menu.Item key=\"167\">Cutting Machine Checklist</Menu.Item>\n      <Menu.Item key=\"168\">Bar Bending Machine Checklist</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub18\" icon={\n      <span className=\"x-menu-icon\">em</span>\n      } title=\"Environment Management System\">\n      <Menu.Item key=\"181\">Aspect Impact Sheet</Menu.Item>\n      <Menu.Item key=\"182\">Aspect-Impact Register</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub19\" icon={\n      <span className=\"x-menu-icon\">wm</span>\n      } title=\"Waste Management\">\n      <Menu.Item key=\"191\">Location of Dustbins</Menu.Item>\n      <Menu.Item key=\"192\">Waste Collection Record</Menu.Item>\n      <Menu.Item key=\"193\">Waste Disposal Record</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub20\" icon={\n      <span className=\"x-menu-icon\">oh</span>\n      } title=\"Occupational Health Management\">\n      <Menu.Item key=\"201\">First Aid Box Checklist</Menu.Item>\n      <Menu.Item key=\"202\">Ambulance Checklist</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub21\" icon={\n      <span className=\"x-menu-icon\">wz</span>\n      } title=\"Work Zone Monitoring\">\n      <Menu.Item key=\"211\">List of Location For Work Zone Monitoring</Menu.Item>\n      <Menu.Item key=\"212\">Noise Monitoring</Menu.Item>\n      <Menu.Item key=\"213\">Illumination Monitoring</Menu.Item>\n      <Menu.Item key=\"214\">Temperature Monitoring</Menu.Item>\n      <Menu.Item key=\"215\">Ventilation Monitoring</Menu.Item>\n      <Menu.Item key=\"216\">Volatile Organic Content</Menu.Item>\n      </SubMenu>\n      <SubMenu key=\"sub22\" icon={\n      <span className=\"x-menu-icon\">ps</span>\n      } title=\"Project Safety\">\n      <Menu.Item key=\"221\">Pre-Startup Documentation</Menu.Item>\n      <Menu.Item key=\"222\">Safety Review(Contractors)</Menu.Item>\n      <Menu.Item key=\"223\">Safety Review(Management)</Menu.Item>\n      </SubMenu>\n    </Menu>\n  </Sider>\n  <Layout className=\"site-layout\">\n    <div className=\"x-page-header\">\n      <div className=\"x-header-start\">\n        <div className=\"x-menu-icon\">\n          <MenuUnfoldOutlined onClick={() =>\n          setcollapsed(!collapsed)} />\n        </div>\n        <Dropdown  overlay={frequentSearch} trigger={['click']} className=\"x-frequent-dropdown\">\n          <a className=\"ant-dropdown-link\" onClick={e =>\n            e.preventDefault()}>\n            <div className=\"x-frequent-icon\">\n              <span className=\"main-icon\">\n              Frequently Visited\n              </span>\n              <span className=\"sub-icon\">\n                <DownOutlined />\n              </span>\n            </div>\n          </a>\n        </Dropdown>\n      </div>\n      <div className=\"x-header-end\">\n        <div className=\"x-user-notification\">\n          <div className=\"text-right\">\n            <Dropdown  overlay={notification} trigger={['click']}>\n              <a className=\"ant-dropdown-link\" onClick={e =>\n                e.preventDefault()}>\n                <div className=\"x-notify-icon\">\n                  <span className=\"main-icon\">\n                    <BellOutlined />\n                  </span>\n                  <span className=\"sub-icon\">\n                    <DownOutlined />\n                  </span>\n                </div>\n              </a>\n            </Dropdown>\n          </div>\n        </div>\n        <div className=\"x-user-settings\">\n          <div className=\"text-right\">\n            <Dropdown overlay={menu} trigger={['click']}>\n              <a className=\"ant-dropdown-link\" onClick={e =>\n                e.preventDefault()}>\n                <div className=\"x-notify-icon\">\n                  <span className=\"main-icon\">\n                    <SettingOutlined />\n                  </span>\n                  <span className=\"sub-icon\">\n                    <DownOutlined />\n                  </span>\n                </div>\n              </a>\n            </Dropdown>\n          </div>\n        </div>\n      </div>\n    </div>\n    {/* \n    <PrivateRoute exact path=\"/\" component={Dashboard} />\n    */}\n    <PrivateRoute exact path=\"/\" component={LoginContainer} />\n    <PrivateRoute exact path=\"/login\" component={LoginContainer} />\n    <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n    <PrivateRoute exact path=\"/managementdashboard\" component={ManagementDashboard} />\n    <PrivateRoute exact path=\"/scheduler\" component={Scheduler} />\n    <PrivateRoute exact path=\"/audits\" component={Audits} />\n    <PrivateRoute exact path=\"/auditdashboard\" component={AuditDashboard} />\n    <PrivateRoute exact path=\"/performaudits\" component={PerformAudits} />\n    <PrivateRoute exact path=\"/performmeetings\" component={PerformMeetings} />\n    <PrivateRoute exact path=\"/calendarview\" component={CalendarView} />\n    <PrivateRoute exact path=\"/schedulecouncilmeeting\" component={ScheduleCouncilMeeting} />\n    <PrivateRoute exact path=\"/schedulemrmmeeting\" component={ScheduleMrmMeeting} />\n    <PrivateRoute exact path=\"/needsandexpectations\" component={NeedsAndExpectations} />\n    <PrivateRoute exact path=\"/complianceobligations\" component={ComplianceObligations} />\n    <PrivateRoute exact path=\"/RRRAAA\" component={ResourceRoleResponsibility} />\n    <PrivateRoute exact path=\"/riskandopportunities\" component={RiskAndOpportunities} />\n    <PrivateRoute exact path=\"/mytask\" component={MyTask} />\n    <PrivateRoute exact path=\"/comingsoon\" component={ComingSoon} />\n  </Layout>\n</Layout>\n);\nreturn (\n<div className=\"App\">\n  <BrowserRouter basename=\"/she\" history={history}>\n    <Switch>\n      <Route exact path=\"/login\" component={LoginContainer} />\n      <Route component={DefaultContainer} />\n    </Switch>\n  </BrowserRouter>\n</div>\n);\n}\nexport default App;","/home/est-dell-1/kirthika/Marico-SHE/src/serviceWorker.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/helpers/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/helpers/store.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/constants/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/constants/constants.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/component/CustomScrollDiv/CustomScrollDiv.js",["333","334"],"import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport \"./onHoverStyle.css\";\n\nconst SCROLL_BOX_MIN_HEIGHT = 20;\n\nexport default function CustomScrollDiv({ children, className, ...restProps }) {\n  const [hovering, setHovering] = useState(false);\n  const [scrollBoxHeight, setScrollBoxHeight] = useState(SCROLL_BOX_MIN_HEIGHT);\n  const [scrollBoxTop, setScrollBoxTop] = useState(0);\n  const [lastScrollThumbPosition, setScrollThumbPosition] = useState(0);\n  const [isDragging, setDragging] = useState(false);\n\n  const handleMouseOver = useCallback(() => {\n    !hovering && setHovering(true);\n  }, [hovering]);\n\n  const handleMouseOut = useCallback(() => {\n    !!hovering && setHovering(false);\n  }, [hovering]);\n\n  const handleDocumentMouseUp = useCallback(\n    e => {\n      if (isDragging) {\n        e.preventDefault();\n        setDragging(false);\n      }\n    },\n    [isDragging]\n  );\n\n  const handleDocumentMouseMove = useCallback(\n    e => {\n      if (isDragging) {\n        e.preventDefault();\n        e.stopPropagation();\n        const scrollHostElement = scrollHostRef.current;\n        const { scrollHeight, offsetHeight } = scrollHostElement;\n\n        let deltaY = e.clientY - lastScrollThumbPosition;\n        let percentage = deltaY * (scrollHeight / offsetHeight);\n\n        setScrollThumbPosition(e.clientY);\n        setScrollBoxTop(\n          Math.min(\n            Math.max(0, scrollBoxTop + deltaY),\n            offsetHeight - scrollBoxHeight\n          )\n        );\n        scrollHostElement.scrollTop = Math.min(\n          scrollHostElement.scrollTop + percentage,\n          scrollHeight - offsetHeight\n        );\n      }\n    },\n    [isDragging, lastScrollThumbPosition, scrollBoxHeight, scrollBoxTop]\n  );\n\n  const handleScrollThumbMouseDown = useCallback(e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setScrollThumbPosition(e.clientY);\n    setDragging(true);\n    console.log(\"handleScrollThumbMouseDown\");\n  }, []);\n\n  const handleScroll = useCallback(() => {\n    if (!scrollHostRef) {\n      return;\n    }\n    const scrollHostElement = scrollHostRef.current;\n    const { scrollTop, scrollHeight, offsetHeight } = scrollHostElement;\n\n    let newTop =\n      (parseInt(scrollTop, 10) / parseInt(scrollHeight, 10)) * offsetHeight;\n    // newTop = newTop + parseInt(scrollTop, 10);\n    newTop = Math.min(newTop, offsetHeight - scrollBoxHeight);\n    setScrollBoxTop(newTop);\n  }, []);\n\n  const scrollHostRef = useRef();\n\n  useEffect(() => {\n    const scrollHostElement = scrollHostRef.current;\n    const { clientHeight, scrollHeight } = scrollHostElement;\n    const scrollThumbPercentage = clientHeight / scrollHeight;\n    const scrollThumbHeight = Math.max(\n      scrollThumbPercentage * clientHeight,\n      SCROLL_BOX_MIN_HEIGHT\n    );\n    setScrollBoxHeight(scrollThumbHeight);\n    scrollHostElement.addEventListener(\"scroll\", handleScroll, true);\n    return function cleanup() {\n      scrollHostElement.removeEventListener(\"scroll\", handleScroll, true);\n    };\n  }, []);\n\n  useEffect(() => {\n    //this is handle the dragging on scroll-thumb\n    document.addEventListener(\"mousemove\", handleDocumentMouseMove);\n    document.addEventListener(\"mouseup\", handleDocumentMouseUp);\n    document.addEventListener(\"mouseleave\", handleDocumentMouseUp);\n    return function cleanup() {\n      document.removeEventListener(\"mousemove\", handleDocumentMouseMove);\n      document.removeEventListener(\"mouseup\", handleDocumentMouseUp);\n      document.removeEventListener(\"mouseleave\", handleDocumentMouseUp);\n    };\n  }, [handleDocumentMouseMove, handleDocumentMouseUp]);\n\n  return (\n    <div\n      className={\"scrollhost-container\"}\n      onMouseOver={handleMouseOver}\n      onMouseOut={handleMouseOut}\n    >\n      <div\n        ref={scrollHostRef}\n        className={`scrollhost ${className}`}\n        {...restProps}\n      >\n        {children}\n      </div>\n      <div className={\"scroll-bar\"} style={{ opacity: hovering ? 1 : 0 }}>\n        <div\n          className={\"scroll-thumb\"}\n          style={{ height: scrollBoxHeight, top: scrollBoxTop }}\n          onMouseDown={handleScrollThumbMouseDown}\n        />\n      </div>\n    </div>\n  );\n}\n",["335","336"],"/home/est-dell-1/kirthika/Marico-SHE/src/component/PrivateRoute/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/component/PrivateRoute/PrivateRoute.jsx",[],"/home/est-dell-1/kirthika/Marico-SHE/src/actions/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/actions/actions.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/services/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/config.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/services/services.js",["337","338","339"],"import { authHeader } from \"../helpers\";\nimport { API_URL } from \"../config.js\";\n\nexport const services = {\n  Login,\n  CommonLogin,\n  VerifyMemEmail,\n  Logout,\n  SelectUnits,\n  SelectUnitType,\n  selectAgenda,\n  SelectAgendaFor,\n  SelectMembers,\n  GetMrmMeeting,\n  ScheduleMrmMeeting,\n  ScheduleCouncilMeeting,\n  StartMrmMeeting,\n  EditMrmMeeting,\n  DeleteMrmMeeting,\n  AddRecommendationFirst,\n  CompleteMrmMeeting,\n  SelectSchedulerType,\n  SelectSchedulerMeetingSubType,\n  SelectSchedulerFrequency,\n  SelectSchedulerDays,\n  SelectSchedulerFrequencyRepeatOn,\n  GetScheduler,\n  CreateScheduler,\n  EditScheduler,\n  DeleteScheduler,\n  StatusScheduler,\n  GetSchedulerMTD,\n  GetSheMeetingMonthlyScore,\n  GetSheMeetingYearlyScore,\n  GetSheMeetingMonth,\n  GetSheMeetingYear,\n  GetSheMeetingActions,\n  GetSheMeeting,\n  DeleteSheMeetings,\n  StartSheMeeting,\n  GetSheRecommendations,\n  AddSheRecommendationFirst,\n  AddSheRecommendation,\n  EditSheRecommendation,\n  DeleteSheRecommendation,\n  CompleteSheRecommendation,\n  SubmitSheMeeting,\n  ApproveShemeeting,\n  UnlockShemeeting,\n  GetAuditMaster,\n  GetAuditId,\n  SelectAuditType,\n  SelectAudit,\n  AddAuditMaster,\n  EditAuditMaster,\n  DeleteAuditMaster,\n\n  GetNeedsExpectations,\n  AddNeedsExpectations,\n  EditNeedsExpectations,\n  DeleteNeedsExpectations,\n  NeedsExpectationsStatus,\n  DeleteNeedsExpectationsAttachment,\n\n  GetRRRAA,\n  AddRRRAA,\n  EditRRRAA,\n  DeleteRRRAA,\n  RRRAAStatus,\n  DeleteRRRAAAttachment,\n  GetRiskOpportunities,\n  AddRiskOpportunities,\n  EditRiskOpportunities,\n  DeleteRiskOpportunities,\n  RiskOpportunitiesStatus,\n  DeleteRiskOpportunitiesAttachments,\n  GetComplianceObligations,\n  AddComplianceObligations,\n  EditComplianceObligations,\n  DeleteComplianceObligations,\n  ComplianceObligationsStatus,\n  DeleteComplianceObligationsAttachment,\n  GetNeedsExpectation,\n  SelectDepartments,\n};\n\nfunction Login(email, password, device_no) {\n  let device_type = \"WEB\";\n  password = \"kaizen123\";\n  var loginData = {\n    member_email: email,\n    member_password: password,\n    device_no: device_no,\n    device_type: device_type,\n  };\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(loginData),\n  };\n\n  return fetch(API_URL + \"member-login\", requestOptions)\n    .then(HandleResponse)\n    .then((user) => {\n      let userdata = user.data;\n      let token = user.api_token;\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem(\"user\", JSON.stringify(userdata));\n      localStorage.setItem(\"token\", token);\n      return userdata;\n    });\n}\n\nfunction CommonLogin(email, device_no) {\n  let device_type = \"WEB\";\n  var loginData = {\n    member_email: email,\n    device_no: device_no,\n    device_type: device_type,\n  };\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(loginData),\n  };\n\n  return fetch(API_URL + \"common-login\", requestOptions)\n    .then(HandleResponse)\n    .then((user) => {\n      let userdata = user.data;\n      let token = user.api_token;\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem(\"user\", JSON.stringify(userdata));\n      localStorage.setItem(\"token\", token);\n\n      return userdata;\n    });\n}\n\nfunction VerifyMemEmail(mem_email) {\n  var emailData = {\n    mem_email: mem_email,\n  };\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(emailData),\n  };\n\n  return fetch(API_URL + \"member_verify\", requestOptions).then(HandleResponse);\n}\n\nfunction Logout(ip_address) {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(\"token\");\n\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n  let type = \"WEB\";\n  return fetch(\n    `${API_URL}member_logout?device_no=${ip_address}&device_type=${type}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction SelectUnitType() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(API_URL + \"select-unit-type\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectUnits(unit_type) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    `${API_URL}select-units?unit_type=${unit_type}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction selectAgenda(agenda_for_id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    `${API_URL}select-agenda?agenda_for_id=${agenda_for_id}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction SelectAgendaFor() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}select-agenda-for`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectMembers(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}select-members?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction ScheduleCouncilMeeting(\n  plant_id,\n  shift_name,\n  shift_start_time,\n  shift_end_time,\n  shift_dam_meeting,\n  shift_remarks\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      plant_id,\n      shift_name,\n      shift_start_time,\n      shift_end_time,\n      shift_dam_meeting,\n      shift_remarks,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"mrms\", requestOptions).then(HandleResponse);\n}\n\nfunction GetMrmMeeting(unit_id, offset) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    `${API_URL}mrms?unit_id=${unit_id}&offset=${offset}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction ScheduleMrmMeeting(\n  unit_id,\n  mrm_date,\n  mrm_members,\n  mrm_agenda,\n  mrm_reminder,\n  mrm_reminder_days\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      unit_id,\n      mrm_date,\n      mrm_members,\n      mrm_agenda,\n      mrm_reminder,\n      mrm_reminder_days,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"mrms\", requestOptions).then(HandleResponse);\n}\n\nfunction StartMrmMeeting(mrm_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      mrm_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"mrmStart\", requestOptions).then(HandleResponse);\n}\n\nfunction EditMrmMeeting(\n  mrm_id,\n  unit_id,\n  mrm_date,\n  mrm_members,\n  mrm_agenda,\n  mrm_reminder,\n  mrm_reminder_days\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      mrm_id,\n      unit_id,\n      mrm_date,\n      mrm_members,\n      mrm_agenda,\n      mrm_reminder,\n      mrm_reminder_days,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"mrms\", requestOptions).then(HandleResponse);\n}\n\nfunction DeleteMrmMeeting(mrm_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      mrm_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"mrms\", requestOptions).then(HandleResponse);\n}\n\nfunction CompleteMrmMeeting(mrm_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      mrm_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"mrmComplete\", requestOptions).then(HandleResponse);\n}\n\nfunction AddRecommendationFirst(mrm_id, unit_id, mrm_recommendations) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      mrm_id,\n      unit_id,\n      mrm_recommendations,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"mrmRecommendations-firstadd\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectSchedulerType() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(API_URL + \"select-scheduler-type\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectSchedulerMeetingSubType() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    API_URL + \"select-scheduler-meeting-sub-type\",\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction SelectSchedulerFrequency() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(API_URL + \"select-scheduler-frequency\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectSchedulerDays() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(API_URL + \"select-scheduler-days\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectSchedulerFrequencyRepeatOn() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    API_URL + \"select-scheduler-frequency-repeaton\",\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction GetScheduler(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}schedulers?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction CreateScheduler(\n  scheduler_type,\n  scheduler_sub_type,\n  unit_type,\n  unit_id,\n  scheduler_members,\n  scheduler_frequency,\n  scheduler_date,\n  scheduler_time,\n  scheduler_agenda,\n  scheduler_frequency_start,\n  scheduler_frequency_end,\n  scheduler_frequency_repeat,\n  scheduler_frequency_year_date,\n  scheduler_frequency_days,\n  scheduler_frequency_repeat_on,\n  scheduler_frequency_date,\n  scheduler_frequency_weeks,\n  scheduler_audit,\n  scheduler_reminder,\n  scheduler_reminder_days\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      scheduler_type,\n      scheduler_sub_type,\n      unit_type,\n      unit_id,\n      scheduler_members,\n      scheduler_frequency,\n      scheduler_date,\n      scheduler_time,\n      scheduler_agenda,\n      scheduler_frequency_start,\n      scheduler_frequency_end,\n      scheduler_frequency_repeat,\n      scheduler_frequency_year_date,\n      scheduler_frequency_days,\n      scheduler_frequency_repeat_on,\n      scheduler_frequency_date,\n      scheduler_frequency_weeks,\n      scheduler_audit,\n      scheduler_reminder,\n      scheduler_reminder_days,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"schedulers\", requestOptions).then(HandleResponse);\n}\n\nfunction EditScheduler(\n        scheduler_id,\n        scheduler_type,\n        scheduler_sub_type,\n        unit_type,\n        unit_id,\n        scheduler_members,\n        scheduler_frequency,\n        scheduler_date,\n        scheduler_time,\n        scheduler_frequency_start,\n        scheduler_frequency_end,\n        scheduler_frequency_repeat,\n        scheduler_frequency_year_date,\n        scheduler_frequency_days,\n        scheduler_frequency_repeat_on,\n        scheduler_frequency_date,\n        scheduler_frequency_weeks,\n        scheduler_reminder,\n        scheduler_reminder_days\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n        scheduler_id,\n        scheduler_type,\n        scheduler_sub_type,\n        unit_type,\n        unit_id,\n        scheduler_members,\n        scheduler_frequency,\n        scheduler_date,\n        scheduler_time,\n        scheduler_frequency_start,\n        scheduler_frequency_end,\n        scheduler_frequency_repeat,\n        scheduler_frequency_year_date,\n        scheduler_frequency_days,\n        scheduler_frequency_repeat_on,\n        scheduler_frequency_date,\n        scheduler_frequency_weeks,\n        scheduler_reminder,\n        scheduler_reminder_days,\n        updated_by,\n    }),\n  };\n  return fetch(API_URL + \"schedulers\", requestOptions).then(HandleResponse);\n}\n\n\nfunction DeleteScheduler(scheduler_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      scheduler_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"schedulers\", requestOptions).then(HandleResponse);\n}\n\nfunction StatusScheduler(scheduler_id, status) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      scheduler_id,\n      status,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"schedulersStatus\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetSchedulerMTD(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}scheduler-mtd?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetSheMeetingMonthlyScore(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    `${API_URL}shemeeting-monthly-score?${args}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction GetSheMeetingYearlyScore(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    `${API_URL}shemeeting-yearly-score?${args}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction GetSheMeetingMonth(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}shemeeting-mtd?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetSheMeetingYear(arg) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}shemeeting-ytd?${arg}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetSheMeetingActions(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}shemeeting-actions?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetSheMeeting(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}shemeetings?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteSheMeetings(she_meeting_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      she_meeting_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"shemeetings\", requestOptions).then(HandleResponse);\n}\n\nfunction StartSheMeeting(she_meeting_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      she_meeting_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"shemeetingStart\", requestOptions).then(\n    HandleResponse\n  );\n}\nfunction ApproveShemeeting(she_meeting_id, she_meeting_approve_comments,) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      she_meeting_id,\n      she_meeting_approve_comments,\n      updated_by,\n    }),\n  };\n  return fetch(API_URL + \"shemeeting-approval\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction UnlockShemeeting(she_meeting_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      she_meeting_id,\n      updated_by,\n    }),\n  };\n  return fetch(API_URL + \"shemeeting-unlock\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetSheRecommendations(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    `${API_URL}shemeetingRecommendations?${args}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction AddSheRecommendationFirst(\n  unit_id,\n  she_meeting_id,\n  she_meeting_recommendations\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      unit_id,\n      she_meeting_id,\n      she_meeting_recommendations,\n      created_by,\n    }),\n  };\n\n  return fetch(\n    API_URL + \"shemeetingRecommendations-firstadd\",\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction AddSheRecommendation(\n  unit_id,\n  she_meeting_id,\n  she_meeting_recommendation_name,\n  she_meeting_recommendation_fpr_id,\n  she_meeting_recommendation_targetdate\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      unit_id,\n      she_meeting_id,\n      she_meeting_recommendation_name,\n      she_meeting_recommendation_fpr_id,\n      she_meeting_recommendation_targetdate,\n\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"shemeetingRecommendations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction EditSheRecommendation(\n  unit_id,\n  she_meeting_id,\n  she_meeting_recommendation_id,\n  she_meeting_recommendation_name,\n  she_meeting_recommendation_fpr_id,\n  she_meeting_recommendation_targetdate,\n  she_meeting_recommendation_status\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      unit_id,\n      she_meeting_id,\n      she_meeting_recommendation_id,\n      she_meeting_recommendation_name,\n      she_meeting_recommendation_fpr_id,\n      she_meeting_recommendation_targetdate,\n      she_meeting_recommendation_status,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"shemeetingRecommendations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteSheRecommendation(she_meeting_recommendation_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      she_meeting_recommendation_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"shemeetingRecommendations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction CompleteSheRecommendation(she_meeting_recommendation_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      she_meeting_recommendation_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(\n    API_URL + \"shemeetingRecommendations-complete\",\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction SubmitSheMeeting(she_meeting_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      she_meeting_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"shemeetingSubmit\", requestOptions).then(\n    HandleResponse\n  );\n}\n\n\n\nfunction GetAuditMaster(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n  return fetch(`${API_URL}auditmaster?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetAuditId(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n  return fetch(`${API_URL}auditmaster?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectAuditType() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}select-audit-type`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction SelectAudit(audit_type) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(\n    `${API_URL}select-audit?audit_type=${audit_type}`,\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction AddAuditMaster(audit_name, audit_type, ui_order) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      audit_name,\n      audit_type,\n      ui_order,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"auditmaster\", requestOptions).then(HandleResponse);\n}\n\nfunction EditAuditMaster(audit_id, audit_type, audit_name, ui_order, unit_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      audit_id,\n      audit_type,\n      audit_name,\n      ui_order,\n      unit_id,\n      updated_by,\n    }),\n  };\n  return fetch(API_URL + \"auditmaster\", requestOptions).then(HandleResponse);\n}\n\nfunction DeleteAuditMaster(audit_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      audit_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"auditmaster\", requestOptions).then(HandleResponse);\n}\n\nfunction GetNeedsExpectations(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}needsexpectations?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetNeedsExpectation(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}needsexpectations?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction AddNeedsExpectations(\n  needs_expectations_title,\n  needs_expectations_attachment,\n  unit_id,\n  unit_type\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      needs_expectations_title,\n      needs_expectations_attachment,\n      unit_id,\n      unit_type,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"needsexpectations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction EditNeedsExpectations(\n  needs_expectations_id,\n  needs_expectations_title,\n  needs_expectations_attachment\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      needs_expectations_id,\n      needs_expectations_title,\n      needs_expectations_attachment,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"needsexpectations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteNeedsExpectations(needs_expectations_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      needs_expectations_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"needsexpectations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction NeedsExpectationsStatus(needs_expectations_id, status) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      needs_expectations_id,\n      status,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"needsexpectationsStatus\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteNeedsExpectationsAttachment(needs_expectations_attachments_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      needs_expectations_attachments_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"needsexpectationsattachments\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetRRRAA(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}rrraa?${args}`, requestOptions).then(HandleResponse);\n}\n\nfunction AddRRRAA(rrr_aa_title, rrr_aa_attachment, unit_id, unit_type) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      rrr_aa_title,\n      rrr_aa_attachment,\n      unit_id,\n      unit_type,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"rrraa\", requestOptions).then(HandleResponse);\n}\n\nfunction EditRRRAA(rrr_aa_id, rrr_aa_title, rrr_aa_attachment) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      rrr_aa_id,\n      rrr_aa_title,\n      rrr_aa_attachment,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"rrraa\", requestOptions).then(HandleResponse);\n}\n\nfunction DeleteRRRAA(rrr_aa_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      rrr_aa_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"rrraa\", requestOptions).then(HandleResponse);\n}\n\nfunction RRRAAStatus(rrr_aa_id, status) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      rrr_aa_id,\n      status,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"rrraaStatus\", requestOptions).then(HandleResponse);\n}\n\nfunction DeleteRRRAAAttachment(rrr_aa_attachments_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      rrr_aa_attachments_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"rrraaattachments\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetRiskOpportunities(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}riskopportunities?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction AddRiskOpportunities(\n  risk_opportunities_title,\n  risk_opportunities_attachment,\n  unit_id,\n  unit_type\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      risk_opportunities_title,\n      risk_opportunities_attachment,\n      unit_id,\n      unit_type,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"riskopportunities\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction EditRiskOpportunities(\n  risk_opportunities_id,\n  risk_opportunities_title,\n  risk_opportunities_attachment\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      risk_opportunities_id,\n      risk_opportunities_title,\n      risk_opportunities_attachment,\n\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"riskopportunities\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteRiskOpportunities(risk_opportunities_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      risk_opportunities_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"riskopportunities\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction RiskOpportunitiesStatus(risk_opportunities_id, status) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      risk_opportunities_id,\n      status,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"riskopportunitiesStatus\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteRiskOpportunitiesAttachments(risk_opportunities_attachments_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      risk_opportunities_attachments_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"riskopportunitiesattachments\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction GetComplianceObligations(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}complianceobligations?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction AddComplianceObligations(\n  compliance_obligations_title,\n  compliance_obligations_attachment,\n  unit_id,\n  unit_type\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let created_by = user.member_id;\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      compliance_obligations_title,\n      compliance_obligations_attachment,\n      unit_id,\n      unit_type,\n      created_by,\n    }),\n  };\n\n  return fetch(API_URL + \"complianceobligations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction EditComplianceObligations(\n  compliance_obligations_id,\n  compliance_obligations_title,\n  compliance_obligations_attachment\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      compliance_obligations_id,\n      compliance_obligations_title,\n      compliance_obligations_attachment,\n\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"complianceobligations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteComplianceObligations(compliance_obligations_id) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      compliance_obligations_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"complianceobligations\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction ComplianceObligationsStatus(compliance_obligations_id, status) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      compliance_obligations_id,\n      status,\n      updated_by,\n    }),\n  };\n\n  return fetch(API_URL + \"complianceobligationsStatus\", requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction DeleteComplianceObligationsAttachment(\n  compliance_obligations_attachments_id\n) {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  let updated_by = user.member_id;\n\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n    body: JSON.stringify({\n      compliance_obligations_attachments_id,\n      updated_by,\n    }),\n  };\n\n  return fetch(\n    API_URL + \"complianceobligationsattachments\",\n    requestOptions\n  ).then(HandleResponse);\n}\n\nfunction SelectDepartments(args) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}select-departments?${args}`, requestOptions).then(\n    HandleResponse\n  );\n}\n\nfunction HandleResponse(response) {\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n    const status = data.status;\n    const code = data.code;\n\n    if (code == 202) {\n      if (data.message == \"Not Allowed to Delete\") {\n      } else {\n        Logout();\n        window.location.reload();\n      }\n    }\n\n    if (status === \"error\") {\n      if (data.message == \"Not Allowed to Delete\") {\n        const error = data;\n        return Promise.reject(error);\n      } else {\n        const error = (data && data.message) || response.statusText;\n        return Promise.reject(error);\n      }\n    }\n\n    if (!response.ok) {\n      if (response.status === 500) {\n        let error = \"Operation Not Successful\";\n        return Promise.reject(error);\n      }\n      if (response.status === 202) {\n        Logout();\n        window.location.reload();\n      }\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n","/home/est-dell-1/kirthika/Marico-SHE/src/helpers/auth-header.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/helpers/history.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/councilmeeting.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/mrmmeeting.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ScheduleCouncilMeeting/ScheduleCouncilMeeting.js",["340"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n//import { actions } from \"../../actions/actions\";\nimport { actions } from \"../../../actions/actions\";\nimport { Form, Select, DatePicker, Button, Breadcrumb, Card, Checkbox, Input, Drawer, Space, Collapse, notification, Tabs, Popconfirm } from 'antd';\nimport { \nHomeOutlined, \nLoading3QuartersOutlined, \nCalendarOutlined, \nCheckCircleFilled, \nPlusOutlined, \nLockFilled,\nTagFilled,\nPlusCircleFilled,\nEditFilled,\nPlayCircleFilled,\nDeleteFilled,\n} from '@ant-design/icons';\nimport moment from 'moment';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst { TabPane } = Tabs;\nconst dateFormat = 'DD-MM-YYYY';\nconst datetimeFormat = 'DD-MM-YYYY  HH:mm';\nclass ScheduleCouncilMeeting extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nreminder_email_checked: false,\nopen_add_recommendations: false,\nopen_edit_recommendations: false,\nopen_view_recommendations: false,\nopen_edit_meeting: false,\nmeeting_data:{\nlocation_id: '3p',\nunit_id:'plant1',\ncouncil_date:moment('19-02-2021 10:25', datetimeFormat),\ncouncil_members:['1','5'],\ncouncil_agenda: ['a1','a2'],\n},\nupdate_reminder_email_checked: true,\ndata: [\n{\nvalue: 1,\ntext: 'Plant'\n},\n{\nvalue: 2,\ntext: '3P'\n},\n{\nvalue: 3,\ntext: 'Depot'\n},\n],\ncouncil_date: '',\nupdate_council_date: '17-02-2021 10:00',\nupdate_target_date: '',\nmeeting_1_status: 'scheduled',\nmeeting_2_status: 'conducted_add_recommendation',\nmeeting_3_status: 'conducted_edit_recommendation',\nmeeting_4_status: 'conducted_edit_recommendation_overdue',\nmeeting_5_status: 'submitted',\nedit_recommendations: {\nsheRecommendations: [\n{\nSNo: \"1\",\nrecommendation: \"Recommendation1\",\nFPR: \"4\",\ntargetdate: moment('02-02-2021', dateFormat),\nstatus: 'pending'\n},\n{\nSNo: \"2\",\nrecommendation: \"Recommendation2\",\nFPR: \"9\",\ntargetdate: moment('12-12-2021', dateFormat),\nstatus: 'completed'\n},\n{\nSNo: \"3\",\nrecommendation: \"Recommendation3\",\nFPR: \"8\",\ntargetdate: moment('03-05-2022', dateFormat),\nstatus: 'pending'\n},\n{\nSNo: \"4\",\nrecommendation: \"Recommendation4\",\nFPR: \"7\",\ntargetdate: moment('10-11-2021', dateFormat),\nstatus: 'completed'\n},\n{\nSNo: \"5\",\nrecommendation: \"Recommendation5\",\nFPR: \"6\",\ntargetdate: moment('22-08-2021', dateFormat),\nstatus: 'completed'\n},\n{\nSNo: \"6\",\nrecommendation: \"Recommendation6\",\nFPR: \"5\",\ntargetdate: moment('01-09-2021', dateFormat),\nstatus: 'pending'\n},\n],\n},\nactive_single_add_recommendation: true,\nnotification_placement: 'topRight',\n};\nthis.reminderemail = this.reminderemail.bind(this);\nthis.openEditMeeting = this.openEditMeeting.bind(this);\nthis.closeEditMeeting = this.closeEditMeeting.bind(this);\nthis.openAddRecommendations = this.openAddRecommendations.bind(this);\nthis.closeAddRecommendations = this.closeAddRecommendations.bind(this);\nthis.openEditRecommendations = this.openEditRecommendations.bind(this);\nthis.closeEditRecommendations = this.closeEditRecommendations.bind(this);\nthis.openViewRecommendations = this.openViewRecommendations.bind(this);\nthis.closeViewRecommendations = this.closeViewRecommendations.bind(this);\nthis.scheduleMeeting = this.scheduleMeeting.bind(this);\nthis.editMeeting = this.editMeeting.bind(this);\nthis.startMeeting = this.startMeeting.bind(this);\nthis.deleteMeeting = this.deleteMeeting.bind(this);\nthis.cancelDeleteMeeting = this.cancelDeleteMeeting.bind(this);\nthis.submitRecommendations = this.submitRecommendations.bind(this);\nthis.activeSingleAddRecommendation = this.activeSingleAddRecommendation.bind(this);\nthis.submitSingleAddRecommendations = this.submitSingleAddRecommendations.bind(this);\nthis.handleLocationTypeChange = this.handleLocationTypeChange.bind(this);\nthis.handleDate = this.handleDate.bind(this);\nthis.handleupdateDate = this.handleupdateDate.bind(this);\nthis.updatereminderemail = this.updatereminderemail.bind(this);\nthis.getUpdatedRecommendationData = this.getUpdatedRecommendationData.bind(this);\nthis.initiateUpdateRecommendation = this.initiateUpdateRecommendation.bind(this);\nthis.updateRecommendation = this.updateRecommendation.bind(this);\nthis.updatedRecommendationData = null;\nthis.updateTargetDate = this.updateTargetDate.bind(this);\n}\ncomponentDidMount() {\n  this.props.GetMrmMeeting(1);\n}  \nreminderemail() {\nthis.setState({reminder_email_checked: !this.state.reminder_email_checked});\n}\nupdatereminderemail() {\nthis.setState({update_reminder_email_checked: !this.state.update_reminder_email_checked});\n}\nopenAddRecommendations(){\nthis.setState({open_add_recommendations: true});  \n}\ncloseAddRecommendations(){\nthis.setState({open_add_recommendations: false});  \n}\nopenEditRecommendations(){\nthis.setState({open_edit_recommendations: true});\n}\ncloseEditRecommendations(){\nthis.setState({open_edit_recommendations: false});\n}\nopenEditMeeting(){\nthis.setState({open_edit_meeting: true});\n}\ncloseEditMeeting(){\nthis.setState({open_edit_meeting: false});\n}\nopenViewRecommendations(){\nthis.setState({open_view_recommendations: true});\n}\ncloseViewRecommendations(){\nthis.setState({open_view_recommendations: false});\n}\nscheduleMeeting(values){\nvalues.council_date = this.state.council_date;\nvalues.reminder_email = this.state.reminder_email_checked;\nconsole.log(values);\n//this.props.ScheduleCouncilMeeting(values);\n}\nstartMeeting(){\n  const {notification_placement} = this.state;\n  notification.success({\n  className: 'successnotice',\n  message: `Success Notice`,\n  description:\n  'SHE Council Meeting Started Successfully',\n  notification_placement,\n  //duration: 0,\n  icon: <CheckCircleFilled style={{ color: '#fff' }} />,\n  });\n  }\neditMeeting(values){\nconsole.log(\"editMeeting\");\nvalues.update_council_date = this.state.update_council_date;\nvalues.update_reminder_email =this.state.update_reminder_email_checked;\nconsole.log(values);\n}\ndeleteMeeting(){\n  const {notification_placement} = this.state;\n  notification.success({\n    className: 'successnotice',\n    message: `Success Notice`,\n    description:\n    'SHE Council Meeting Deleted Successfully',\n    notification_placement,\n    //duration: 0,\n    icon: <CheckCircleFilled style={{ color: '#fff' }} />,\n    });\n}\ncancelDeleteMeeting(){\n\n}\nsubmitRecommendations(values){\n  console.log(\"submitRecommendations\");\n  console.log(values);\n}\nactiveSingleAddRecommendation(){\n  this.setState({active_single_add_recommendation: !this.state.active_single_add_recommendation});\n}\nsubmitSingleAddRecommendations(values){ \nconsole.log(values);\n//this.setState({active_single_add_recommendation: !this.state.active_single_add_recommendation});\n}\nhandleDate(date, dateString) {\nthis.setState({ council_date: dateString });\n}\nhandleupdateDate(date, dateString){\nthis.setState({ update_council_date: dateString });\n}\nupdateTargetDate(date, dateString){\nthis.setState({ update_target_date: dateString });\n}\n\nhandleLocationTypeChange(value){\nconsole.log(value);\n}\ninitiateUpdateRecommendation(key){\nconst {edit_recommendations, update_target_date} = this.state;\n\nvar getActiveSelector = document.querySelector(\".x-dynamic-form.active\")\nif(getActiveSelector !== null) {\ngetActiveSelector.classList.remove('active');\n}\nelse{\n}\ndocument.getElementById(`x-recommendation-list${key}`).classList.add('active');\nconst setUpdatedDate = edit_recommendations.sheRecommendations[key].targetdate.format('DD-MM-YYYY');\nthis.setState({update_target_date: setUpdatedDate});\nsetTimeout(()=>{\nconsole.log(setUpdatedDate);\n},1000)\n}\ngetUpdatedRecommendationData(changedValues, allValues){\nconsole.log(changedValues, allValues);\nthis.updatedRecommendationData = allValues;\n}\nupdateRecommendation(myIndex, field){\nconst { update_target_date } = this.state;\nthis.updatedRecommendationData.sheRecommendations[myIndex].targetdate = update_target_date;\nconsole.log(this.updatedRecommendationData.sheRecommendations[myIndex]);\ndocument.getElementById(`x-recommendation-list${myIndex}`).classList.remove('active');\n}\n\nrender(){\nconst { reminder_email_checked, update_reminder_email_checked, \n  open_edit_recommendations, open_edit_meeting, open_add_recommendations, \n   open_view_recommendations, active_single_add_recommendation } = this.state;\nreturn(\n<React.Fragment>\n  <div className=\"x-page-container\">\n    <div className=\"row\">\n      <div className=\"x-page-title\">\n        <h1>Schedule SHE Council Meeting</h1>\n      </div>\n    </div>\n    <div className=\"row x-breadcrumb\">\n    <Breadcrumb>\n      <Link to=\"/dashboard\">\n        <Breadcrumb.Item>\n          <HomeOutlined />\n        </Breadcrumb.Item>\n        </Link>\n        <Link to=\"/managementdashboard\">\n        <Breadcrumb.Item>\n          <span>SHE Management</span>\n        </Breadcrumb.Item>\n        </Link>\n        <Breadcrumb.Item>Schedule SHE Council Meeting</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n    <div className=\"row x-row\">\n      <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n        <Collapse expandIconPosition=\"right\">\n          <Panel header=\"Schedule SHE Council Meeting\" key=\"1\">\n            <Card bordered={false}>\n              <div className=\"row col-lg-12 col-xl-12 px-0\">\n                <Form\n                  layout=\"vertical\"\n                  autoComplete=\"off\"\n                  className=\"w-100\"\n                  size=\"large\"\n                  onFinish={this.scheduleMeeting}\n                  >\n                  <div className=\"x-controls-section\">\n                    <div className=\"controls\" style={{ width: 300 }}>\n                    <Form.Item\n                    label=\"Location Type\"\n                    name=\"location_id\"\n                    rules={[{ required: true, message: 'Please input Location Type!' }]}\n                    >\n                    <Select placeholder=\"Select Location Type\" onChange={this.handleLocationTypeChange}>\n                      {this.state.data.map(\n                      locationtype =>(\n                      <option key={locationtype.value} value={locationtype.value}>{locationtype.text}</option>\n                      )\n                      )}\n                    </Select>\n                    </Form.Item>\n                  </div>\n                  <div className=\"controls\" style={{ width: 300 }}>\n                  <Form.Item\n                  label=\"Unit\"\n                  name=\"unit_id\"\n                  rules={[{ required: true, message: 'Please input Unit!' }]}\n                  >\n                  <Select placeholder=\"Select Unit\">\n                    <Option value=\"plant1\">Plant1</Option>\n                    <Option value=\"plant2\">Plant2</Option>\n                    <Option value=\"plant3\">plant3</Option>\n                  </Select>\n                  </Form.Item>\n              </div>\n              <div className=\"controls\"  style={{ width: 350 }}>\n              <Form.Item\n              label=\"Date\"\n              name=\"council_date\"\n              rules={[{ required: true, message: 'Please input Date!' }]}\n              >\n              <DatePicker showTime onChange={this.handleDate} format={datetimeFormat} />\n              </Form.Item>\n      </div>\n    </div>\n    <div className=\"x-controls-section\">\n    <div className=\"controls\">\n    <Form.Item\n    label=\"Participants\"\n    name=\"council_members\"\n    rules={[{ required: true, message: 'Please input Member!' }]}\n    >\n    <Select  placeholder=\"Select Member\" mode=\"multiple\">\n    <Option value=\"1\">Member 1</Option>\n    <Option value=\"2\">Member 2</Option>\n    <Option value=\"3\">Member 3</Option>\n    <Option value=\"4\">Member 4</Option>\n    <Option value=\"5\">Member 5</Option>\n    <Option value=\"6\">Member 6</Option>\n    <Option value=\"7\">Member 7</Option>\n    <Option value=\"8\">Member 8</Option>\n    <Option value=\"9\">Member 9</Option>\n    </Select>\n    </Form.Item>\n    </div>\n    </div>\n    <div className=\"x-controls-section\">\n    <div className=\"controls\">\n    <Form.Item\n    label=\"Agenda of Meeting\"\n    name=\"council_agenda\"\n    rules={[{ required: true, message: 'Please input Date!' }]}\n    >\n    <Select placeholder=\"Select Agenda of Meeting\" mode=\"multiple\">\n    <Option value=\"a1\">External and internal issues</Option>\n    <Option value=\"a2\">SHE concerns of members</Option>\n    <Option value=\"a3\">SHE concerns of service providers</Option>\n    <Option value=\"a4\">Communication of changes</Option>\n    </Select>\n    </Form.Item>\n    </div>\n    </div>\n    <div className=\"x-controls-section\">\n    <div className=\"controls\"  style={{ width: 200 }}>\n    <Form.Item\n      label=\"Reminder Email\"\n      name=\"reminder_email\"\n      >\n    <Checkbox onChange={this.reminderemail}>Send Reminder Email</Checkbox>\n    </Form.Item>\n    </div>  \n    <div className={reminder_email_checked ? \"controls x-inline-formcontrols\" : \"d-none\"} style={{ width: 'auto' }}>\n    <Form.Item\n      label=\"Days Before\"\n      name=\"daysbefore\"\n      >\n    <Input/>\n    </Form.Item>\n  </div>\n  </div>\n  <div className=\"x-controls-section\">\n  <div className=\"controls\">\n  <Form.Item>\n  <Button type=\"primary\" htmlType=\"submit\" className=\"float-right\">\n  Submit\n  </Button>\n  </Form.Item>\n  </div>\n  </div>\n  </Form>\n  </div>\n  </Card>\n  </Panel>\n  </Collapse>,\n  </div>\n  </div>\n  <div className=\"row x-row\">\n    <div className=\"text-left x-form-card col-md-12 px-0\">\n      <Card title=\"List of SHE Meeting\" bordered={false} className=\"x-card-no-padding\">\n        <div className=\"row col-lg-12 col-xl-12 px-0\">\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th>Location Type</th>\n                  <th>Unit</th>\n                  <th>Date and Time</th>\n                  <th>Participants</th>\n                  <th className=\"text-center\" style={{width:50}}>Status</th>\n                  <th className=\"text-center\" style={{width:200}}>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Plant</td>\n                  <td>Plant1</td>\n                  <td>10-02-2021 10:10</td>\n                  <td>Member 1,Member 2,Member 3</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-yettostart\">\n                      <CalendarOutlined />\n                    </span>\n                  </td>\n                  <td className=\"text-center\" style={{float:\"right\"}}>\n                    <Button type=\"primary\" size=\"small\" className=\"mr-2 ant-btn-no-bg x-button-secondary-no-bg only-icon float-left\"  onClick={() =>\n                      this.startMeeting()}>\n                      <PlayCircleFilled />\n                    </Button>\n                    <Button type=\"primary\" size=\"small\" className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\" onClick={this.openEditMeeting}>\n                      <EditFilled />\n                    </Button>\n                    <Popconfirm\n    title=\"Are you sure to delete this Meeting?\"\n    placement=\"topRight\"\n    onConfirm={this.deleteMeeting}\n    onCancel={this.cancelDeleteMeeting}\n    okText=\"Yes\"\n    cancelText=\"No\"\n  >\n<Button type=\"primary\" size=\"small\" className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\" danger>\n                      <DeleteFilled />\n                    </Button>\n  </Popconfirm>\n                    \n                  </td>\n                </tr>\n                <tr>\n                  <td>3P</td>\n                  <td>3P1</td>\n                  <td>11-02-2021 11:30</td>\n                  <td>Member 4,Member 5,Member 6</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-assined\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                  <td className=\"text-center\" style={{float:\"right\" }}>\n                    <Button type=\"primary\" size=\"small\" className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\" onClick={this.openAddRecommendations}>\n                      <PlusCircleFilled />\n                      MOM\n                    </Button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>depot</td>\n                  <td>depot1</td>\n                  <td>12-02-2021 13:00</td>\n                  <td>Member 7,Member 8,Member 9</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-assined\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                  <td className=\"text-center\" style={{float:\"right\"}}>\n                    <Button type=\"primary\" size=\"small\" className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\" onClick={this.openEditRecommendations}>\n                      <EditFilled />\n                      MOM\n                    </Button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>depot</td>\n                  <td>depot1</td>\n                  <td>12-02-2021 13:00</td>\n                  <td>Member 7,Member 8,Member 9</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-due\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                  <td className=\"text-center\" style={{float:\"right\"}}>\n                    <Button type=\"primary\" size=\"small\" className=\"only-icon ant-btn-no-bg ant-btn-dangerous-no-bg\" danger>\n                      <LockFilled />\n                    </Button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Plant</td>\n                  <td>Plant1</td>\n                  <td>10-01-2021 12:40</td>\n                  <td>Member 1,Member 2,Member 3</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-completed\">\n                      <CheckCircleFilled />\n                    </span>\n                  </td>\n                  <td className=\"text-center\" style={{float:\"right\"}}>\n                    <Button type=\"primary\" size=\"small\" onClick={this.openViewRecommendations} className=\"ant-btn-no-bg x-button-success-no-bg icon-with-text\">\n                      <TagFilled />\n                      MOM\n                    </Button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </Card>\n    </div>\n  </div>\n  </div>\n  <Drawer\n    title=\"Edit SHE Meeting\"\n    placement=\"right\"\n    onClose={this.closeEditMeeting}\n    visible={open_edit_meeting}\n    >\n    <div className=\"row x-meeting-details\">\n      <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" onFinish={this.editMeeting} className=\"col-md-12\" layout=\"vertical\" size=\"large\"\n      initialValues={{\n      update_location_id: '3p',\n      update_unit_id:'plant1',\n      update_council_date:moment(this.state.update_council_date, datetimeFormat),\n      update_council_members:['1','5'],\n      update_council_agenda: ['a1','a2'],\n      }}\n      >\n      <div className=\"x-controls-section\">\n        <div className=\"controls\" style={{ width: 300 }}>\n        <Form.Item\n        label=\"Location Type\"\n        name=\"update_location_id\"\n        rules={[{ required: true, message: 'Please input Location Type!' }]}\n        >\n        <Select placeholder=\"Select Location Type\">\n          <Option value=\"plant\">Plant</Option>\n          <Option value=\"3p\">3P</Option>\n          <Option value=\"depot\">depot</Option>\n        </Select>\n        </Form.Item>\n      </div>\n      <div className=\"controls\" style={{ width: 300 }}>\n      <Form.Item\n      label=\"Unit\"\n      name=\"update_unit_id\"\n      rules={[{ required: true, message: 'Please input Unit!' }]}\n      >\n      <Select placeholder=\"Select Unit\">\n        <Option value=\"plant1\">Plant1</Option>\n        <Option value=\"plant2\">Plant2</Option>\n        <Option value=\"plant3\">plant3</Option>\n      </Select>\n      </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ width: 350 }}>\n    <Form.Item\n    label=\"Date\"\n    name=\"update_council_date\"\n    rules={[{ required: true, message: 'Please input Date!' }]}\n    >\n    <DatePicker showTime format={datetimeFormat}  onChange={this.handleupdateDate}/>\n    </Form.Item>\n    </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\">\n        <Form.Item\n        label=\"Participants\"\n        name=\"update_council_members\"\n        rules={[{ required: true, message: 'Please input Member!' }]}\n        >\n        <Select  placeholder=\"Select Member\" mode=\"multiple\">\n          <Option value=\"1\">Member 1</Option>\n          <Option value=\"2\">Member 2</Option>\n          <Option value=\"3\">Member 3</Option>\n          <Option value=\"4\">Member 4</Option>\n          <Option value=\"5\">Member 5</Option>\n          <Option value=\"6\">Member 6</Option>\n          <Option value=\"7\">Member 7</Option>\n          <Option value=\"8\">Member 8</Option>\n          <Option value=\"9\">Member 9</Option>\n        </Select>\n        </Form.Item>\n      </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\">\n        <Form.Item\n        label=\"Agenda of Meeting\"\n        name=\"update_council_agenda\"\n        rules={[{ required: true, message: 'Please input Date!' }]}\n        >\n        <Select placeholder=\"Select Agenda of Meeting\" mode=\"multiple\">\n          <Option value=\"a1\">External and internal issues</Option>\n          <Option value=\"a2\">SHE concerns of members</Option>\n          <Option value=\"a3\">SHE concerns of service providers</Option>\n          <Option value=\"a4\">Communication of changes</Option>\n        </Select>\n        </Form.Item>\n      </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\"  style={{ width: 200 }}>\n      <Form.Item\n        label=\"Reminder Email\"\n        name=\"update_reminder_email\"\n        >\n        <Checkbox checked={update_reminder_email_checked} onChange={this.updatereminderemail}>Send Reminder Email</Checkbox>\n      </Form.Item>\n    </div>\n    <div className={update_reminder_email_checked ? \"controls x-inline-formcontrols\" : \"d-none\"} style={{ width: 'auto' }}>\n    <Form.Item\n      label=\"Days Before\"\n      name=\"daysbefore\"\n      >\n      <Input/>\n    </Form.Item>\n    </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\">\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"float-right\">\n          Submit\n          </Button>\n        </Form.Item>\n      </div>\n    </div>\n    </Form>\n    </div>\n  </Drawer>\n  <Drawer\n    title=\"Add SHE Meeting Recommendations\"\n    placement=\"right\"\n    onClose={this.closeAddRecommendations}\n    visible={open_add_recommendations}\n    >\n    <div className=\"row x-meeting-details\">\n      <div className=\"col-md-9 px-0\">\n        <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" onFinish={this.submitRecommendations} className=\"col-md-12\" layout=\"vertical\" size=\"large\">\n          <div className=\"x-dynamic-container\">\n            <Form.List name=\"sheRecommendations\">\n              {(fields, { add, remove }) => (\n              <>\n              <Form.Item>\n                <Button type=\"dashed\" style={{width: 'auto', display: 'flex', alignItems: 'center'}} onClick={() =>\n                add()} block icon={\n                <PlusOutlined />\n                }>\n                Add Recommendations\n                </Button>\n              </Form.Item>\n              <div className=\"x-dynamic-form-container\">\n                <div className=\"x-controls-section x-dynamic-label\" style={{height:50}}>\n                  <div className=\"controls\"  style={{ 'minWidth': 50, width: 50 }}>\n                  <Form.Item label=\"S.No\">\n                  </Form.Item>\n                </div>\n                <div className=\"controls\"  style={{ 'minWidth': 700, width: 700 }}>\n                <Form.Item label=\"Recommendations\">\n                </Form.Item>\n              </div>\n              <div className=\"controls\"  style={{ 'minWidth': 300, width: 300 }}>\n              <Form.Item label=\"FPR\">\n              </Form.Item>\n          </div>\n          <div className=\"controls\"  style={{ 'minWidth': 120, width: 120 }}>\n          <Form.Item label=\"Target Date\">\n          </Form.Item>\n      </div>\n      <div className=\"controls\"  style={{ 'minWidth': 100, width: 100 }}>\n      <Form.Item label=\"Actions\">\n      </Form.Item>\n    </div>\n    </div>\n    {fields.map(field => (\n    <Space key={field.key} style={{ display: 'flex' }} align=\"baseline\" className=\"x-dynamic-form x-dynamic-form-visible-controls mb-3\">\n    <Form.Item\n    {...field}\n    name={[field.name, 'S.No']}\n    fieldKey={[field.fieldKey, 'S.No']}\n    style={{width:50}}\n    >\n    <Input  placeholder=\"S.No\" />\n    </Form.Item>  \n    <Form.Item\n    {...field}\n    name={[field.name, 'recommendation']}\n    fieldKey={[field.fieldKey, 'recommendation']}\n    rules={[{ required: true, message: 'Missing Recommendation' }]}\n    style={{'width':700}}\n    >\n    <TextArea rows={1}  placeholder=\"Recommendation\"></TextArea>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'FPR']}\n    fieldKey={[field.fieldKey, 'FPR']}\n    rules={[{ required: true, message: 'Please input Member!' }]}\n    style={{'width':300}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"1\">FPR 1</Option>\n    <Option value=\"2\">FPR 2</Option>\n    <Option value=\"3\">FPR 3</Option>\n    <Option value=\"4\">FPR 4</Option>\n    <Option value=\"5\">FPR 5</Option>\n    <Option value=\"6\">FPR 6</Option>\n    <Option value=\"7\">FPR 7</Option>\n    <Option value=\"8\">FPR 8</Option>\n    <Option value=\"9\">FPR 9</Option>\n    </Select>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'targetdate']}\n    fieldKey={[field.fieldKey, 'targetdate']}\n    rules={[{ required: true, message: 'Missing Target Date' }]}\n    style={{'width':130}}\n    >\n    <DatePicker format={dateFormat}  placeholder=\"Target Date\"/>\n    </Form.Item>\n    <div  style={{ width: 100 }}>\n    <Button type=\"primary\" danger size=\"small\" className=\"mr-2 only-icon\" onClick={() =>\n    remove(field.name)}><DeleteFilled /></Button>\n    </div>\n    \n    </Space>\n    ))}\n    </div>\n    </>\n    )}\n    </Form.List>\n    </div>\n    <Form.Item>\n    <Button type=\"primary\" htmlType=\"submit\" className=\"float-right mt-4\">\n    Save\n    </Button>\n    </Form.Item>\n    </Form>\n    </div>\n    <div className=\"col-md-3 px-0\">\n      <div className=\"x-meeting-data x-panel-1\">\n        <div className=\"x-panel-1-header with-btn\">\n          <div>\n          Meeting Details \n          </div>\n          <div>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"ant-btn-secondary float-right\" size=\"large\">\n              Submit\n              </Button>\n          </div>\n        \n        </div>\n        <div className=\"x-panel-1-body\">\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Location Type</div>\n            <div className=\"x-section-content\">Plant</div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Unit</div>\n            <div className=\"x-section-content\">Plant 1</div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Date</div>\n            <div className=\"x-section-content\">19-02-2021 12:15</div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Participants</div>\n            <div className=\"x-section-content\">\n              <ul className=\"x-list-items\">\n                <li>Lionel</li>\n                <li>Kalai</li>\n                <li>Jack</li>\n                <li>Krish</li>\n                <li>Janavi</li>\n                <li>Murali</li>\n                <li>Michel</li>\n                <li>Malar</li>\n                <li>John</li>\n                <li>Venba</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Agenda</div>\n            <div className=\"x-section-content\">\n              <ul className=\"x-list-items\">\n                <li>External and internal issues</li>\n                <li>SHE concerns of members</li>\n                <li>SHE concerns of service providers</li>\n                <li>Communication of changes</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Reminder Email</div>\n            <div className=\"x-section-content\">2 Days Before</div>\n          </div>\n          \n        </div>\n      </div>\n    </div>\n    </div>\n  </Drawer>\n  <Drawer\n    title=\"Edit SHE Meeting Recommendations\"\n    placement=\"right\"\n    onClose={this.closeEditRecommendations}\n    visible={open_edit_recommendations}\n    >\n    <div className=\"row x-meeting-details\">\n      <div className=\"col-md-9 px-0\">\n        <Tabs defaultActiveKey=\"1\">\n          <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n            <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" \n              \n              className=\"col-md-12\" \n              layout=\"vertical\" size=\"large\"  \n              initialValues={this.state.edit_recommendations}\n              onValuesChange={(changedValues, allValues) =>\n              {\n              this.getUpdatedRecommendationData(changedValues, allValues);\n              }}\n              >\n              <div className=\"x-dynamic-container\">\n                <Form.List name=\"sheRecommendations\">\n                  {(fields, { add, remove }) => (\n                  <>\n                  <div className=\"x-dynamic-form-container\" id=\"x-dynamic-form-container\">\n                    <div className=\"x-controls-section x-dynamic-label\" style={{height:50}}>\n                      <div className=\"controls\"  style={{ 'minWidth':50, width: 50 }}>\n                      <Form.Item label=\"S.No\">\n                      </Form.Item>\n                    </div>\n                    <div className=\"controls\"  style={{ 'minWidth':500, width: 500 }}>\n                    <Form.Item label=\"Recommendations\">\n                    </Form.Item>\n                  </div>\n                  <div className=\"controls\"  style={{ 'minWidth':300, width: 300 }}>\n                  <Form.Item label=\"FPR\">\n                  </Form.Item>\n              </div>\n              <div className=\"controls\"  style={{ 'minWidth':165, width: 165 }}>\n              <Form.Item label=\"Target Date\">\n              </Form.Item>\n      </div>\n      <div className=\"controls\"  style={{ 'minWidth':165, width: 165 }}>\n      <Form.Item label=\"Status\">\n      </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ 'minWidth':100, width: 100 }}>\n    <Form.Item label=\"Actions\">\n    </Form.Item>\n    </div>\n    </div>\n    {fields.map((field, index, record) => (\n    <Space key={field.key} value={field.value} style={{ display: 'flex' }} align=\"baseline\" className=\"x-dynamic-form\" id={`x-recommendation-list${index}`}>\n    <Form.Item\n    {...field}\n    name={[field.name, 'S.No']}\n    fieldKey={[field.fieldKey, 'S.No']}\n    style={{width:50}}\n    >\n    <Input  placeholder=\"S.No\" />\n    </Form.Item>  \n    <Form.Item\n    {...field}\n    name={[field.name, 'recommendation']}\n    fieldKey={[field.fieldKey, 'recommendation']}\n    rules={[{ required: true, message: 'Missing Recommendation' }]}\n    style={{'minWidth':500}}\n    >\n    <TextArea rows={1}  placeholder=\"Recommendation\"></TextArea>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'FPR']}\n    fieldKey={[field.fieldKey, 'FPR']}\n    rules={[{ required: true, message: 'Please input Member!' }]}\n    style={{'minWidth':300}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"1\">FPR 1</Option>\n    <Option value=\"2\">FPR 2</Option>\n    <Option value=\"3\">FPR 3</Option>\n    <Option value=\"4\">FPR 4</Option>\n    <Option value=\"5\">FPR 5</Option>\n    <Option value=\"6\">FPR 6</Option>\n    <Option value=\"7\">FPR 7</Option>\n    <Option value=\"8\">FPR 8</Option>\n    <Option value=\"9\">FPR 9</Option>\n    </Select>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'targetdate']}\n    fieldKey={[field.fieldKey, 'targetdate']}\n    rules={[{ required: true, message: 'Missing Target Date' }]}\n    style={{'minWidth':175}}\n    >\n    <DatePicker format={dateFormat} onChange={this.updateTargetDate}  placeholder=\"Target Date\"/>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'status']}\n    fieldKey={[field.fieldKey, 'status']}\n    rules={[{ required: true, message: 'Please input Status!' }]}\n    style={{'minWidth':165}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"completed\">Completed</Option>\n    <Option value=\"pending\">Pending</Option>\n    </Select>\n    </Form.Item>\n    <div className=\"x-action-btns\" style={{ width: 100 }}>\n    <Button type=\"primary\" size=\"small\" className=\"mr-2 x-initiate-edit-btn only-icon\"  onClick={() => this.initiateUpdateRecommendation(field.key)}><EditFilled /></Button>\n    <Button type=\"primary\" size=\"small\" className=\"mr-2 x-edit-btn icon-with-text\"  onClick={(form) =>\n    {\n    this.updateRecommendation(index, field);\n    }}>Save</Button>\n    \n    <Button type=\"primary\" danger size=\"small\" className=\"mr-2 only-icon\"  onClick={() =>\n    remove(field.name)}><DeleteFilled /></Button>\n    </div>\n    </Space>\n    ))}\n    </div>\n    </>\n    )}\n    </Form.List>\n    </div>\n    </Form>\n    <div className=\"mt-4\">\n    <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" onFinish={this.submitSingleAddRecommendations} className=\"col-md-12\" layout=\"vertical\" size=\"large\">\n          <div className=\"x-dynamic-container\">\n            <Form.List name=\"sheRecommendations\">\n              {(fields, { add, remove }) => (\n              <>\n              <Form.Item>\n                <Button type=\"dashed\" disabled = {!active_single_add_recommendation} style={{width: 'auto', display: 'flex', alignItems: 'center'}} onClick={() =>\n                {add(); this.activeSingleAddRecommendation();}} block icon={\n                <PlusOutlined />\n                }>\n                Add Recommendations\n                </Button>\n              </Form.Item>\n              <div className=\"x-dynamic-form-container\" style={{'minHeight':'200px'}}>\n                <div className=\"x-controls-section x-dynamic-label\" style={{height:50}}>\n                  <div className=\"controls\"  style={{ 'minWidth': 50, width: 50 }}>\n                  <Form.Item label=\"S.No\">\n                  </Form.Item>\n                </div>\n                <div className=\"controls\"  style={{ 'minWidth': 700, width: 700 }}>\n                <Form.Item label=\"Recommendations\">\n                </Form.Item>\n              </div>\n              <div className=\"controls\"  style={{ 'minWidth': 300, width: 300 }}>\n              <Form.Item label=\"FPR\">\n              </Form.Item>\n          </div>\n          <div className=\"controls\"  style={{ 'minWidth': 165, width: 165 }}>\n          <Form.Item label=\"Target Date\">\n          </Form.Item>\n      </div>\n      <div className=\"controls\"  style={{ 'minWidth': 100, width: 100 }}>\n      <Form.Item label=\"Actions\">\n      </Form.Item>\n    </div>\n    </div>\n    {fields.map(field => (\n    <Space key={field.key} style={{ display: 'flex' }} align=\"baseline\" className=\"x-dynamic-form x-dynamic-form-visible-controls\">\n    <Form.Item\n    {...field}\n    name={[field.name, 'S.No']}\n    fieldKey={[field.fieldKey, 'S.No']}\n    style={{width:50}}\n    >\n    <Input  placeholder=\"S.No\" />\n    </Form.Item>  \n    <Form.Item\n    {...field}\n    name={[field.name, 'recommendation']}\n    fieldKey={[field.fieldKey, 'recommendation']}\n    rules={[{ required: true, message: 'Missing Recommendation' }]}\n    style={{'minWidth':700}}\n    >\n    <TextArea rows={1}  placeholder=\"Recommendation\"></TextArea>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'FPR']}\n    fieldKey={[field.fieldKey, 'FPR']}\n    rules={[{ required: true, message: 'Please input Member!' }]}\n    style={{'minWidth':300}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"1\">FPR 1</Option>\n    <Option value=\"2\">FPR 2</Option>\n    <Option value=\"3\">FPR 3</Option>\n    <Option value=\"4\">FPR 4</Option>\n    <Option value=\"5\">FPR 5</Option>\n    <Option value=\"6\">FPR 6</Option>\n    <Option value=\"7\">FPR 7</Option>\n    <Option value=\"8\">FPR 8</Option>\n    <Option value=\"9\">FPR 9</Option>\n    </Select>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'targetdate']}\n    fieldKey={[field.fieldKey, 'targetdate']}\n    rules={[{ required: true, message: 'Missing Target Date' }]}\n    style={{'minWidth':165, 'marginRight': '15px'}}\n    >\n    <DatePicker format={dateFormat}  placeholder=\"Target Date\"/>\n    </Form.Item>\n    <Button type=\"primary\" size=\"small\" className=\"mr-2 only-icon icon-with-text\"  htmlType=\"submit\" style={{ 'marginTop': '.4rem' }}>Save</Button>\n    <Button type=\"primary\" danger size=\"small\" className=\"mr-2 only-icon\"  onClick={() =>\n    {remove(field.name); this.activeSingleAddRecommendation()}}><DeleteFilled /></Button>\n    </Space>\n    ))}\n    </div>\n    </>\n    )}\n    </Form.List>\n    </div>\n    \n    </Form>\n    </div>\n    </TabPane>\n    <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n    <div className=\"table-responsive\">\n    <table className=\"table table-hover\">\n    <thead>\n    <tr>\n    <th>S.No</th>\n    <th>Recommendations</th>\n    <th>FPR</th>\n    <th>Target Date</th>\n    <th style={{width:50}} className=\"text-center\">Status</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n    <td>1</td>\n    <td>Recommendations1</td>\n    <td>FPR4</td>\n    <td>02-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-completed\">\n    <CheckCircleFilled />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>2</td>\n    <td>Recommendations2</td>\n    <td>FPR4</td>\n    <td>10-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-assined\">\n    <Loading3QuartersOutlined />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>3</td>\n    <td>Recommendations3</td>\n    <td>FPR4</td>\n    <td>12-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-assined\">\n    <Loading3QuartersOutlined />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>4</td>\n    <td>Recommendations4</td>\n    <td>FPR4</td>\n    <td>22-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-completed\">\n    <CheckCircleFilled />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>5</td>\n    <td>Recommendations5</td>\n    <td>FPR4</td>\n    <td>16-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-completed\">\n    <CheckCircleFilled />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>6</td>\n    <td>Recommendations6</td>\n    <td>FPR7</td>\n    <td>16-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-due\">\n    <Loading3QuartersOutlined />\n    </span>\n    </td>\n    </tr>\n    </tbody>\n    </table>\n    </div>\n    </TabPane>\n    </Tabs>\n    </div>\n    <div className=\"col-md-3 px-0\">\n      <div className=\"x-meeting-data x-panel-1\">\n        <div className=\"x-panel-1-header\">Meeting Details</div>\n        <div className=\"x-panel-1-body\">\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Location Type</div>\n            <div className=\"x-section-content\">Plant</div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Unit</div>\n            <div className=\"x-section-content\">Plant 1</div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Date</div>\n            <div className=\"x-section-content\">19-02-2021 12:15</div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Participants</div>\n            <div className=\"x-section-content\">\n              <ul className=\"x-list-items\">\n                <li>Lionel</li>\n                <li>Kalai</li>\n                <li>Jack</li>\n                <li>Krish</li>\n                <li>Janavi</li>\n                <li>Murali</li>\n                <li>Michel</li>\n                <li>Malar</li>\n                <li>John</li>\n                <li>Venba</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Agenda</div>\n            <div className=\"x-section-content\">\n              <ul className=\"x-list-items\">\n                <li>External and internal issues</li>\n                <li>SHE concerns of members</li>\n                <li>SHE concerns of service providers</li>\n                <li>Communication of changes</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"x-section\">\n            <div className=\"x-section-title\">Reminder Email</div>\n            <div className=\"x-section-content\">2 Days Before</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n    <div className=\"row x-meeting-details\">\n    </div>\n  </Drawer>\n  <Drawer\n    title=\"View SHE Meeting Recommendations\"\n    placement=\"right\"\n    onClose={this.closeViewRecommendations}\n    visible={open_view_recommendations}\n    >\n    <div className=\"row x-meeting-details\">\n      <div className=\"col-md-10 px-0\">\n        <Tabs defaultActiveKey=\"1\">\n          <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n            <div className=\"table-responsive\">\n              <table className=\"table table-hover\">\n                <thead>\n                  <tr>\n                    <th>S.No</th>\n                    <th>Recommendations</th>\n                    <th>FPR</th>\n                    <th>Target Date</th>\n                    <th style={{width:50}} className=\"text-center\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>1</td>\n                    <td>Recommendations1</td>\n                    <td>FPR4</td>\n                    <td>02-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-completed\">\n                        <CheckCircleFilled />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>2</td>\n                    <td>Recommendations2</td>\n                    <td>FPR4</td>\n                    <td>10-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-assined\">\n                        <Loading3QuartersOutlined />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>3</td>\n                    <td>Recommendations3</td>\n                    <td>FPR4</td>\n                    <td>12-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-assined\">\n                        <Loading3QuartersOutlined />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>4</td>\n                    <td>Recommendations4</td>\n                    <td>FPR4</td>\n                    <td>22-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-completed\">\n                        <CheckCircleFilled />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>5</td>\n                    <td>Recommendations5</td>\n                    <td>FPR4</td>\n                    <td>16-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-completed\">\n                        <CheckCircleFilled />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>6</td>\n                    <td>Recommendations6</td>\n                    <td>FPR7</td>\n                    <td>16-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-due\">\n                        <Loading3QuartersOutlined />\n                      </span>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </TabPane>\n          <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n            <div className=\"table-responsive\">\n              <table className=\"table table-hover\">\n                <thead>\n                  <tr>\n                    <th>S.No</th>\n                    <th>Recommendations</th>\n                    <th>FPR</th>\n                    <th>Target Date</th>\n                    <th style={{width:50}} className=\"text-center\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>1</td>\n                    <td>Recommendations111</td>\n                    <td>FPR3</td>\n                    <td>08-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-assined\">\n                        <Loading3QuartersOutlined />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>2</td>\n                    <td>Recommendations222</td>\n                    <td>FPR2</td>\n                    <td>01-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-completed\">\n                        <CheckCircleFilled />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>3</td>\n                    <td>Recommendations333</td>\n                    <td>FPR1</td>\n                    <td>02-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-completed\">\n                        <CheckCircleFilled />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>4</td>\n                    <td>Recommendations444</td>\n                    <td>FPR6</td>\n                    <td>12-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-assined\">\n                        <Loading3QuartersOutlined />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>5</td>\n                    <td>Recommendations555</td>\n                    <td>FPR8</td>\n                    <td>26-02-2021</td>\n                    <td className=\"text-center x-status-icon\">\n                      <span className=\"x-status-icon-completed\">\n                        <CheckCircleFilled />\n                      </span>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </TabPane>\n        </Tabs>\n      </div>\n      <div className=\"col-md-2 px-0\">\n        <div className=\"x-meeting-data x-panel-1\">\n          <div className=\"x-panel-1-header\">Meeting Details</div>\n          <div className=\"x-panel-1-body\">\n            <div className=\"x-section\">\n              <div className=\"x-section-title\">Location Type</div>\n              <div className=\"x-section-content\">Plant</div>\n            </div>\n            <div className=\"x-section\">\n              <div className=\"x-section-title\">Unit</div>\n              <div className=\"x-section-content\">Plant 1</div>\n            </div>\n            <div className=\"x-section\">\n              <div className=\"x-section-title\">Date</div>\n              <div className=\"x-section-content\">19-02-2021 12:15</div>\n            </div>\n            <div className=\"x-section\">\n              <div className=\"x-section-title\">Participants</div>\n              <div className=\"x-section-content\">\n                <ul className=\"x-list-items\">\n                  <li>Lionel</li>\n                  <li>Kalai</li>\n                  <li>Jack</li>\n                  <li>Krish</li>\n                  <li>Janavi</li>\n                  <li>Murali</li>\n                  <li>Michel</li>\n                  <li>Malar</li>\n                  <li>John</li>\n                  <li>Venba</li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"x-section\">\n              <div className=\"x-section-title\">Agenda</div>\n              <div className=\"x-section-content\">\n                <ul className=\"x-list-items\">\n                  <li>External and internal issues</li>\n                  <li>SHE concerns of members</li>\n                  <li>SHE concerns of service providers</li>\n                  <li>Communication of changes</li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"x-section\">\n              <div className=\"x-section-title\">Reminder Email</div>\n              <div className=\"x-section-content\">2 Days Before</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Drawer>\n</React.Fragment>\n)\n}\n}\nfunction mapState(state) {\n}\nconst actionCreators = {\n//ScheduleCouncilMeeting: actions.ScheduleCouncilMeeting,\nGetMrmMeeting: actions.GetMrmMeeting\n};\nconst connectedScheduleCouncilMeeting = connect(mapState, actionCreators)(ScheduleCouncilMeeting);\nexport { connectedScheduleCouncilMeeting as ScheduleCouncilMeeting };","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/NeedsAndExpectations/NeedsAndExpectations.js",["341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  Button,\n  Breadcrumb,\n  Card,\n  Collapse,\n  Input,\n  Drawer,\n  Spin,\n  Table,\n  Popconfirm,\n  DatePicker,\n  Pagination,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  DeleteFilled,\n  EditFilled,\n  LoadingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport moment from \"moment\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nconst dateTimeFormat = \"DD-MM-YYYY\";\nconst dateTimeFormats = \"DD-MM-YYYY\";\nconst { Option } = Select;\nconst { Panel } = Collapse;\nclass NeedsAndExpectations extends React.Component {\n  formRef = React.createRef();\n  formRef1 = React.createRef();\n  formRef2 = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      openeditattachment: false,\n      file: [],\n      baseValue: \"\",\n      uploading: false,\n      needsExpectation: [],\n      editNeedsExpectation: [],\n      currentNeedsExpectation: [],\n      needsExpectationsId: \"\",\n      unitId: \"\",\n      unitType: \"\",\n      unitsData: [],\n      unitTypeData: [],\n      fileDownloadUrl: null,\n      args: \"\",\n      rec: \"\",\n      val: {},\n      currentOffset: 0,\n      totalCount: \"\",\n      FilterAction: false,\n      date1: \"\",\n      membersData: [],\n      currentMembers: \"\",\n      currentUnits: \"\",\n      fCurrentUnits: \"\",\n      currentUnitType: \"\",\n      fCurrentUnitType: \"\",\n      currentUnitandTypeInitialValue: \"\",\n      changeLocationType: false,\n    };\n  }\n\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    {\n      currentUserRollId == 3\n        ? this.setState({\n            userRoleSubAdmin: true,\n          })\n        : this.setState({\n            userRoleSubAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        fCurrentUnits: user.unit_id,\n        fCurrentUnitType: user.unit_type,\n        currentUnitandTypeInitialValue: {\n          currentUnitType: user.unit_type,\n          currentUnits: user.unit_id,\n        },\n      },\n      this.ActionRoleBased\n    );\n\n    this.setState({ unitId: user.unit_id });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let needs_status = this.props.needsexpectations.getstatus;\n      let needsexpectation_status = this.props.needsexpectation.getstatus;\n      let membersStatus = this.props.members.selectstatus;\n      let unitsStatus = this.props.units.status;\n      let unittypeStatus = this.props.unittype.status;\n      {\n        needs_status == \"success\"\n          ? this.setState({\n              needsExpectation: this.props.needsexpectations.items.data,\n              totalCount: this.props.needsexpectations.items.total_count,\n            })\n          : this.setState({\n              needsExpectation: [],\n              totalCount: 0,\n            });\n      }\n\n      {\n        needsexpectation_status == \"success\"\n          ? this.setState({\n              currentNeedsExpectation: this.props.needsexpectation.items.data,\n            })\n          : this.setState({\n              currentNeedsExpectation: [],\n            });\n      }\n      {\n        membersStatus == \"success\"\n          ? this.setState({\n              membersData: this.props.members.items.data,\n            })\n          : this.setState({\n              membersData: [],\n            });\n      }\n      {\n        unittypeStatus == \"success\"\n          ? this.setState({\n              unitTypeData: this.props.unittype.items.data,\n            })\n          : this.setState({\n              unitTypeData: [],\n            });\n      }\n      {\n        unitsStatus == \"success\"\n          ? this.setState({\n              unitsData: this.props.units.items.data,\n            })\n          : this.setState({\n              unitsData: [],\n            });\n      }\n    }\n  }\n\n  ActionRoleBased = () => {\n    const { currentUnits, currentOffset, currentUnitType } = this.state;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetNeedsExpectations(args);\n    let argss = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(argss);\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n  };\n\n  pageOnChange = (pagenumber) => {\n    const { currentUnits, FilterAction, val, fCurrentUnits } = this.state;\n    let x = pagenumber - 1;\n    let offset = x * 20;\n    let args;\n    if (FilterAction) {\n      args = val + `&offset=${offset}&unit_id=${fCurrentUnits}`;\n    } else {\n      args = `offset=${offset}&unit_id=${currentUnits}`;\n    }\n    this.props.GetNeedsExpectations(args);\n  };\n\n  handleUpload = (e) => {\n    var fileInput = document.getElementById(\"file\");\n    var filePath = fileInput.value;\n    var fileType = /(\\.jpg|\\.jpeg|\\.png|\\.doc|\\.xls|\\.docx|\\.pdf|\\.xlsx)$/i;\n    if (!fileType.exec(filePath)) {\n      alert(\"Invalid file type\");\n      fileInput.value = \"\";\n      window.location.reload();\n      return false;\n    } else {\n      const file = e.target.files;\n      if (file && file[0]) {\n        this.setState({ file: file[0] });\n        this.getBase64(file[0]);\n      }\n    }\n  };\n  getBase64 = (file) => {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      let val = e.target.result;\n      this.setState({ baseValue: val });\n    };\n    reader.onerror = function (error) {\n      console.log(\"Error\", error);\n    };\n  };\n\n  handleUploads = (e) => {\n    var fileInput = document.getElementById(\"file\");\n    var filePath = fileInput.value;\n    var fileType = /(\\.jpg|\\.jpeg|\\.png|\\.doc|\\.xls|\\.docx|\\.pdf|\\.xlsx)$/i;\n    if (!fileType.exec(filePath)) {\n      alert(\"Invalid file type\");\n      fileInput.value = \"\";\n      window.location.reload();\n      return false;\n    } else {\n      const file = e.target.files;\n      if (file && file[0]) {\n        this.setState({ file: file[0] });\n        this.getBase64(file[0]);\n      }\n    }\n  };\n  getBase64 = (file) => {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      let val = e.target.result;\n      this.setState({ baseValue: val });\n    };\n    reader.onerror = function (error) {\n      console.log(\"Error\", error);\n    };\n  };\n\n  createNeedsExpectations = (value) => {\n    const { baseValue, currentOffset, currentUnits, currentUnitType } =\n      this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n\n    this.props.AddNeedsExpectations(\n      value.needs_expectations_title,\n      baseValue,\n      currentUnits,\n      currentUnitType,\n      args\n    );\n\n    this.formRef.current.resetFields();\n    this.formRef1.current.resetFields();\n    this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    this.formRef.current.setFieldsValue({ currentUnits: undefined });\n    this.setState({\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      FilterAction: false,\n    });\n  };\n\n  DeleteNeedsExpectations = (record) => {\n    const { currentOffset, currentUnits } = this.state;\n    const id = record.needs_expectations_id;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.formRef1.current.resetFields();\n    this.setState({\n      FilterAction: false,\n    });\n    this.props.DeleteNeedsExpectations(id, args);\n  };\n\n  DeleteNeedsExpectationsAttachments = (data) => {\n    const { rec, currentOffset, currentUnits } = this.state;\n    const id = data;\n    let argss = `offset=${currentOffset}&needs_expectations_id=${rec}&unit_id=${currentUnits}`;\n    this.props.DeleteNeedsExpectationsAttachment(id, argss);\n    this.setState({ args: data.needs_expectations_attachments_id });\n  };\n\n  CancelDeleteMeeting = () => {\n    console.log(\"Meeting Canceled\");\n  };\n\n  openEditAttachment = (record) => {\n    const { currentOffset, currentUnits } = this.state;\n    this.setState({ rec: record.needs_expectations_id });\n    this.setState({ openeditattachment: true });\n    let args = `offset=${currentOffset}&needs_expectations_id=${record.needs_expectations_id}&unit_id=${currentUnits}`;\n    this.props.GetNeedsExpectation(args);\n    this.setState({ EditNeedsExpectation: record });\n    this.setState({ needsExpectationsId: record.needs_expectations_id });\n  };\n\n  download = (file) => {\n    const link = document.createElement(\"a\");\n    link.href = file;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  closeEditAttachment = () => {\n    const { currentOffset, currentUnits } = this.state;\n    this.setState({ openeditattachment: false });\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetNeedsExpectations(args);\n    window.location.reload();\n  };\n\n  UpdatedNeedsExpectations = (value) => {\n    const { needsExpectationsId, baseValue, rec, currentOffset, currentUnits } =\n      this.state;\n    let argss = `offset=${currentOffset}&needs_expectations_id=${rec}&unit_id=${currentUnits}`;\n    this.props.EditNeedsExpectations(\n      needsExpectationsId,\n      value.needs_expectations_title,\n      baseValue,\n      argss\n    );\n  };\n\n  resetForm = () => {\n    this.formRef.current.resetFields();\n  };\n  resetForm1 = () => {\n    const { currentOffset } = this.state;\n    this.formRef1.current.resetFields();\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.GetNeedsExpectations(args);\n    this.setState({\n      FilterAction: false,\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      date1: \"\",\n      date2: \"\",\n      currentMembers: \"\",\n      fCurrentUnits: user.unit_id,\n      fCurrentUnitType: user.unit_type,\n      changeLocationType: false,\n    });\n  };\n  resetForm2 = () => {\n    this.formRef2.current.resetFields();\n  };\n  getFilterParams = (taskFilters) => {\n    const { currentOffset } = this.state;\n    let filterParams = \"\";\n    for (let i in taskFilters) {\n      let item = taskFilters[i];\n      if (item && item.length > 0) {\n        if (filterParams != \"\") {\n          filterParams += \"&\";\n        }\n        filterParams += `${i}=${item.toString()}`;\n      }\n    }\n    return filterParams;\n  };\n\n  filterTable = (fieldsValue) => {\n    const { date1, date2, currentMembers, fCurrentUnits, fCurrentUnitType } =\n      this.state;\n    const value = {\n      ...fieldsValue,\n      from_date: date1,\n      to_date: date2,\n      created_by: currentMembers.toString(),\n      unit_type: fCurrentUnitType,\n      unit_id: fCurrentUnits,\n    };\n    let updatedValue = this.getFilterParams(value);\n    this.setState({ val: updatedValue, FilterAction: true });\n    this.filter();\n  };\n\n  handleMembers = (value) => {\n    this.setState({\n      currentMembers: value,\n    });\n  };\n\n  filter = () => {\n    const { val, currentOffset, fCurrentUnits } = this.state;\n    let updatedValue =\n      val + `&offset=${currentOffset}&unit_id=${fCurrentUnits}`;\n    this.props.GetNeedsExpectations(updatedValue);\n  };\n\n  fromDateChanged = (date, dateString) => {\n    this.setState({ date1: dateString });\n  };\n  toDateChanged = (date, dateString) => {\n    this.setState({ date2: dateString });\n  };\n\n  HandleLocationTypeChange = (value) => {\n    this.setState({ currentUnitType: value, currentUnits: \"\" });\n    this.props.SelectUnits(value);\n    this.formRef.current.setFieldsValue({ currentUnits: undefined });\n  };\n\n  HandleUnitsChange = (value) => {\n    this.setState({\n      currentUnits: value,\n    });\n  };\n\n  HandleLocationTypeChanges = (value) => {\n    this.setState({\n      fCurrentUnitType: value,\n      unit_id: \"\",\n      currentUnitandTypeInitialValue: null,\n      changeLocationType: true,\n    });\n    this.props.SelectUnits(value);\n    this.formRef1.current.setFieldsValue({ unit_id: undefined });\n\n    if (this.formRef.current != null) {\n      this.formRef.current.setFieldsValue({ currentUnits: undefined });\n      this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    }\n  };\n\n  HandleUnitsChanges = (value) => {\n    this.setState({\n      fCurrentUnits: value,\n    });\n  };\n\n  render() {\n    const {\n      userRoleSuperAdmin,\n      userRoleSubAdmin,\n      openeditattachment,\n      needsExpectation,\n      EditNeedsExpectation,\n      currentNeedsExpectation,\n      membersData,\n      unitTypeData,\n      unitsData,\n      currentUnitType,\n      currentUnits,\n      currentUnitandTypeInitialValue,\n      changeLocationType,\n    } = this.state;\n    const { needsexpectations, needsexpectation, units } = this.props;\n    const columns = [\n      {\n        title: \"Title\",\n        dataIndex: \"needs_expectations_title\",\n        key: \"needs_expectations_title\",\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"created_on\",\n        key: \"created_on\",\n        render: (created_on) => {\n          return <p>{moment(created_on).format(dateTimeFormat)}</p>;\n        },\n      },\n      {\n        title: \"Attachments\",\n        dataIndex: \"needs_expectations_attachments\",\n        key: \"needs_expectations_attachments\",\n        render: (needs_expectations_attachments, i) => (\n          <span>\n            {needs_expectations_attachments.map((attachment) => {\n              return (\n                <p key={i}>\n                  {attachment.needs_expectations_attachments_filename}\n                </p>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        render: (text, record) => (\n          <div>\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n              onClick={() => {\n                this.openEditAttachment(record);\n              }}\n            >\n              <EditFilled />\n            </Button>\n            <Popconfirm\n              title=\"Are you sure to delete this Meeting?\"\n              placement=\"topRight\"\n              onConfirm={() => {\n                this.DeleteNeedsExpectations(record);\n              }}\n              onCancel={this.CancelDeleteMeeting}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                danger\n              >\n                <DeleteFilled />\n              </Button>\n            </Popconfirm>\n          </div>\n        ),\n      },\n    ];\n\n    const column = [\n      {\n        title: \"Attachments\",\n        dataIndex: \"needs_expectations_attachments\",\n        key: \"needs_expectations_attachments\",\n        width: \"150px\",\n        render: (needs_expectations_attachments) => (\n          <span>\n            {needs_expectations_attachments.map((attachment) => {\n              return (\n                <p>{attachment.needs_expectations_attachments_filename}</p>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"needs_expectations_attachments\",\n        key: \"needs_expectations_attachments\",\n        width: \"150px\",\n        render: (needs_expectations_attachments) => (\n          <span>\n            {needs_expectations_attachments.map((attachment) => {\n              return (\n                <p>{moment(attachment.created_on).format(dateTimeFormat)}</p>\n              );\n            })}\n          </span>\n        ),\n      },\n\n      {\n        title: \"Actions\",\n        dataIndex: \"needs_expectations_attachments\",\n        key: \"needs_expectations_attachments\",\n        width: \"100px\",\n        render: (needs_expectations_attachments) => (\n          <div className=\"actions\">\n            {needs_expectations_attachments.map((attachment) => {\n              return (\n                <div className=\"needsactions\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\" ant-btn-no-bg x-button-secondary-no-bg mr-2 mb-2 p-1 only-icon float-left\"\n                    onClick={(e) =>\n                      this.download(\n                        attachment.needs_expectations_attachments_filepath\n                      )\n                    }\n                  >\n                    <FontAwesomeIcon icon=\"download\" />\n                  </Button>\n                  <Popconfirm\n                    title=\"Are you sure to delete this Attachments?\"\n                    placement=\"topRight\"\n                    onConfirm={() => {\n                      this.DeleteNeedsExpectationsAttachments(attachment);\n                    }}\n                    onCancel={this.CancelDeleteMeeting}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      type=\"primary\"\n                      size=\"small\"\n                      className=\"only-icon float-left ant-btn-no-bg mr-2 mb-2 p-1 ant-btn-dangerous-no-bg\"\n                      danger\n                    >\n                      <DeleteFilled />\n                    </Button>\n                  </Popconfirm>\n                </div>\n              );\n            })}\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-she-meeting\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Needs And Expectations</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/managementdashboard\">\n                <Breadcrumb.Item>\n                  <span>SHE Management</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Needs And Expectations</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n              <Collapse expandIconPosition=\"right\">\n                <Panel header=\"Upload Documents\" key=\"1\">\n                  <Card bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <Form\n                        layout=\"vertical\"\n                        autoComplete=\"off\"\n                        className=\"w-100\"\n                        size=\"large\"\n                        onFinish={this.createNeedsExpectations}\n                        ref={this.formRef}\n                        // initialValues={{\n                        //   currentUnitType: currentUnitType,\n                        //   currentUnits: currentUnits,\n                        // }}\n                        initialValues={currentUnitandTypeInitialValue}\n                      >\n                        {userRoleSuperAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Location Type\"\n                                  name=\"currentUnitType\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Location Type!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleLocationTypeChange}\n                                  >\n                                    {unitTypeData &&\n                                      unitTypeData.map((unittype, index) => (\n                                        <option value={unittype} key={index}>\n                                          {unittype}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnits\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSuperAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\">\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnits\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSubAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Title\"\n                              name=\"needs_expectations_title\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Title!\",\n                                },\n                              ]}\n                            >\n                              <Input placeholder=\"Title\" />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Select Files\"\n                              name=\"needs_expectations_attachment\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Attachments!\",\n                                },\n                              ]}\n                            >\n                              <input\n                                id=\"file\"\n                                type=\"file\"\n                                name=\"file\"\n                                accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                                onChange={(e) => this.handleUploads(e)}\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item>\n                              <div className=\"x-btn-flex\">\n                                <Button\n                                  type=\"link\"\n                                  htmlType=\"button\"\n                                  className=\"float-right\"\n                                  danger\n                                  onClick={this.resetForm}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                  disabled={needsexpectations.addloading}\n                                >\n                                  Save\n                                </Button>\n                                {needsexpectations.addloading ? (\n                                  <div className=\"x-ant-icon\">\n                                    <SyncOutlined spin />\n                                  </div>\n                                ) : (\n                                  \"\"\n                                )}\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                      </Form>\n                    </div>\n                  </Card>\n                </Panel>\n              </Collapse>\n            </div>\n          </div>\n          <div className=\"row x-row mt-4\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of Documents\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"x-table-filters\">\n                    <Form\n                      layout=\"vertical\"\n                      autoComplete=\"off\"\n                      ref={this.formRef1}\n                      className=\"w-100\"\n                      size=\"large\"\n                      onFinish={this.filterTable}\n                    >\n                      <div className=\"x-controls-section\">\n                        {userRoleSuperAdmin ? (\n                          <div className=\"x-controls-section x-mr-1\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_type\">\n                                <Select\n                                  placeholder=\"Location Type\"\n                                  onChange={this.HandleLocationTypeChanges}\n                                >\n                                  {unitTypeData &&\n                                    unitTypeData.map((unittype, index) => (\n                                      <option value={unittype} key={index}>\n                                        {unittype}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item\n                                name=\"unit_id\"\n                                rules={\n                                  changeLocationType\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Unit!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSuperAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n                        {userRoleSubAdmin ? (\n                          <div className=\"x-controls-section\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_id\">\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSubAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <Form.Item name=\"created_by\">\n                            <div className=\"x-controls\">\n                              <Select\n                                placeholder=\"Created by\"\n                                onChange={this.handleMembers}\n                              >\n                                {membersData &&\n                                  membersData.map((member) => (\n                                    <option\n                                      key={member.member_id}\n                                      value={member.member_id}\n                                    >\n                                      {member.member_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </div>\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"needs_expectations_title\">\n                              <div className=\"x-controls\">\n                                <Input placeholder=\"Title\" />\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"from_date\">\n                              <DatePicker\n                                onChange={this.fromDateChanged}\n                                placeholder=\"From Date\"\n                                format={dateTimeFormats}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"to_date\">\n                              <DatePicker\n                                onChange={this.toDateChanged}\n                                placeholder=\"To Date\"\n                                format={dateTimeFormats}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"control\">\n                          <div className=\"x-controls x-btn-flex\">\n                            <Button\n                              type=\"primary\"\n                              size=\"small\"\n                              htmlType=\"submit\"\n                              disabled={needsexpectations.getloading}\n                            >\n                              Filter\n                            </Button>\n                            {needsexpectations.getloading ? (\n                              <div className=\"x-ant-icon\">\n                                <SyncOutlined spin />\n                              </div>\n                            ) : (\n                              \"\"\n                            )}\n                            <Button\n                              type=\"link\"\n                              htmlType=\"reset\"\n                              danger\n                              onClick={this.resetForm1}\n                            >\n                              Reset\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Form>\n                  </div>\n                  <div className=\"table-responsive\">\n                    {needsexpectations.getloading ||\n                    needsexpectations.addloading ||\n                    needsexpectations.deleteloading ? (\n                      <div>\n                        <Spin indicator={antIcon} />\n                      </div>\n                    ) : (\n                      <div>\n                        <Table\n                          dataSource={needsExpectation}\n                          columns={columns}\n                          pagination={false}\n                        />\n                      </div>\n                    )}\n                    <Pagination\n                      total={this.state.totalCount}\n                      onChange={this.pageOnChange}\n                      defaultCurrent={1}\n                      defaultPageSize={20}\n                    />\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <Drawer\n          title=\"Edit Documents\"\n          placement=\"right\"\n          onClose={this.closeEditAttachment}\n          visible={openeditattachment}\n        >\n          {needsexpectation.getstatus == \"request\" ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <>\n              <Table dataSource={currentNeedsExpectation} columns={column} />\n              <Form\n                name=\"edit_attachments\"\n                autoComplete=\"off\"\n                ref={this.formRef2}\n                onFinish={this.UpdatedNeedsExpectations}\n                className=\"col-md-12\"\n                layout=\"vertical\"\n                initialValues={EditNeedsExpectation}\n              >\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Title\"\n                      name=\"needs_expectations_title\"\n                      rules={[\n                        { required: true, message: \"Please input Title!\" },\n                      ]}\n                    >\n                      <Input placeholder=\"Title\" />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Select Files\"\n                      rules={[\n                        { required: true, message: \"Please input File!\" },\n                      ]}\n                    >\n                      <input\n                        id=\"file\"\n                        type=\"file\"\n                        name=\"file\"\n                        accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                        onChange={(e) => this.handleUpload(e)}\n                      />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"controls\">\n                  <Form.Item>\n                    <div className=\"x-btn-flex\">\n                      <Button\n                        type=\"link\"\n                        className=\"float-right\"\n                        danger\n                        onClick={this.resetForm2}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        className=\"float-right\"\n                      >\n                        Update\n                      </Button>\n                    </div>\n                  </Form.Item>\n                </div>\n              </Form>\n            </>\n          )}\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { needsexpectations, needsexpectation, units, unittype, members } =\n    state;\n  return { needsexpectations, needsexpectation, units, unittype, members };\n}\nconst actionCreators = {\n  GetNeedsExpectations: actions.GetNeedsExpectations,\n  AddNeedsExpectations: actions.AddNeedsExpectations,\n  DeleteNeedsExpectations: actions.DeleteNeedsExpectations,\n  EditNeedsExpectations: actions.EditNeedsExpectations,\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n  GetNeedsExpectation: actions.GetNeedsExpectation,\n  DeleteNeedsExpectationsAttachment: actions.DeleteNeedsExpectationsAttachment,\n  SelectMembers: actions.SelectMembers,\n};\nconst connectedNeedsAndExpectations = connect(\n  mapState,\n  actionCreators\n)(NeedsAndExpectations);\nexport { connectedNeedsAndExpectations as NeedsAndExpectations };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/MYTask/MyTask.js",["363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382"],"/home/est-dell-1/kirthika/Marico-SHE/src/component/ComingSoon/ComingSoon.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ScheduleMrmMeeting/ScheduleMrmMeeting.js",["383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  DatePicker,\n  Button,\n  Breadcrumb,\n  Card,\n  Checkbox,\n  Input,\n  Drawer,\n  Space,\n  Collapse,\n  notification,\n  Tabs,\n  Popconfirm,\n  Table,\n  Spin,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  Loading3QuartersOutlined,\n  CalendarOutlined,\n  CheckCircleFilled,\n  PlusOutlined,\n  LockFilled,\n  TagFilled,\n  PlusCircleFilled,\n  EditFilled,\n  PlayCircleFilled,\n  DeleteFilled,\n  LoadingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport moment from \"moment\";\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst { TabPane } = Tabs;\nconst dateFormat = \"DD-MM-YYYY\";\nconst datetimeFormat = \"DD-MM-YYYY  HH:mm\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass ScheduleMrmMeeting extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user_role_superadmin: \"\",\n      reminder_email_checked: false,\n      open_add_recommendations: false,\n      open_edit_recommendations: false,\n      open_view_recommendations: false,\n      open_edit_meeting: false,\n      meeting_data: {\n        location_id: \"3p\",\n        unit_id: \"plant1\",\n        council_date: moment(\"19-02-2021 10:25\", datetimeFormat),\n        council_members: [\"1\", \"5\"],\n        council_agenda: [\"a1\", \"a2\"],\n      },\n      current_mrm_date: \"\",\n      update_target_date: \"\",\n      update_reminder_email_checked: true,\n      current_unit_type: \"\",\n      current_units: \"\",\n      unit_type_data: [],\n      units_data: [],\n      mrm_members_data: [],\n      current_mrm_members: \"\",\n      mrm_agenda_data: [],\n      current_mrm_agenda: \"\",\n      mrmmeeting_data: [],\n      meeting_1_status: \"scheduled\",\n      meeting_2_status: \"conducted_add_recommendation\",\n      meeting_3_status: \"conducted_edit_recommendation\",\n      meeting_4_status: \"conducted_edit_recommendation_overdue\",\n      meeting_5_status: \"submitted\",\n      edit_recommendation_data: [],\n      edit_recommendations: {\n        sheRecommendations: [\n          {\n            SNo: \"1\",\n            recommendation: \"Recommendation1\",\n            FPR: \"4\",\n            targetdate: moment(\"02-02-2021\", dateFormat),\n            status: \"pending\",\n          },\n          {\n            SNo: \"2\",\n            recommendation: \"Recommendation2\",\n            FPR: \"9\",\n            targetdate: moment(\"12-12-2021\", dateFormat),\n            status: \"completed\",\n          },\n          {\n            SNo: \"3\",\n            recommendation: \"Recommendation3\",\n            FPR: \"8\",\n            targetdate: moment(\"03-05-2022\", dateFormat),\n            status: \"pending\",\n          },\n          {\n            SNo: \"4\",\n            recommendation: \"Recommendation4\",\n            FPR: \"7\",\n            targetdate: moment(\"10-11-2021\", dateFormat),\n            status: \"completed\",\n          },\n          {\n            SNo: \"5\",\n            recommendation: \"Recommendation5\",\n            FPR: \"6\",\n            targetdate: moment(\"22-08-2021\", dateFormat),\n            status: \"completed\",\n          },\n          {\n            SNo: \"6\",\n            recommendation: \"Recommendation6\",\n            FPR: \"5\",\n            targetdate: moment(\"01-09-2021\", dateFormat),\n            status: \"pending\",\n          },\n        ],\n      },\n      active_single_add_recommendation: true,\n      current_mrm_id: \"\",\n      current_meeting_data: [],\n      current_mrm_fpr: \"\",\n      current_target_date: \"\",\n      mrmrecommendation_addfirststatus: false,\n      mrmmeeting_complete_status: false,\n      current_offset: 0,\n    };\n\n    this.reminderemail = this.reminderemail.bind(this);\n    this.openEditMeeting = this.openEditMeeting.bind(this);\n    this.closeEditMeeting = this.closeEditMeeting.bind(this);\n    this.openAddRecommendations = this.openAddRecommendations.bind(this);\n    this.closeAddRecommendations = this.closeAddRecommendations.bind(this);\n    this.openEditRecommendations = this.openEditRecommendations.bind(this);\n    this.closeEditRecommendations = this.closeEditRecommendations.bind(this);\n    this.openViewRecommendations = this.openViewRecommendations.bind(this);\n    this.closeViewRecommendations = this.closeViewRecommendations.bind(this);\n    this.scheduleMeeting = this.scheduleMeeting.bind(this);\n    this.editMeeting = this.editMeeting.bind(this);\n    this.startMeeting = this.startMeeting.bind(this);\n    this.deleteMeeting = this.deleteMeeting.bind(this);\n    this.completeMeeting = this.completeMeeting.bind(this);\n    this.cancelDeleteMeeting = this.cancelDeleteMeeting.bind(this);\n    this.submitRecommendations = this.submitRecommendations.bind(this);\n    this.activeSingleAddRecommendation = this.activeSingleAddRecommendation.bind(\n      this\n    );\n    this.submitSingleAddRecommendations = this.submitSingleAddRecommendations.bind(\n      this\n    );\n    this.handleLocationTypeChange = this.handleLocationTypeChange.bind(this);\n    this.handleUnitsChange = this.handleUnitsChange.bind(this);\n    this.handleDate = this.handleDate.bind(this);\n    this.handleTargetDate = this.handleTargetDate.bind(this);\n    this.updatereminderemail = this.updatereminderemail.bind(this);\n    this.getUpdatedRecommendationData = this.getUpdatedRecommendationData.bind(\n      this\n    );\n    this.initiateUpdateRecommendation = this.initiateUpdateRecommendation.bind(\n      this\n    );\n    this.updateRecommendation = this.updateRecommendation.bind(this);\n    this.updatedRecommendationData = null;\n    this.updateTargetDate = this.updateTargetDate.bind(this);\n    this.handleAgendaSelect = this.handleAgendaSelect.bind(this);\n    this.handleMembersSelect = this.handleMembersSelect.bind(this);\n    this.handleFPRSelect = this.handleFPRSelect.bind(this);\n  }\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    console.log(\"user\");\n    console.log(user);\n    let current_user_roll_id = user.role_id;\n    {\n      current_user_roll_id == 2\n        ? this.setState({\n            user_role_superadmin: true,\n          })\n        : this.setState({\n            user_role_superadmin: false,\n          });\n    }\n    this.setState({\n      current_units: user.unit_id,\n      current_unit_type: user.unit_type,\n    });\n\n    this.props.SelectUnitType();\n    this.props.SelectUnits(user.unit_type);\n    this.props.SelectAgendaFor();\n    this.props.selectAgenda(1);\n    let args = `unit_id=${user.unit_id}`\n    this.props.SelectMembers(args);\n    this.props.GetMrmMeeting(user.unit_id, this.state.current_offset);\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let members_status = this.props.members.selectstatus;\n      let unittype_status = this.props.unittype.status;\n      let units_status = this.props.units.status;\n      let agenda_status = this.props.agenda.status;\n      let mrm_get_meeting_status = this.props.mrmmeeting.getstatus;\n      let mrmrecommendation_addfirststatus = this.props.mrmrecommendation\n        .addfirststatus;\n      let mrmmeeting_complete_status = this.props.mrmmeeting.completestatus;\n      if (members_status == \"success\") {\n        this.setState({\n          mrm_members_data: this.props.members.items.data,\n        });\n      }\n      if (agenda_status == \"success\") {\n        this.setState({\n          mrm_agenda_data: this.props.agenda.items.data,\n        });\n      }\n      if (unittype_status == \"success\") {\n        this.setState({\n          unit_type_data: this.props.unittype.items.data,\n        });\n      }\n      if (units_status == \"success\") {\n        this.setState({\n          units_data: this.props.units.items.data,\n        });\n      }\n      if (mrm_get_meeting_status == \"success\") {\n        this.setState({\n          mrmmeeting_data: this.props.mrmmeeting.items.data,\n        });\n      }\n      if (mrmrecommendation_addfirststatus == \"success\") {\n        this.setState({\n          mrmrecommendation_addfirststatus: true,\n        });\n      }\n      if (mrmmeeting_complete_status == \"success\") {\n        this.setState({\n          mrmmeeting_complete_status: true,\n        });\n      }\n    }\n  }\n  reminderemail() {\n    this.setState({\n      reminder_email_checked: !this.state.reminder_email_checked,\n    });\n  }\n  updatereminderemail() {\n    this.setState({\n      update_reminder_email_checked: !this.state.update_reminder_email_checked,\n    });\n  }\n  openAddRecommendations(record) {\n    console.log(\"record\");\n    console.log(record);\n    this.setState({\n      open_add_recommendations: true,\n      current_meeting_data: record,\n      current_mrm_id: record.mrm_id,\n    });\n  }\n  closeAddRecommendations() {\n    const { current_units, current_offset } = this.state;\n    this.setState({ open_add_recommendations: false });\n    this.props.GetMrmMeeting(current_units, current_offset);\n  }\n  openEditRecommendations(record) {\n    console.log(record);\n    this.setState({\n      open_edit_recommendations: true,\n      current_meeting_data: record,\n      current_mrm_id: record.mrm_id,\n    });\n  }\n  closeEditRecommendations() {\n    const { current_units, current_offset } = this.state;\n    this.setState({ open_edit_recommendations: false });\n    this.props.GetMrmMeeting(current_units, current_offset);\n  }\n  openEditMeeting(record) {\n    console.log(\"record\");\n    console.log(record);\n    const { current_unit_type } = this.state;\n    {\n      record.mrm_reminder == true\n        ? this.setState({\n            update_reminder_email_checked: true,\n          })\n        : this.setState({\n            update_reminder_email_checked: false,\n          });\n    }\n    this.setState({\n      open_edit_meeting: true,\n      current_mrm_id: record.mrm_id,\n      current_mrm_agenda: record.mrm_agenda,\n      current_mrm_members: record.mrm_members,\n    });\n    //Date changes\n    const get_data = record;\n    const dateString = record.mrm_date;\n    var allDate = dateString.split(\" \");\n    var thisDate = allDate[0].split(\"-\");\n    var thisTime = allDate[1].split(\":\");\n    var newDate = [thisDate[2], thisDate[1], thisDate[0]].join(\"-\");\n    var newTime = [thisTime[0], thisTime[1]].join(\":\");\n    var updated_date = newDate + \" \" + newTime;\n    //Members and Agenda Changes\n    const mrm_agenda_data = JSON.parse(\"[\" + record.mrm_agenda + \"]\");\n    const mrm_member_data = JSON.parse(\"[\" + record.mrm_members + \"]\");\n    //Set Default State Values\n    get_data.update_location_id = record.unit_name;\n    get_data.update_unit_id = record.unit_id;\n    get_data.update_mrm_date = moment(updated_date, datetimeFormat);\n    get_data.update_mrm_members = mrm_member_data;\n    get_data.update_mrm_agenda = mrm_agenda_data;\n    get_data.update_location_id = current_unit_type;\n    console.log(\"get_data\");\n    console.log(get_data);\n    this.setState({\n      edit_recommendation_data: record,\n      current_mrm_date: updated_date,\n    });\n  }\n  closeEditMeeting() {\n    const { current_units, current_offset } = this.state;\n    this.setState({ open_edit_meeting: false });\n    this.props.GetMrmMeeting(current_units, current_offset);\n  }\n  openViewRecommendations(record) {\n    console.log(\"record\");\n    console.log(record);\n    this.setState({\n      open_view_recommendations: true,\n      current_meeting_data: record,\n      current_mrm_id: record.mrm_id,\n    });\n  }\n  closeViewRecommendations() {\n    this.setState({ open_view_recommendations: false });\n  }\n  handleAgendaSelect(value) {\n    let arrayString = value.join(\",\");\n    this.setState({\n      current_mrm_agenda: arrayString,\n    });\n  }\n  handleMembersSelect(value) {\n    let arrayString = value.join(\",\");\n    this.setState({\n      current_mrm_members: arrayString,\n    });\n  }\n  handleFPRSelect(value) {\n    // let arrayString = value.join(',');\n    this.setState({\n      //current_mrm_fpr: arrayString\n      current_mrm_fpr: value,\n    });\n  }\n  scheduleMeeting(values) {\n    const {\n      current_mrm_agenda,\n      current_mrm_members,\n      current_mrm_date,\n      current_offset,\n    } = this.state;\n    values.mrm_date = current_mrm_date;\n    values.mrm_reminder = this.state.reminder_email_checked;\n    values.mrm_agenda = current_mrm_agenda;\n    values.mrm_members = current_mrm_members;\n    if (values.mrm_reminder == false) {\n      values.mrm_reminder_days = null;\n    }\n    if (values.mrm_reminder_days == undefined || \"\" || null) {\n      values.mrm_reminder_days = null;\n    }\n    this.props.ScheduleMrmMeeting(\n      values.unit,\n      values.mrm_date,\n      values.mrm_members,\n      values.mrm_agenda,\n      values.mrm_reminder,\n      values.mrm_reminder_days,\n      current_offset\n    );\n    this.props.form.resetFields();\n  }\n  startMeeting(mrm_id) {\n    const { current_units, current_offset } = this.state;\n    this.props.StartMrmMeeting(mrm_id, current_units, current_offset);\n  }\n  editMeeting(values) {\n    console.log(\"editMeeting\");\n    const {\n      current_mrm_date,\n      update_reminder_email_checked,\n      current_mrm_members,\n      current_mrm_agenda,\n      current_mrm_id,\n      current_offset,\n    } = this.state;\n    values.update_mrm_date = current_mrm_date;\n    values.update_reminder_email = update_reminder_email_checked;\n    values.update_mrm_members = current_mrm_members;\n    values.update_mrm_agenda = current_mrm_agenda;\n    if (values.update_reminder_email == false) {\n      values.mrm_reminder_days = null;\n    }\n    if (values.mrm_reminder_days == undefined || \"\" || null) {\n      values.mrm_reminder_days = null;\n    }\n    console.log(values);\n    this.props.EditMrmMeeting(\n      current_mrm_id,\n      values.update_unit_id,\n      values.update_mrm_date,\n      values.update_mrm_members,\n      values.update_mrm_agenda,\n      values.update_reminder_email,\n      values.mrm_reminder_days,\n      current_offset\n    );\n  }\n  deleteMeeting(mrm_id) {\n    const { current_units, current_offset } = this.state;\n    this.props.DeleteMrmMeeting(mrm_id, current_units, current_offset);\n  }\n  completeMeeting() {\n    const { current_units, current_mrm_id, current_offset } = this.state;\n    this.props.CompleteMrmMeeting(\n      current_mrm_id,\n      current_units,\n      current_offset\n    );\n  }\n  cancelDeleteMeeting() {}\n  submitRecommendations(values) {\n    const { current_mrm_id, current_units, current_offset } = this.state;\n    console.log(\"submitRecommendations\");\n    console.log(values);\n    let mrm_recommendations = values.mrm_recommendations;\n    //Date Changes\n    let date_string = mrm_recommendations.map((val) =>\n      val.mrm_recommendation_targetdate._d.toString()\n    );\n    let date_val = date_string.map((val) =>\n      moment(new Date(val.substr(0, 16)))\n    );\n    let formatted_date = date_val.map((val) => val.format(\"DD-MM-YYYY\"));\n\n    for (var i = 0; i < mrm_recommendations.length; i++) {\n      mrm_recommendations[i].mrm_recommendation_targetdate = formatted_date[i];\n    }\n\n    this.props.AddRecommendationFirst(\n      current_mrm_id,\n      current_units,\n      values.mrm_recommendations,\n      current_offset\n    );\n  }\n  activeSingleAddRecommendation() {\n    this.setState({\n      active_single_add_recommendation: !this.state\n        .active_single_add_recommendation,\n    });\n  }\n  submitSingleAddRecommendations(values) {\n    console.log(values);\n    //this.setState({active_single_add_recommendation: !this.state.active_single_add_recommendation});\n  }\n  handleDate(date, dateString) {\n    this.setState({ current_mrm_date: dateString });\n  }\n  handleTargetDate(date, dateString) {\n    this.setState({ current_target_date: dateString });\n  }\n  updateTargetDate(date, dateString) {\n    this.setState({ update_target_date: dateString });\n  }\n  handleLocationTypeChange(value) {\n    console.log(value);\n    this.setState({ current_unit_type: value });\n  }\n  handleUnitsChange(value) {\n    console.log(value);\n    this.setState({ current_units: value });\n  }\n  initiateUpdateRecommendation(key) {\n    const { edit_recommendations, update_target_date } = this.state;\n    var getActiveSelector = document.querySelector(\".x-dynamic-form.active\");\n    if (getActiveSelector !== null) {\n      getActiveSelector.classList.remove(\"active\");\n    } else {\n    }\n    document\n      .getElementById(`x-recommendation-list${key}`)\n      .classList.add(\"active\");\n    const setUpdatedDate = edit_recommendations.sheRecommendations[\n      key\n    ].targetdate.format(\"DD-MM-YYYY\");\n    this.setState({ update_target_date: setUpdatedDate });\n    setTimeout(() => {\n      console.log(setUpdatedDate);\n    }, 1000);\n  }\n  getUpdatedRecommendationData(changedValues, allValues) {\n    console.log(changedValues, allValues);\n    this.updatedRecommendationData = allValues;\n  }\n  updateRecommendation(myIndex, field) {\n    const { update_target_date } = this.state;\n    this.updatedRecommendationData.sheRecommendations[\n      myIndex\n    ].targetdate = update_target_date;\n    console.log(this.updatedRecommendationData.sheRecommendations[myIndex]);\n    document\n      .getElementById(`x-recommendation-list${myIndex}`)\n      .classList.remove(\"active\");\n  }\n  render() {\n    const {\n      user_role_superadmin,\n      reminder_email_checked,\n      update_reminder_email_checked,\n      open_edit_recommendations,\n      open_edit_meeting,\n      open_add_recommendations,\n      open_view_recommendations,\n      active_single_add_recommendation,\n      mrm_agenda_data,\n      mrm_members_data,\n      unit_type_data,\n      units_data,\n      current_units,\n      current_unit_type,\n      mrmmeeting_data,\n      edit_recommendation_data,\n      current_meeting_data,\n      mrmrecommendation_addfirststatus,\n      mrmmeeting_complete_status,\n    } = this.state;\n    const { members, agenda, mrmmeeting } = this.props;\n    const columns = [\n      // {\n      // title: 'Location Type',\n      // dataIndex: 'unit_name',\n      // key: 'unit_name'\n      // },\n      {\n        title: \"Unit\",\n        dataIndex: \"unit_name\",\n        key: \"unit_name\",\n        width: \"250px\",\n      },\n      {\n        title: \"Date and Time\",\n        dataIndex: \"mrm_date\",\n        key: \"mrm_date\",\n        width: \"200px\",\n      },\n      {\n        title: \"Participants\",\n        dataIndex: \"mrm_members_details\",\n        key: \"mrm_members_details\",\n        render: (mrm_members_details) => (\n          <span>\n            {mrm_members_details.map((member) => {\n              return (\n                <span key={member.member_id} style={{ marginRight: \"15px\" }}>\n                  {member.member_name}\n                </span>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Status\",\n        dataIndex: \"status\",\n        key: \"status\",\n        width: \"100px\",\n        render: (text, record) =>\n          record.mrm_status === \"SCHEDULED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-yettostart\">\n                <CalendarOutlined />\n              </span>\n            </div>\n          ) : record.mrm_status === \"CONDUCTED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-assined\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ) : (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-completed\">\n                <CheckCircleFilled />\n              </span>\n            </div>\n          ),\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        width: \"200px\",\n        render: (text, record) =>\n          record.mrm_status === \"SCHEDULED\" ? (\n            <div>\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"ant-btn-no-bg x-button-secondary-no-bg only-icon float-left\"\n                onClick={() => {\n                  this.startMeeting(record.mrm_id);\n                }}\n              >\n                <PlayCircleFilled />\n              </Button>\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon float-left ant-btn-no-bg  ant-btn-primary-no-bg\"\n                onClick={() => {\n                  this.openEditMeeting(record);\n                }}\n              >\n                <EditFilled />\n              </Button>\n              <Popconfirm\n                title=\"Are you sure to delete this Meeting?\"\n                placement=\"topRight\"\n                onConfirm={() => {\n                  this.deleteMeeting(record.mrm_id);\n                }}\n                onCancel={this.cancelDeleteMeeting}\n                okText=\"Yes\"\n                cancelText=\"No\"\n              >\n                <Button\n                  type=\"primary\"\n                  size=\"small\"\n                  className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                  danger\n                >\n                  <DeleteFilled />\n                </Button>\n              </Popconfirm>\n            </div>\n          ) : record.mrm_status === \"CONDUCTED\" ? (\n            record.recommendations_add_edit_status === \"ADD\" ? (\n              <div>\n                <Button\n                  type=\"primary\"\n                  size=\"small\"\n                  className=\"icon-with-text ant-btn-no-bg  ant-btn-primary-no-bg\"\n                  onClick={() => {\n                    this.openAddRecommendations(record);\n                  }}\n                >\n                  <PlusCircleFilled />\n                  MOM\n                </Button>\n              </div>\n            ) : (\n              <div>\n                <Button\n                  type=\"primary\"\n                  size=\"small\"\n                  className=\"icon-with-text ant-btn-no-bg  ant-btn-primary-no-bg\"\n                  onClick={() => {\n                    this.openEditRecommendations(record);\n                  }}\n                >\n                  <EditFilled />\n                  MOM\n                </Button>\n              </div>\n            )\n          ) : (\n            <div>\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                  this.openViewRecommendations(record);\n                }}\n                className=\"ant-btn-no-bg x-button-success-no-bg icon-with-text\"\n              >\n                <TagFilled />\n                MOM\n              </Button>\n            </div>\n          ),\n      },\n    ];\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Schedule MRM Meeting</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/managementdashboard\">\n                <Breadcrumb.Item>\n                  <span>SHE Management</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Schedule MRM Meeting</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n              <Collapse expandIconPosition=\"right\">\n                <Panel header=\"Schedule MRM Meeting\" key=\"1\">\n                  <Card bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <Form\n                        layout=\"vertical\"\n                        autoComplete=\"off\"\n                        className=\"w-100\"\n                        size=\"large\"\n                        onFinish={this.scheduleMeeting}\n                        initialValues={{\n                          unit_type: current_unit_type,\n                          unit: current_units,\n                        }}\n                      >\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\" style={{ width: 300 }}>\n                            <Form.Item\n                              label=\"Location Type\"\n                              name=\"unit_type\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Location Type!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Location Type\"\n                                onChange={this.handleLocationTypeChange}\n                                disabled={user_role_superadmin}\n                              >\n                                {unit_type_data &&\n                                  unit_type_data.map((unittype, index) => (\n                                    <option value={index} key={index}>\n                                      {unittype}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                          <div className=\"controls\" style={{ width: 300 }}>\n                            <Form.Item\n                              label=\"Unit\"\n                              name=\"unit\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Unit!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Unit\"\n                                onChange={this.handleUnitsChange}\n                                disabled={user_role_superadmin}\n                              >\n                                {units_data &&\n                                  units_data.map((unit, index) => (\n                                    <option\n                                      value={unit.unit_id}\n                                      key={unit.unit_id}\n                                    >\n                                      {unit.unit_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                          <div className=\"controls\" style={{ width: 350 }}>\n                            <Form.Item\n                              label=\"Date\"\n                              name=\"mrm_date\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Date!\",\n                                },\n                              ]}\n                            >\n                              <DatePicker\n                                showTime\n                                onChange={this.handleDate}\n                                format={datetimeFormat}\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Participants\"\n                              name=\"mrm_members\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Member!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Member\"\n                                mode=\"multiple\"\n                                onChange={this.handleMembersSelect}\n                              >\n                                {mrm_members_data &&\n                                  mrm_members_data.map((members, index) => (\n                                    <option\n                                      key={members.member_id}\n                                      value={members.member_id}\n                                    >\n                                      {members.member_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Agenda of Meeting\"\n                              name=\"mrm_agenda\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Date!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Agenda of Meeting\"\n                                mode=\"multiple\"\n                                onChange={this.handleAgendaSelect}\n                              >\n                                {mrm_agenda_data &&\n                                  mrm_agenda_data.map((agenda, index) => (\n                                    <option\n                                      key={agenda.agenda_id}\n                                      value={agenda.agenda_id}\n                                    >\n                                      {agenda.agenda_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\" style={{ width: 200 }}>\n                            <Form.Item\n                              label=\"Reminder Email\"\n                              name=\"mrm_reminder\"\n                            >\n                              <Checkbox onChange={this.reminderemail}>\n                                Send Reminder Email\n                              </Checkbox>\n                            </Form.Item>\n                          </div>\n                          <div\n                            className={\n                              reminder_email_checked\n                                ? \"controls x-inline-formcontrols\"\n                                : \"d-none\"\n                            }\n                            style={{ width: \"auto\" }}\n                          >\n                            <Form.Item\n                              label=\"Days Before\"\n                              name=\"mrm_reminder_days\"\n                            >\n                              <Input />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item>\n                              <div className=\"x-btn-flex\">\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                >\n                                  Submit\n                                </Button>\n                                {this.props.mrmmeeting.schedulestatus ? (\n                                  <div className=\"x-ant-icon\">\n                                    <SyncOutlined spin />\n                                  </div>\n                                ) : (\n                                  \"\"\n                                )}\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                      </Form>\n                    </div>\n                  </Card>\n                </Panel>\n              </Collapse>\n              ,\n            </div>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of MRM Meeting\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"table-responsive\">\n                    {mrmmeeting.getloading ? (\n                      <div>\n                        <Spin indicator={antIcon} />\n                      </div>\n                    ) : (\n                      <div>\n                        <Table\n                          dataSource={mrmmeeting_data}\n                          columns={columns}\n                          rowKey={mrmmeeting_data.mrm_id}\n                        />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <Drawer\n          title=\"Edit SHE Meeting\"\n          placement=\"right\"\n          onClose={this.closeEditMeeting}\n          visible={open_edit_meeting}\n        >\n          <div className=\"row x-meeting-details\">\n            <Form\n              name=\"dynamic_recommendations\"\n              autoComplete=\"off\"\n              onFinish={this.editMeeting}\n              className=\"col-md-12\"\n              layout=\"vertical\"\n              size=\"large\"\n              initialValues={edit_recommendation_data}\n            >\n              <div className=\"x-controls-section\">\n                <div className=\"controls\" style={{ width: 300 }}>\n                  <Form.Item\n                    label=\"Location Type\"\n                    name=\"update_location_id\"\n                    rules={[\n                      {\n                        required: true,\n                        message: \"Please input Location Type!\",\n                      },\n                    ]}\n                  >\n                    <Select\n                      placeholder=\"Select Location Type\"\n                      onChange={this.handleLocationTypeChange}\n                      disabled={user_role_superadmin}\n                    >\n                      {unit_type_data &&\n                        unit_type_data.map((unittype, index) => (\n                          <option value={index} key={index}>\n                            {unittype}\n                          </option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n                </div>\n                <div className=\"controls\" style={{ width: 300 }}>\n                  <Form.Item\n                    label=\"Unit\"\n                    name=\"update_unit_id\"\n                    rules={[{ required: true, message: \"Please input Unit!\" }]}\n                  >\n                    <Select\n                      placeholder=\"Select Unit\"\n                      onChange={this.handleUnitsChange}\n                      disabled={user_role_superadmin}\n                    >\n                      {units_data &&\n                        units_data.map((unit) => (\n                          <option value={unit.unit_id} key={unit.unit_id}>\n                            {unit.unit_name}\n                          </option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n                </div>\n                <div className=\"controls\" style={{ width: 350 }}>\n                  <Form.Item\n                    label=\"Date\"\n                    name=\"update_mrm_date\"\n                    rules={[{ required: true, message: \"Please input Date!\" }]}\n                  >\n                    <DatePicker\n                      showTime\n                      format={datetimeFormat}\n                      onChange={this.handleDate}\n                    />\n                  </Form.Item>\n                </div>\n              </div>\n              <div className=\"x-controls-section\">\n                <div className=\"controls\">\n                  <Form.Item\n                    label=\"Participants\"\n                    name=\"update_mrm_members\"\n                    rules={[\n                      { required: true, message: \"Please input Member!\" },\n                    ]}\n                  >\n                    <Select\n                      placeholder=\"Select Member\"\n                      mode=\"multiple\"\n                      onChange={this.handleMembersSelect}\n                    >\n                      {mrm_members_data &&\n                        mrm_members_data.map((members, index) => (\n                          <option\n                            key={members.member_id}\n                            value={members.member_id}\n                          >\n                            {members.member_name}\n                          </option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n                </div>\n              </div>\n              <div className=\"x-controls-section\">\n                <div className=\"controls\">\n                  <Form.Item\n                    label=\"Agenda of Meeting\"\n                    name=\"update_mrm_agenda\"\n                    rules={[{ required: true, message: \"Please input Date!\" }]}\n                  >\n                    <Select\n                      placeholder=\"Select Agenda of Meeting\"\n                      mode=\"multiple\"\n                      onChange={this.handleAgendaSelect}\n                    >\n                      {mrm_agenda_data &&\n                        mrm_agenda_data.map((agenda, index) => (\n                          <option\n                            key={agenda.agenda_id}\n                            value={agenda.agenda_id}\n                          >\n                            {agenda.agenda_name}\n                          </option>\n                        ))}\n                    </Select>\n                  </Form.Item>\n                </div>\n              </div>\n              <div className=\"x-controls-section\">\n                <div className=\"controls\" style={{ width: 200 }}>\n                  <Form.Item\n                    label=\"Reminder Email\"\n                    name=\"update_reminder_email\"\n                  >\n                    <Checkbox\n                      checked={update_reminder_email_checked}\n                      onChange={this.updatereminderemail}\n                    >\n                      Send Reminder Email\n                    </Checkbox>\n                  </Form.Item>\n                </div>\n                <div\n                  className={\n                    update_reminder_email_checked\n                      ? \"controls x-inline-formcontrols\"\n                      : \"d-none\"\n                  }\n                  style={{ width: \"auto\" }}\n                >\n                  <Form.Item label=\"Days Before\" name=\"mrm_reminder_days\">\n                    <Input />\n                  </Form.Item>\n                </div>\n              </div>\n              <div className=\"x-controls-section\">\n                <div className=\"controls\">\n                  <Form.Item>\n                    <div className=\"x-btn-flex\">\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        className=\"float-right\"\n                      >\n                        Submit\n                      </Button>\n                      {this.props.mrmmeeting.editloading ? (\n                        <div className=\"x-ant-icon\">\n                          <SyncOutlined spin />\n                        </div>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  </Form.Item>\n                </div>\n              </div>\n            </Form>\n          </div>\n        </Drawer>\n        <Drawer\n          title=\"Add SHE Meeting Recommendations\"\n          placement=\"right\"\n          onClose={this.closeAddRecommendations}\n          visible={open_add_recommendations}\n        >\n          <div className=\"row x-meeting-details\">\n            <div className=\"col-md-9 px-0\">\n              <Form\n                name=\"dynamic_recommendations\"\n                autoComplete=\"off\"\n                onFinish={this.submitRecommendations}\n                className={\n                  !mrmrecommendation_addfirststatus ? \"col-md-12\" : \"d-none\"\n                }\n                layout=\"vertical\"\n                size=\"large\"\n              >\n                <div className=\"x-dynamic-container\">\n                  <Form.List name=\"mrm_recommendations\">\n                    {(fields, { add, remove }) => (\n                      <>\n                        <Form.Item>\n                          <Button\n                            type=\"dashed\"\n                            style={{\n                              width: \"auto\",\n                              display: \"flex\",\n                              alignItems: \"center\",\n                            }}\n                            onClick={() => add()}\n                            block\n                            icon={<PlusOutlined />}\n                          >\n                            Add Recommendations\n                          </Button>\n                        </Form.Item>\n\n                        <div className=\"x-dynamic-form-container\">\n                          <div\n                            className=\"x-controls-section x-dynamic-label\"\n                            style={{ height: 50 }}\n                          >\n                            <div\n                              className=\"controls\"\n                              style={{ minWidth: 50, width: 50 }}\n                            >\n                              <Form.Item label=\"S.No\"></Form.Item>\n                            </div>\n                            <div\n                              className=\"controls\"\n                              style={{ minWidth: 700, width: 700 }}\n                            >\n                              <Form.Item label=\"Recommendations\"></Form.Item>\n                            </div>\n                            <div\n                              className=\"controls\"\n                              style={{ minWidth: 300, width: 300 }}\n                            >\n                              <Form.Item label=\"FPR\"></Form.Item>\n                            </div>\n                            <div\n                              className=\"controls\"\n                              style={{ minWidth: 120, width: 120 }}\n                            >\n                              <Form.Item label=\"Target Date\"></Form.Item>\n                            </div>\n                            <div\n                              className=\"controls\"\n                              style={{ minWidth: 100, width: 100 }}\n                            >\n                              <Form.Item label=\"Actions\"></Form.Item>\n                            </div>\n                          </div>\n                          {fields.map((field) => (\n                            <Space\n                              key={field.key}\n                              style={{ display: \"flex\" }}\n                              align=\"baseline\"\n                              className=\"x-dynamic-form x-dynamic-form-visible-controls\"\n                            >\n                              <Form.Item\n                                {...field}\n                                name={[field.name, \"mrm_recommendation_id\"]}\n                                fieldKey={[\n                                  field.fieldKey,\n                                  \"mrm_recommendation_id\",\n                                ]}\n                                style={{ width: 50 }}\n                              >\n                                <Input placeholder=\"S.No\" />\n                              </Form.Item>\n                              <Form.Item\n                                {...field}\n                                name={[field.name, \"mrm_recommendation_name\"]}\n                                fieldKey={[\n                                  field.fieldKey,\n                                  \"mrm_recommendation_name\",\n                                ]}\n                                rules={[\n                                  {\n                                    required: true,\n                                    message: \"Missing Recommendation\",\n                                  },\n                                ]}\n                                style={{ width: 700 }}\n                              >\n                                <TextArea\n                                  rows={1}\n                                  placeholder=\"Recommendation\"\n                                ></TextArea>\n                              </Form.Item>\n                              <Form.Item\n                                {...field}\n                                name={[field.name, \"mrm_recommendation_fpr_id\"]}\n                                fieldKey={[\n                                  field.fieldKey,\n                                  \"mrm_recommendation_fpr_id\",\n                                ]}\n                                rules={[\n                                  {\n                                    required: true,\n                                    message: \"Please input Member!\",\n                                  },\n                                ]}\n                                style={{ width: 300 }}\n                              >\n                                <Select\n                                  placeholder=\"Select Member\"\n                                  onChange={this.handleFPRSelect}\n                                >\n                                  {mrm_members_data &&\n                                    mrm_members_data.map((members, index) => (\n                                      <option\n                                        key={members.member_id}\n                                        value={members.member_id}\n                                      >\n                                        {members.member_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                              <Form.Item\n                                {...field}\n                                name={[\n                                  field.name,\n                                  \"mrm_recommendation_targetdate\",\n                                ]}\n                                fieldKey={[\n                                  field.fieldKey,\n                                  \"mrm_recommendation_targetdate\",\n                                ]}\n                                rules={[\n                                  {\n                                    required: true,\n                                    message: \"Missing Target Date\",\n                                  },\n                                ]}\n                                style={{ width: 130 }}\n                              >\n                                <DatePicker\n                                  format={dateFormat}\n                                  placeholder=\"Target Date\"\n                                  onChange={this.handleTargetDate}\n                                />\n                              </Form.Item>\n                              <div style={{ width: 100 }}>\n                                <Button\n                                  type=\"primary\"\n                                  danger\n                                  size=\"small\"\n                                  className=\"mr-2 only-icon\"\n                                  onClick={() => remove(field.name)}\n                                >\n                                  <DeleteFilled />\n                                </Button>\n                              </div>\n                            </Space>\n                          ))}\n                        </div>\n                      </>\n                    )}\n                  </Form.List>\n                </div>\n                <Form.Item>\n                  <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    className=\"float-right mt-4\"\n                  >\n                    Save\n                  </Button>\n                </Form.Item>\n              </Form>\n            </div>\n            <div className=\"col-md-3 px-0\">\n              <div className=\"x-meeting-data x-panel-1\">\n                <div className=\"x-panel-1-header with-btn\">\n                  <div>Meeting Details</div>\n                  <div\n                    className={\n                      !mrmmeeting_complete_status ? \"d-block\" : \"d-none\"\n                    }\n                  >\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      className=\"ant-btn-secondary float-right\"\n                      size=\"large\"\n                      onClick={this.completeMeeting}\n                      disabled={!mrmrecommendation_addfirststatus}\n                    >\n                      Submit Mrm Meeting\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"x-panel-1-body\">\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Location Type</div>\n                    <div className=\"x-section-content\">{current_unit_type}</div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Unit</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.unit_name}\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Date</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.mrm_date}\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Agenda</div>\n                    <div className=\"x-section-content\">\n                      <ul className=\"x-list-items\">\n                        {current_meeting_data.mrm_agenda_details &&\n                          current_meeting_data.mrm_agenda_details.map(\n                            (agenda, index) => (\n                              <li id={agenda.agenda_id}>\n                                {agenda.agenda_name}\n                              </li>\n                            )\n                          )}\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Participants</div>\n                    <div className=\"x-section-content\">\n                      <ul className=\"x-list-items\">\n                        {current_meeting_data.mrm_members_details &&\n                          current_meeting_data.mrm_members_details.map(\n                            (members, index) => (\n                              <li id={members.member_id}>\n                                {members.member_name}\n                              </li>\n                            )\n                          )}\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Reminder Email</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.mrm_reminder_days == null ? (\n                        \"Not Set\"\n                      ) : (\n                        <span>\n                          {current_meeting_data.mrm_reminder_days == 0 ? (\n                            \"Not Set\"\n                          ) : (\n                            <span>\n                              {current_meeting_data.mrm_reminder_days == 1\n                                ? `${current_meeting_data.mrm_reminder_days} day before`\n                                : `${current_meeting_data.mrm_reminder_days} days before`}\n                            </span>\n                          )}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Drawer>\n        <Drawer\n          title=\"Edit SHE Meeting Recommendations\"\n          placement=\"right\"\n          onClose={this.closeEditRecommendations}\n          visible={open_edit_recommendations}\n        >\n          <div className=\"row x-meeting-details\">\n            <div className=\"col-md-9 px-0\">\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n                  <Form\n                    name=\"dynamic_recommendations\"\n                    autoComplete=\"off\"\n                    className=\"col-md-12\"\n                    layout=\"vertical\"\n                    size=\"large\"\n                    initialValues={this.state.edit_recommendations}\n                    onValuesChange={(changedValues, allValues) => {\n                      this.getUpdatedRecommendationData(\n                        changedValues,\n                        allValues\n                      );\n                    }}\n                  >\n                    <div className=\"x-dynamic-container\">\n                      <Form.List name=\"sheRecommendations\">\n                        {(fields, { add, remove }) => (\n                          <>\n                            <div\n                              className=\"x-dynamic-form-container\"\n                              id=\"x-dynamic-form-container\"\n                            >\n                              <div\n                                className=\"x-controls-section x-dynamic-label\"\n                                style={{ height: 50 }}\n                              >\n                                <div\n                                  className=\"controls\"\n                                  style={{ minWidth: 50, width: 50 }}\n                                >\n                                  <Form.Item label=\"S.No\"></Form.Item>\n                                </div>\n                                <div\n                                  className=\"controls\"\n                                  style={{ minWidth: 500, width: 500 }}\n                                >\n                                  <Form.Item label=\"Recommendations\"></Form.Item>\n                                </div>\n                                <div\n                                  className=\"controls\"\n                                  style={{ minWidth: 300, width: 300 }}\n                                >\n                                  <Form.Item label=\"FPR\"></Form.Item>\n                                </div>\n                                <div\n                                  className=\"controls\"\n                                  style={{ minWidth: 165, width: 165 }}\n                                >\n                                  <Form.Item label=\"Target Date\"></Form.Item>\n                                </div>\n                                <div\n                                  className=\"controls\"\n                                  style={{ minWidth: 165, width: 165 }}\n                                >\n                                  <Form.Item label=\"Status\"></Form.Item>\n                                </div>\n                                <div\n                                  className=\"controls\"\n                                  style={{ minWidth: 100, width: 100 }}\n                                >\n                                  <Form.Item label=\"Actions\"></Form.Item>\n                                </div>\n                              </div>\n                              {fields.map((field, index, record) => (\n                                <Space\n                                  key={field.key}\n                                  value={field.value}\n                                  style={{ display: \"flex\" }}\n                                  align=\"baseline\"\n                                  className=\"x-dynamic-form\"\n                                  id={`x-recommendation-list${index}`}\n                                >\n                                  <Form.Item\n                                    {...field}\n                                    name={[field.name, \"S.No\"]}\n                                    fieldKey={[field.fieldKey, \"S.No\"]}\n                                    style={{ width: 50 }}\n                                  >\n                                    <Input placeholder=\"S.No\" />\n                                  </Form.Item>\n                                  <Form.Item\n                                    {...field}\n                                    name={[field.name, \"recommendation\"]}\n                                    fieldKey={[\n                                      field.fieldKey,\n                                      \"recommendation\",\n                                    ]}\n                                    rules={[\n                                      {\n                                        required: true,\n                                        message: \"Missing Recommendation\",\n                                      },\n                                    ]}\n                                    style={{ minWidth: 500 }}\n                                  >\n                                    <TextArea\n                                      rows={1}\n                                      placeholder=\"Recommendation\"\n                                    ></TextArea>\n                                  </Form.Item>\n                                  <Form.Item\n                                    {...field}\n                                    name={[field.name, \"FPR\"]}\n                                    fieldKey={[field.fieldKey, \"FPR\"]}\n                                    rules={[\n                                      {\n                                        required: true,\n                                        message: \"Please input Member!\",\n                                      },\n                                    ]}\n                                    style={{ minWidth: 300 }}\n                                  >\n                                    <Select placeholder=\"Select FPR\">\n                                      <Option value=\"1\">FPR 1</Option>\n                                      <Option value=\"2\">FPR 2</Option>\n                                      <Option value=\"3\">FPR 3</Option>\n                                      <Option value=\"4\">FPR 4</Option>\n                                      <Option value=\"5\">FPR 5</Option>\n                                      <Option value=\"6\">FPR 6</Option>\n                                      <Option value=\"7\">FPR 7</Option>\n                                      <Option value=\"8\">FPR 8</Option>\n                                      <Option value=\"9\">FPR 9</Option>\n                                    </Select>\n                                  </Form.Item>\n                                  <Form.Item\n                                    {...field}\n                                    name={[field.name, \"targetdate\"]}\n                                    fieldKey={[field.fieldKey, \"targetdate\"]}\n                                    rules={[\n                                      {\n                                        required: true,\n                                        message: \"Missing Target Date\",\n                                      },\n                                    ]}\n                                    style={{ minWidth: 175 }}\n                                  >\n                                    <DatePicker\n                                      format={dateFormat}\n                                      onChange={this.updateTargetDate}\n                                      placeholder=\"Target Date\"\n                                    />\n                                  </Form.Item>\n                                  <Form.Item\n                                    {...field}\n                                    name={[field.name, \"status\"]}\n                                    fieldKey={[field.fieldKey, \"status\"]}\n                                    rules={[\n                                      {\n                                        required: true,\n                                        message: \"Please input Status!\",\n                                      },\n                                    ]}\n                                    style={{ minWidth: 165 }}\n                                  >\n                                    <Select placeholder=\"Select FPR\">\n                                      <Option value=\"completed\">\n                                        Completed\n                                      </Option>\n                                      <Option value=\"pending\">Pending</Option>\n                                    </Select>\n                                  </Form.Item>\n                                  <div\n                                    className=\"x-action-btns\"\n                                    style={{ width: 100 }}\n                                  >\n                                    <Button\n                                      type=\"primary\"\n                                      size=\"small\"\n                                      className=\"mr-2 x-initiate-edit-btn only-icon ant-btn-no-bg  ant-btn-primary-no-bg\"\n                                      onClick={() =>\n                                        this.initiateUpdateRecommendation(\n                                          field.key\n                                        )\n                                      }\n                                    >\n                                      <EditFilled />\n                                    </Button>\n                                    <Button\n                                      type=\"primary\"\n                                      size=\"small\"\n                                      className=\"mr-2 x-edit-btn icon-with-text\"\n                                      onClick={(form) => {\n                                        this.updateRecommendation(index, field);\n                                      }}\n                                    >\n                                      Save\n                                    </Button>\n                                    <Button\n                                      type=\"primary\"\n                                      danger\n                                      size=\"small\"\n                                      className=\"mr-2 only-icon ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                                      onClick={() => remove(field.name)}\n                                    >\n                                      <DeleteFilled />\n                                    </Button>\n                                  </div>\n                                </Space>\n                              ))}\n                            </div>\n                          </>\n                        )}\n                      </Form.List>\n                    </div>\n                  </Form>\n                  <div className=\"mt-4\">\n                    <Form\n                      name=\"dynamic_recommendations\"\n                      autoComplete=\"off\"\n                      onFinish={this.submitSingleAddRecommendations}\n                      className=\"col-md-12\"\n                      layout=\"vertical\"\n                      size=\"large\"\n                    >\n                      <div className=\"x-dynamic-container\">\n                        <Form.List name=\"sheRecommendations\">\n                          {(fields, { add, remove }) => (\n                            <>\n                              <Form.Item>\n                                <Button\n                                  type=\"dashed\"\n                                  disabled={!active_single_add_recommendation}\n                                  style={{\n                                    width: \"auto\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                  }}\n                                  onClick={() => {\n                                    add();\n                                    this.activeSingleAddRecommendation();\n                                  }}\n                                  block\n                                  icon={<PlusOutlined />}\n                                >\n                                  Add Recommendations\n                                </Button>\n                              </Form.Item>\n                              <div\n                                className=\"x-dynamic-form-container\"\n                                style={{ minHeight: \"200px\" }}\n                              >\n                                <div\n                                  className=\"x-controls-section x-dynamic-label\"\n                                  style={{ height: 50 }}\n                                >\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 50, width: 50 }}\n                                  >\n                                    <Form.Item label=\"S.No\"></Form.Item>\n                                  </div>\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 700, width: 700 }}\n                                  >\n                                    <Form.Item label=\"Recommendations\"></Form.Item>\n                                  </div>\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 300, width: 300 }}\n                                  >\n                                    <Form.Item label=\"FPR\"></Form.Item>\n                                  </div>\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 165, width: 165 }}\n                                  >\n                                    <Form.Item label=\"Target Date\"></Form.Item>\n                                  </div>\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 100, width: 100 }}\n                                  >\n                                    <Form.Item label=\"Actions\"></Form.Item>\n                                  </div>\n                                </div>\n                                {fields.map((field) => (\n                                  <Space\n                                    key={field.key}\n                                    style={{ display: \"flex\" }}\n                                    align=\"baseline\"\n                                    className=\"x-dynamic-form x-dynamic-form-visible-controls\"\n                                  >\n                                    <Form.Item\n                                      {...field}\n                                      name={[field.name, \"S.No\"]}\n                                      fieldKey={[field.fieldKey, \"S.No\"]}\n                                      style={{ width: 50 }}\n                                    >\n                                      <Input placeholder=\"S.No\" />\n                                    </Form.Item>\n                                    <Form.Item\n                                      {...field}\n                                      name={[field.name, \"recommendation\"]}\n                                      fieldKey={[\n                                        field.fieldKey,\n                                        \"recommendation\",\n                                      ]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Missing Recommendation\",\n                                        },\n                                      ]}\n                                      style={{ minWidth: 700 }}\n                                    >\n                                      <TextArea\n                                        rows={1}\n                                        placeholder=\"Recommendation\"\n                                      ></TextArea>\n                                    </Form.Item>\n                                    <Form.Item\n                                      {...field}\n                                      name={[field.name, \"FPR\"]}\n                                      fieldKey={[field.fieldKey, \"FPR\"]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Please input Member!\",\n                                        },\n                                      ]}\n                                      style={{ minWidth: 300 }}\n                                    >\n                                      <Select placeholder=\"Select FPR\">\n                                        <Option value=\"1\">FPR 1</Option>\n                                        <Option value=\"2\">FPR 2</Option>\n                                        <Option value=\"3\">FPR 3</Option>\n                                        <Option value=\"4\">FPR 4</Option>\n                                        <Option value=\"5\">FPR 5</Option>\n                                        <Option value=\"6\">FPR 6</Option>\n                                        <Option value=\"7\">FPR 7</Option>\n                                        <Option value=\"8\">FPR 8</Option>\n                                        <Option value=\"9\">FPR 9</Option>\n                                      </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                      {...field}\n                                      name={[field.name, \"targetdate\"]}\n                                      fieldKey={[field.fieldKey, \"targetdate\"]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Missing Target Date\",\n                                        },\n                                      ]}\n                                      style={{\n                                        minWidth: 165,\n                                        marginRight: \"15px\",\n                                      }}\n                                    >\n                                      <DatePicker\n                                        format={dateFormat}\n                                        placeholder=\"Target Date\"\n                                      />\n                                    </Form.Item>\n                                    <Button\n                                      type=\"primary\"\n                                      size=\"small\"\n                                      className=\"mr-2 only-icon icon-with-text\"\n                                      htmlType=\"submit\"\n                                      style={{ marginTop: \".4rem\" }}\n                                    >\n                                      Save\n                                    </Button>\n                                    <Button\n                                      type=\"primary\"\n                                      danger\n                                      size=\"small\"\n                                      className=\"mr-2 only-icon\"\n                                      onClick={() => {\n                                        remove(field.name);\n                                        this.activeSingleAddRecommendation();\n                                      }}\n                                    >\n                                      <DeleteFilled />\n                                    </Button>\n                                  </Space>\n                                ))}\n                              </div>\n                            </>\n                          )}\n                        </Form.List>\n                      </div>\n                    </Form>\n                  </div>\n                </TabPane>\n                <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n                  <div className=\"table-responsive\">\n                    <table className=\"table table-hover\">\n                      <thead>\n                        <tr>\n                          <th>S.No</th>\n                          <th>Recommendations</th>\n                          <th>FPR</th>\n                          <th>Target Date</th>\n                          <th style={{ width: 50 }} className=\"text-center\">\n                            Status\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>1</td>\n                          <td>Recommendations1</td>\n                          <td>FPR4</td>\n                          <td>02-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>2</td>\n                          <td>Recommendations2</td>\n                          <td>FPR4</td>\n                          <td>10-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-assined\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>3</td>\n                          <td>Recommendations3</td>\n                          <td>FPR4</td>\n                          <td>12-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-assined\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>4</td>\n                          <td>Recommendations4</td>\n                          <td>FPR4</td>\n                          <td>22-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>5</td>\n                          <td>Recommendations5</td>\n                          <td>FPR4</td>\n                          <td>16-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>6</td>\n                          <td>Recommendations6</td>\n                          <td>FPR7</td>\n                          <td>16-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-due\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </TabPane>\n              </Tabs>\n            </div>\n            <div className=\"col-md-3 px-0\">\n              <div className=\"x-meeting-data x-panel-1\">\n                <div className=\"x-panel-1-header with-btn\">\n                  <div>Meeting Details</div>\n                  <div\n                    className={\n                      !mrmmeeting_complete_status ? \"d-block\" : \"d-none\"\n                    }\n                  >\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      className=\"ant-btn-secondary float-right\"\n                      size=\"large\"\n                      onClick={this.completeMeeting}\n                    >\n                      Submit Mrm Meeting\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"x-panel-1-body\">\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Location Type</div>\n                    <div className=\"x-section-content\">{current_unit_type}</div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Unit</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.unit_name}\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Date</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.mrm_date}\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Agenda</div>\n                    <div className=\"x-section-content\">\n                      <ul className=\"x-list-items\">\n                        {current_meeting_data.mrm_agenda_details &&\n                          current_meeting_data.mrm_agenda_details.map(\n                            (agenda, index) => (\n                              <li id={agenda.agenda_id}>\n                                {agenda.agenda_name}\n                              </li>\n                            )\n                          )}\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Participants</div>\n                    <div className=\"x-section-content\">\n                      <ul className=\"x-list-items\">\n                        {current_meeting_data.mrm_members_details &&\n                          current_meeting_data.mrm_members_details.map(\n                            (members, index) => (\n                              <li id={members.member_id}>\n                                {members.member_name}\n                              </li>\n                            )\n                          )}\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Reminder Email</div>\n                    {/* \n          <div className=\"x-section-content\">\n            {current_meeting_data.mrm_reminder_days == null || 0 ? \n            'Not Set' \n            :\n            (\n            <span>\n            {current_meeting_data.mrm_reminder_days == 1 ? \n            (`${current_meeting_data.mrm_reminder_days} day before`) \n            : \n            (`${current_meeting_data.mrm_reminder_days} days before`)\n            }\n            </span>\n            ) \n            }\n          </div>\n          */}\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.mrm_reminder_days == null ? (\n                        \"Not Set\"\n                      ) : (\n                        <span>\n                          {current_meeting_data.mrm_reminder_days == 0 ? (\n                            \"Not Set\"\n                          ) : (\n                            <span>\n                              {current_meeting_data.mrm_reminder_days == 1\n                                ? `${current_meeting_data.mrm_reminder_days} day before`\n                                : `${current_meeting_data.mrm_reminder_days} days before`}\n                            </span>\n                          )}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row x-meeting-details\"></div>\n        </Drawer>\n        <Drawer\n          title=\"View SHE Meeting Recommendations\"\n          placement=\"right\"\n          onClose={this.closeViewRecommendations}\n          visible={open_view_recommendations}\n        >\n          <div className=\"row x-meeting-details\">\n            <div className=\"col-md-9 px-0\">\n              <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n                  <div className=\"table-responsive\">\n                    <table className=\"table table-hover\">\n                      <thead>\n                        <tr>\n                          <th>S.No</th>\n                          <th>Recommendations</th>\n                          <th>FPR</th>\n                          <th>Target Date</th>\n                          <th style={{ width: 50 }} className=\"text-center\">\n                            Status\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>1</td>\n                          <td>Recommendations1</td>\n                          <td>FPR4</td>\n                          <td>02-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>2</td>\n                          <td>Recommendations2</td>\n                          <td>FPR4</td>\n                          <td>10-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-assined\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>3</td>\n                          <td>Recommendations3</td>\n                          <td>FPR4</td>\n                          <td>12-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-assined\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>4</td>\n                          <td>Recommendations4</td>\n                          <td>FPR4</td>\n                          <td>22-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>5</td>\n                          <td>Recommendations5</td>\n                          <td>FPR4</td>\n                          <td>16-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>6</td>\n                          <td>Recommendations6</td>\n                          <td>FPR7</td>\n                          <td>16-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-due\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </TabPane>\n                <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n                  <div className=\"table-responsive\">\n                    <table className=\"table table-hover\">\n                      <thead>\n                        <tr>\n                          <th>S.No</th>\n                          <th>Recommendations</th>\n                          <th>FPR</th>\n                          <th>Target Date</th>\n                          <th style={{ width: 50 }} className=\"text-center\">\n                            Status\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>1</td>\n                          <td>Recommendations111</td>\n                          <td>FPR3</td>\n                          <td>08-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-assined\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>2</td>\n                          <td>Recommendations222</td>\n                          <td>FPR2</td>\n                          <td>01-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>3</td>\n                          <td>Recommendations333</td>\n                          <td>FPR1</td>\n                          <td>02-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>4</td>\n                          <td>Recommendations444</td>\n                          <td>FPR6</td>\n                          <td>12-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-assined\">\n                              <Loading3QuartersOutlined />\n                            </span>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>5</td>\n                          <td>Recommendations555</td>\n                          <td>FPR8</td>\n                          <td>26-02-2021</td>\n                          <td className=\"text-center x-status-icon\">\n                            <span className=\"x-status-icon-completed\">\n                              <CheckCircleFilled />\n                            </span>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </TabPane>\n              </Tabs>\n            </div>\n            <div className=\"col-md-3 px-0\">\n              <div className=\"x-meeting-data x-panel-1\">\n                <div className=\"x-panel-1-header with-btn\">\n                  <div>Meeting Details</div>\n                </div>\n                <div className=\"x-panel-1-body\">\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Location Type</div>\n                    <div className=\"x-section-content\">{current_unit_type}</div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Unit</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.unit_name}\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Date</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.mrm_date}\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Agenda</div>\n                    <div className=\"x-section-content\">\n                      <ul className=\"x-list-items\">\n                        {current_meeting_data.mrm_agenda_details &&\n                          current_meeting_data.mrm_agenda_details.map(\n                            (agenda, index) => (\n                              <li id={agenda.agenda_id}>\n                                {agenda.agenda_name}\n                              </li>\n                            )\n                          )}\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Participants</div>\n                    <div className=\"x-section-content\">\n                      <ul className=\"x-list-items\">\n                        {current_meeting_data.mrm_members_details &&\n                          current_meeting_data.mrm_members_details.map(\n                            (members, index) => (\n                              <li id={members.member_id}>\n                                {members.member_name}\n                              </li>\n                            )\n                          )}\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"x-section\">\n                    <div className=\"x-section-title\">Reminder Email</div>\n                    <div className=\"x-section-content\">\n                      {current_meeting_data.mrm_reminder_days == null ? (\n                        \"Not Set\"\n                      ) : (\n                        <span>\n                          {current_meeting_data.mrm_reminder_days == 0 ? (\n                            \"Not Set\"\n                          ) : (\n                            <span>\n                              {current_meeting_data.mrm_reminder_days == 1\n                                ? `${current_meeting_data.mrm_reminder_days} day before`\n                                : `${current_meeting_data.mrm_reminder_days} days before`}\n                            </span>\n                          )}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const {\n    members,\n    unittype,\n    units,\n    agenda,\n    mrmmeeting,\n    mrmrecommendation,\n  } = state;\n  return { members, unittype, units, agenda, mrmmeeting, mrmrecommendation };\n}\nconst actionCreators = {\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n  selectAgenda: actions.selectAgenda,\n  SelectAgendaFor: actions.SelectAgendaFor,\n  SelectMembers: actions.SelectMembers,\n  GetMrmMeeting: actions.GetMrmMeeting,\n  ScheduleMrmMeeting: actions.ScheduleMrmMeeting,\n  StartMrmMeeting: actions.StartMrmMeeting,\n  EditMrmMeeting: actions.EditMrmMeeting,\n  DeleteMrmMeeting: actions.DeleteMrmMeeting,\n  AddRecommendationFirst: actions.AddRecommendationFirst,\n  CompleteMrmMeeting: actions.CompleteMrmMeeting,\n};\nconst connectedScheduleMrmMeeting = connect(\n  mapState,\n  actionCreators\n)(ScheduleMrmMeeting);\nexport { connectedScheduleMrmMeeting as ScheduleMrmMeeting };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Login/Login.js",["409","410","411","412","413","414","415","416","417","418","419","420","421"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../actions\";\nimport {\n  Form,\n  Select,\n  DatePicker,\n  Button,\n  Card,\n  Breadcrumb,\n  Input,\n  Radio,\n  Checkbox,\n  Switch,\n  message,\n  Spin,\n} from \"antd\";\nimport { HomeOutlined, LoadingOutlined } from \"@ant-design/icons\";\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ip_address: \"\",\n      mem_email: \"\",\n      password: \"\",\n    };\n    this.getParameterByName = this.getParameterByName.bind(this);\n    this.loginForm = this.loginForm.bind(this);\n  }\n\n  componentDidMount() {\n    const requestOptions = {\n      method: \"GET\",\n      headers: {},\n    };\n    fetch(\"https://api.ipify.org?format=jsonp?callback=?\", requestOptions)\n      .then((res) => res.text())\n      .then((ip) => {\n        localStorage.setItem(\"ip_address\", ip);\n        this.setState({ ip_address: ip });\n        this.CommonLogin();\n      });\n  }\n  getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return \"\";\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n  }\n  CommonLogin = () => {\n    const { ip_address } = this.state;\n    const encryptedMail = this.getParameterByName(\"she\");\n    let mem_email = encryptedMail;\n    if (this.getParameterByName(\"she\")) {\n      //this.props.CommonLogin(mem_email, ip_address);\n    } else {\n      message.error(\"Not Authorized\");\n    }\n  };\n  loginForm(values) {\n    this.setState({ mem_email: values.username, password: values.password });\n    this.props.Login(\n      this.state.mem_email,\n      this.state.password,\n      this.state.ip_address\n    );\n  }\n  render() {\n    const { authentication } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-she-meeting x-div-flex\">\n          <div className=\"x-panel\" style={{ width: 500 }}>\n            <div className=\"x-panel-body\">\n              <div className=\"col-md-12\">\n                <div className=\"x-page-title\">\n                  <h1>Login</h1>\n                </div>\n              </div>\n              <div className=\"col-md-12\">\n                <Form\n                  name=\"login\"\n                  initialValues={{ remember: true }}\n                  onFinish={this.loginForm}\n                  className=\"login-form\"\n                >\n                  <Form.Item\n                    name=\"username\"\n                    rules={[\n                      {\n                        required: true,\n                        message: \"Please input your username!\",\n                      },\n                      { type: \"email\", message: \"Please enter Valid Email\" },\n                    ]}\n                  >\n                    <Input placeholder=\"Username\" />\n                  </Form.Item>\n                  <Form.Item>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      className=\"login-form-button\"\n                    >\n                      Login\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </div>\n            </div>\n          </div>\n          {/* <span className=\"login-loader\">\n          <Spin indicator={antIcon} />\n          </span> */}\n          {authentication.loginprogress ? <Spin indicator={antIcon} /> : null}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { authentication } = state;\n  return { authentication };\n}\nconst actionCreators = {\n  CommonLogin: actions.CommonLogin,\n  Login: actions.Login,\n};\nconst connectedLogin = connect(mapState, actionCreators)(Login);\nexport { connectedLogin as Login };\n","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/agenda.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/units.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/unittype.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/members.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/mrmrecommendation.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/agendafor.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/RiskAndOpportunities/RiskAndOpportunities.js",["422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  Form,\n  Select,\n  Button,\n  Breadcrumb,\n  Card,\n  Collapse,\n  Upload,\n  Spin,\n  Table,\n  Popconfirm,\n  message,\n  Input,\n  Drawer,\n  Pagination,\n  DatePicker,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  UploadOutlined,\n  DeleteFilled,\n  EditFilled,\n  LoadingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { actions } from \"../../../actions/actions\";\nimport moment from \"moment\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n//import reqwest from 'reqwest';\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst dateTimeFormat = \"DD-MM-YYYY\";\nconst dateTimeFormats = \"YYYY-MM-DD\";\nclass RiskAndOpportunities extends React.Component {\n  formRef = React.createRef();\n  formRef1 = React.createRef();\n  formRef2 = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      openeditattachment: false,\n      file: [],\n      uploading: false,\n      baseValue: \"\",\n      riskOpportunitiesData: [],\n      currentOffset: 0,\n      riskOpportunitiesId: \"\",\n      riskopportunities: [],\n      initialValues: [],\n      totalCount: \"\",\n      FilterAction: false,\n      membersData: [],\n      unitsData: [],\n      unitTypeData: [],\n      currentMembers: \"\",\n      currentUnits: \"\",\n      currentUnitType: \"\",\n      fCurrentUnits: \"\",\n      fCurrentUnitType: \"\",\n      currentUnitandTypeInitialValue: \"\",\n      changeLocationType: false,\n    };\n  }\n\n  componentDidMount() {\n    const { currentOffset } = this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    {\n      currentUserRollId == 3\n        ? this.setState({\n            userRoleSubAdmin: true,\n          })\n        : this.setState({\n            userRoleSubAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        fCurrentUnits: user.unit_id,\n        fCurrentUnitType: user.unit_type,\n        currentUnitandTypeInitialValue: {\n          currentUnitType: user.unit_type,\n          currentUnitName: user.unit_id,\n        },\n      },\n      this.ActionRoleBased\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let riskOpportunitiesStatus = this.props.riskopportunities.getstatus;\n      let membersStatus = this.props.members.selectstatus;\n      let unitsStatus = this.props.units.status;\n      let unittypeStatus = this.props.unittype.status;\n      {\n        riskOpportunitiesStatus == \"success\"\n          ? this.setState({\n              riskOpportunitiesData: this.props.riskopportunities.items.data,\n              totalCount: this.props.riskopportunities.items.total_count,\n            })\n          : this.setState({\n              riskOpportunitiesData: [],\n              totalCount: 0,\n            });\n      }\n      {\n        membersStatus == \"success\"\n          ? this.setState({\n              membersData: this.props.members.items.data,\n            })\n          : this.setState({\n              membersData: [],\n            });\n      }\n      {\n        unittypeStatus == \"success\"\n          ? this.setState({\n              unitTypeData: this.props.unittype.items.data,\n            })\n          : this.setState({\n              unitTypeData: [],\n            });\n      }\n      {\n        unitsStatus == \"success\"\n          ? this.setState({\n              unitsData: this.props.units.items.data,\n            })\n          : this.setState({\n              unitsData: [],\n            });\n      }\n    }\n  }\n\n  ActionRoleBased = () => {\n    const { currentUnits, currentOffset, currentUnitType } = this.state;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetRiskOpportunities(args);\n    let argss = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(argss);\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n  };\n\n  pageOnChange = (pagenumber) => {\n    const { currentUnits, FilterAction, val, fCurrentUnits } = this.state;\n    let x = pagenumber - 1;\n    let offset = x * 20;\n    let args;\n    if (FilterAction) {\n      args = val + `&offset=${offset}&unit_id=${fCurrentUnits}`;\n    } else {\n      args = `offset=${offset}&unit_id=${currentUnits}`;\n    }\n    this.props.GetRiskOpportunities(args);\n  };\n\n  openEditAttachment = (record) => {\n    const { currentOffset, currentUnits } = this.state;\n    this.setState({ openeditattachment: true });\n    let args = `offset=${currentOffset}&risk_opportunities_id=${record.risk_opportunities_id}&unit_id=${currentUnits}`;\n    this.props.GetRiskOpportunities(args);\n    this.setState({ riskOpportunitiesId: record.risk_opportunities_id });\n    this.setState({ initialValues: record });\n    this.setState({ riskOpportunitiesData: record });\n  };\n  closeEditAttachment = () => {\n    const { currentOffset, currentUnits } = this.state;\n    this.setState({ openeditattachment: false });\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetRiskOpportunities(args);\n    window.location.reload();\n  };\n\n  download = (file) => {\n    const link = document.createElement(\"a\");\n    link.href = file;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  handleUpload = (e) => {\n    var fileInput = document.getElementById(\"file\");\n    var filePath = fileInput.value;\n    var fileType = /(\\.jpg|\\.jpeg|\\.png|\\.doc|\\.xls|\\.docx|\\.pdf|\\.xlsx)$/i;\n    if (!fileType.exec(filePath)) {\n      alert(\"Invalid file type\");\n      fileInput.value = \"\";\n      window.location.reload();\n      return false;\n    } else {\n      const file = e.target.files;\n      if (file && file[0]) {\n        this.setState({ file: file[0] });\n        this.getBase64(file[0]);\n      }\n    }\n  };\n\n  getBase64 = (file) => {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      let val = e.target.result;\n      this.setState({ baseValue: val });\n    };\n    reader.onerror = function (error) {\n      console.log(\"Error\", error);\n    };\n  };\n\n  DeleteAttachment = (record) => {\n    const { currentUnits, currentOffset } = this.state;\n    const id = record.risk_opportunities_id;\n    this.props.DeleteRiskOpportunities(id);\n    console.log(\"deleted\" + record.risk_opportunities_id);\n    this.formRef1.current.resetFields();\n    this.setState({\n      FilterAction: false,\n    });\n    let args = `risk_opportunities_id=${record.risk_opportunities_id}&offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetRiskOpportunities(args);\n  };\n\n  CreateRiskAndOpportunities = (value) => {\n    console.log(value);\n    const { baseValue, currentOffset, currentUnits, currentUnitType } =\n      this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.AddRiskOpportunities(\n      value.title,\n      baseValue,\n      currentUnits,\n      currentUnitType,\n      args\n    );\n    this.formRef.current.resetFields();\n    this.formRef1.current.resetFields();\n    this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n    this.setState({\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      FilterAction: false,\n    });\n  };\n\n  updateRiskAndOpportunities = (value) => {\n    const { riskOpportunitiesId, baseValue, currentOffset, currentUnits } =\n      this.state;\n    let argss = `offset=${currentOffset}&risk_opportunities_id=${riskOpportunitiesId}&unit_id=${currentUnits}`;\n    this.props.EditRiskOpportunities(\n      riskOpportunitiesId,\n      value.risk_opportunities_title,\n      baseValue\n    );\n    this.props.GetRiskOpportunities(argss);\n  };\n\n  DeleteRiskOpportunitiesAttachments = (data) => {\n    const { riskOpportunitiesId, currentOffset, currentUnits } = this.state;\n    const id = data.risk_opportunities_attachments_id;\n    let argss = `risk_opportunities_id=${riskOpportunitiesId}&offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.DeleteRiskOpportunitiesAttachments(id, argss);\n  };\n\n  resetForm = () => {\n    this.formRef.current.resetFields();\n  };\n  resetForm1 = () => {\n    const { currentOffset } = this.state;\n    this.formRef1.current.resetFields();\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.GetRiskOpportunities(args);\n    this.setState({\n      FilterAction: false,\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      date1: \"\",\n      date2: \"\",\n      currentMembers: \"\",\n      fCurrentUnits: user.unit_id,\n      fCurrentUnitType: user.unit_type,\n      changeLocationType: false,\n    });\n  };\n  resetForm2 = () => {\n    this.formRef2.current.resetFields();\n  };\n\n  getFilterParams = (taskFilters) => {\n    const { currentOffset } = this.state;\n    let filterParams = \"\";\n    for (let i in taskFilters) {\n      let item = taskFilters[i];\n      if (item && item.length > 0) {\n        if (filterParams != \"\") {\n          filterParams += \"&\";\n        }\n        filterParams += `${i}=${item.toString()}`;\n      }\n    }\n    return filterParams;\n  };\n\n  filterTable = (fieldsValue) => {\n    const { date1, date2, currentMembers, fCurrentUnits, fCurrentUnitType } =\n      this.state;\n    const value = {\n      ...fieldsValue,\n      from_date: date1,\n      to_date: date2,\n      created_by: currentMembers.toString(),\n      unit_type: fCurrentUnitType,\n      unit_id: fCurrentUnits,\n    };\n    let updatedValue = this.getFilterParams(value);\n    this.setState({ val: updatedValue, FilterAction: true });\n    this.filter();\n  };\n\n  filter = () => {\n    const { val, currentOffset, fCurrentUnits } = this.state;\n    let updatedValue =\n      val + `&offset=${currentOffset}&unit_id=${fCurrentUnits}`;\n    this.props.GetRiskOpportunities(updatedValue);\n  };\n\n  handleMembers = (value) => {\n    this.setState({\n      currentMembers: value,\n    });\n  };\n\n  fromDateChanged = (date, dateString) => {\n    this.setState({ date1: dateString });\n  };\n\n  toDateChanged = (date, dateString) => {\n    this.setState({ date2: dateString });\n  };\n\n  HandleLocationTypeChange = (value) => {\n    this.setState({ currentUnitType: value, currentUnits: \"\" });\n    this.props.SelectUnits(value);\n    this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n  };\n\n  HandleUnitsChange = (value) => {\n    this.setState({\n      currentUnits: value,\n    });\n  };\n\n  HandleLocationTypeChanges = (value) => {\n    this.setState({\n      fCurrentUnitType: value,\n      unit_id: \"\",\n      currentUnitandTypeInitialValue: null,\n      changeLocationType: true,\n    });\n    this.props.SelectUnits(value);\n    this.formRef1.current.setFieldsValue({ unit_id: undefined });\n    if (this.formRef.current != null) {\n      this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n      this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    }\n  };\n\n  HandleUnitsChanges = (value) => {\n    this.setState({\n      fCurrentUnits: value,\n    });\n  };\n\n  render() {\n    const {\n      userRoleSuperAdmin,\n      userRoleSubAdmin,\n      openeditattachment,\n      riskOpportunitiesData,\n      file,\n      initialValues,\n      membersData,\n      unitTypeData,\n      unitsData,\n      currentUnitType,\n      currentUnits,\n      currentUnitandTypeInitialValue,\n      changeLocationType,\n    } = this.state;\n    const { riskopportunities, units } = this.props;\n\n    const columns = [\n      {\n        title: \"Title\",\n        dataIndex: \"risk_opportunities_title\",\n        key: \"risk_opportunities_title\",\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"created_on\",\n        key: \"created_on\",\n        render: (created_on) => {\n          return <p>{moment(created_on).format(dateTimeFormat)}</p>;\n        },\n      },\n      {\n        title: \"Attachments\",\n        dataIndex: \"risk_opportunities_attachments\",\n        key: \"risk_opportunities_attachments\",\n        render: (risk_opportunities_attachments, i) => (\n          <span>\n            {risk_opportunities_attachments.map((attachment) => {\n              return (\n                <p key={i}>\n                  {attachment.risk_opportunities_attachments_filename}\n                </p>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        render: (text, record) => (\n          <div>\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n              onClick={() => {\n                this.openEditAttachment(record);\n              }}\n            >\n              <EditFilled />\n            </Button>\n            <Popconfirm\n              title=\"Are you sure to delete this Meeting?\"\n              placement=\"topRight\"\n              onConfirm={() => {\n                this.DeleteAttachment(record);\n              }}\n              onCancel={this.CancelDeleteMeeting}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                danger\n              >\n                <DeleteFilled />\n              </Button>\n            </Popconfirm>\n          </div>\n        ),\n      },\n    ];\n\n    const column = [\n      {\n        title: \"Attachments\",\n        dataIndex: \"risk_opportunities_attachments\",\n        key: \"risk_opportunities_attachments\",\n        width: \"150px\",\n        render: (risk_opportunities_attachments) => (\n          <span>\n            {risk_opportunities_attachments.map((attachment) => {\n              return (\n                <p>{attachment.risk_opportunities_attachments_filename}</p>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"risk_opportunities_attachments\",\n        key: \"risk_opportunities_attachments\",\n        width: \"150px\",\n        render: (risk_opportunities_attachments) => (\n          <span>\n            {risk_opportunities_attachments.map((attachment) => {\n              return (\n                <p>{moment(attachment.created_on).format(dateTimeFormat)}</p>\n              );\n            })}\n          </span>\n        ),\n      },\n\n      {\n        title: \"Actions\",\n        dataIndex: \"risk_opportunities_attachments\",\n        key: \"risk_opportunities_attachments\",\n        width: \"100px\",\n        render: (risk_opportunities_attachments) => (\n          <div className=\"actions\">\n            {risk_opportunities_attachments.map((attachment) => {\n              return (\n                <div className=\"needsactions\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\" ant-btn-no-bg x-button-secondary-no-bg mr-2 mb-2 p-1 only-icon float-left\"\n                    onClick={(e) =>\n                      this.download(\n                        attachment.risk_opportunities_attachments_filepath\n                      )\n                    }\n                  >\n                    <FontAwesomeIcon icon=\"download\" />\n                  </Button>\n                  <Popconfirm\n                    title=\"Are you sure to delete this Attachments?\"\n                    placement=\"topRight\"\n                    onConfirm={() => {\n                      this.DeleteRiskOpportunitiesAttachments(attachment);\n                    }}\n                    onCancel={this.CancelDeleteMeeting}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      type=\"primary\"\n                      size=\"small\"\n                      className=\"only-icon float-left ant-btn-no-bg mr-2 mb-2 p-1 ant-btn-dangerous-no-bg\"\n                      danger\n                    >\n                      <DeleteFilled />\n                    </Button>\n                  </Popconfirm>\n                </div>\n              );\n            })}\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-she-meeting\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Risk And Opportunities</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/managementdashboard\">\n                <Breadcrumb.Item>\n                  <span>SHE Management</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Risk And Opportunities</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n              <Collapse expandIconPosition=\"right\">\n                <Panel header=\"Upload Documents\" key=\"1\">\n                  <Card bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <Form\n                        layout=\"vertical\"\n                        autoComplete=\"off\"\n                        className=\"w-100\"\n                        size=\"large\"\n                        ref={this.formRef}\n                        onFinish={this.CreateRiskAndOpportunities}\n                        // initialValues={{\n                        //   currentUnitType: currentUnitType,\n                        //   currentUnitName: currentUnits,\n                        // }}\n                        initialValues={currentUnitandTypeInitialValue}\n                      >\n                        {userRoleSuperAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Location Type\"\n                                  name=\"currentUnitType\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Location Type!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleLocationTypeChange}\n                                  >\n                                    {unitTypeData &&\n                                      unitTypeData.map((unittype, index) => (\n                                        <option value={unittype} key={index}>\n                                          {unittype}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnitName\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSuperAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\">\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnitName\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSubAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Title\"\n                              name=\"title\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Title!\",\n                                },\n                              ]}\n                            >\n                              <Input placeholder=\"Title\" />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Select Files\"\n                              name=\"selectfiles\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Title!\",\n                                },\n                              ]}\n                            >\n                              <input\n                                id=\"file\"\n                                type=\"file\"\n                                name=\"file\"\n                                accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                                onChange={(e) => this.handleUpload(e)}\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item>\n                              <div className=\"x-btn-flex\">\n                                <Button\n                                  type=\"link\"\n                                  className=\"float-right\"\n                                  danger\n                                  onClick={this.resetForm}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                  disabled={riskopportunities.completeloading}\n                                >\n                                  Save\n                                </Button>\n                                {riskopportunities.completeloading ? (\n                                  <div className=\"x-ant-icon\">\n                                    <SyncOutlined spin />\n                                  </div>\n                                ) : (\n                                  \"\"\n                                )}\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                      </Form>\n                    </div>\n                  </Card>\n                </Panel>\n              </Collapse>\n            </div>\n          </div>\n          <div className=\"row x-row  mt-4\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of Documents\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"x-table-filters\">\n                    <Form\n                      layout=\"vertical\"\n                      autoComplete=\"off\"\n                      ref={this.formRef1}\n                      className=\"w-100\"\n                      size=\"large\"\n                      onFinish={this.filterTable}\n                    >\n                      <div className=\"x-controls-section\">\n                        {userRoleSuperAdmin ? (\n                          <div className=\"x-controls-section x-mr-1\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_type\">\n                                <Select\n                                  placeholder=\"Location Type\"\n                                  onChange={this.HandleLocationTypeChanges}\n                                >\n                                  {unitTypeData &&\n                                    unitTypeData.map((unittype, index) => (\n                                      <option value={unittype} key={index}>\n                                        {unittype}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item\n                                name=\"unit_id\"\n                                rules={\n                                  changeLocationType\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Unit!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSuperAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <div className=\"x-controls-section\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_id\">\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSubAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <Form.Item name=\"created_by\">\n                            <div className=\"x-controls\">\n                              <Select\n                                placeholder=\"Created by\"\n                                onChange={this.handleMembers}\n                              >\n                                {membersData &&\n                                  membersData.map((member) => (\n                                    <option\n                                      key={member.member_id}\n                                      value={member.member_id}\n                                    >\n                                      {member.member_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </div>\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"risk_opportunities_title\">\n                              <div className=\"x-controls\">\n                                <Input placeholder=\"Title\" />\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"from_date\">\n                              <DatePicker\n                                onChange={this.fromDateChanged}\n                                placeholder=\"From Date\"\n                                format={dateTimeFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"to_date\">\n                              <DatePicker\n                                onChange={this.toDateChanged}\n                                placeholder=\"To Date\"\n                                format={dateTimeFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"control\">\n                          <div className=\"x-controls x-btn-flex\">\n                            <Button\n                              type=\"primary\"\n                              size=\"small\"\n                              htmlType=\"submit\"\n                              disabled={riskopportunities.getloading}\n                            >\n                              Filter\n                            </Button>\n                            {riskopportunities.getloading ? (\n                              <div className=\"x-ant-icon\">\n                                <SyncOutlined spin />\n                              </div>\n                            ) : (\n                              \"\"\n                            )}\n                            <Button\n                              type=\"link\"\n                              htmlType=\"reset\"\n                              danger\n                              onClick={this.resetForm1}\n                            >\n                              Reset\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Form>\n                  </div>\n\n                  <div className=\"table-responsive\">\n                    {riskopportunities.getloading ||\n                    riskopportunities.completeloading ||\n                    riskopportunities.deleteloading ? (\n                      <div>\n                        <Spin indicator={antIcon} />\n                      </div>\n                    ) : (\n                      <div>\n                        <Table\n                          dataSource={riskOpportunitiesData}\n                          columns={columns}\n                          pagination={false}\n                        />\n                      </div>\n                    )}\n                    <Pagination\n                      total={this.state.totalCount}\n                      onChange={this.pageOnChange}\n                      defaultCurrent={1}\n                      defaultPageSize={20}\n                    />\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <Drawer\n          title=\"Edit Documents\"\n          placement=\"right\"\n          onClose={this.closeEditAttachment}\n          visible={openeditattachment}\n        >\n          {riskopportunities.getstatus == \"request\" ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <>\n              <Table dataSource={riskOpportunitiesData} columns={column} />\n\n              <Form\n                name=\"edit_attachments\"\n                autoComplete=\"off\"\n                ref={this.formRef1}\n                onFinish={this.updateRiskAndOpportunities}\n                className=\"col-md-12\"\n                layout=\"vertical\"\n                initialValues={initialValues}\n              >\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Title\"\n                      name=\"risk_opportunities_title\"\n                      rules={[\n                        { required: true, message: \"Please input Title!\" },\n                      ]}\n                    >\n                      <Input placeholder=\"Title\" />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Select Files\"\n                      rules={[\n                        { required: true, message: \"Please input File!\" },\n                      ]}\n                    >\n                      <input\n                        id=\"file\"\n                        type=\"file\"\n                        name=\"file\"\n                        accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                        onChange={(e) => this.handleUpload(e)}\n                      />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"controls\">\n                  <Form.Item>\n                    <div className=\"x-btn-flex\">\n                      <Button\n                        type=\"link\"\n                        onClick={this.resetForm2}\n                        className=\"float-right\"\n                        danger\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        className=\"float-right\"\n                      >\n                        Upload\n                      </Button>\n                    </div>\n                  </Form.Item>\n                </div>\n              </Form>\n            </>\n          )}\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { riskopportunities, units, unittype, members } = state;\n  return { riskopportunities, units, unittype, members };\n}\nconst actionCreators = {\n  //forgotPassword: actions.forgotPassword\n  GetRiskOpportunities: actions.GetRiskOpportunities,\n  AddRiskOpportunities: actions.AddRiskOpportunities,\n  DeleteRiskOpportunities: actions.DeleteRiskOpportunities,\n  EditRiskOpportunities: actions.EditRiskOpportunities,\n  DeleteRiskOpportunitiesAttachments:\n    actions.DeleteRiskOpportunitiesAttachments,\n  SelectMembers: actions.SelectMembers,\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n};\nconst connectedRiskAndOpportunities = connect(\n  mapState,\n  actionCreators\n)(RiskAndOpportunities);\nexport { connectedRiskAndOpportunities as RiskAndOpportunities };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ComplianceObligations/ComplianceObligations.js",["448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  Form,\n  Select,\n  Button,\n  Breadcrumb,\n  Card,\n  Collapse,\n  Spin,\n  Table,\n  Popconfirm,\n  Upload,\n  message,\n  Input,\n  Drawer,\n  Pagination,\n  DatePicker,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  UploadOutlined,\n  DeleteFilled,\n  EditFilled,\n  LoadingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { actions } from \"../../../actions/actions\";\nimport moment from \"moment\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n//import reqwest from 'reqwest';\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst dateTimeFormat = \"DD-MM-YYYY\";\n\nclass ComplianceObligations extends React.Component {\n  formRef = React.createRef();\n  formRef1 = React.createRef();\n  formRef2 = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      openeditattachment: false,\n      file: [],\n      baseValue: \"\",\n      uploading: false,\n      complianceObligationsData: [],\n      EditComplianceObligationsData: [],\n      currentOffset: 0,\n      totalCount: \"\",\n      FilterAction: false,\n      unitsData: [],\n      unitTypeData: [],\n      membersData: [],\n      currentMembers: \"\",\n      currentUnits: \"\",\n      currentUnitType: \"\",\n      fCurrentUnits: \"\",\n      fCurrentUnitType: \"\",\n      val: {},\n      currentUnitandTypeInitialValue: \"\",\n      changeLocationType: false,\n    };\n  }\n\n  componentDidMount() {\n    const { currentOffset } = this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    {\n      currentUserRollId == 3\n        ? this.setState({\n            userRoleSubAdmin: true,\n          })\n        : this.setState({\n            userRoleSubAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        fCurrentUnits: user.unit_id,\n        fCurrentUnitType: user.unit_type,\n        currentUnitandTypeInitialValue: {\n          currentUnitType: user.unit_type,\n          currentUnitName: user.unit_id,\n        },\n      },\n      this.ActionRoleBased\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let complianceObligationsStatus =\n        this.props.complianceobligations.getstatus;\n      let membersStatus = this.props.members.selectstatus;\n      let unitsStatus = this.props.units.status;\n      let unittypeStatus = this.props.unittype.status;\n      {\n        complianceObligationsStatus == \"success\"\n          ? this.setState({\n              complianceObligationsData:\n                this.props.complianceobligations.items.data,\n              totalCount: this.props.complianceobligations.items.total_count,\n            })\n          : this.setState({\n              complianceObligationsData: [],\n              totalCount: 0,\n            });\n      }\n      {\n        membersStatus == \"success\"\n          ? this.setState({\n              membersData: this.props.members.items.data,\n            })\n          : this.setState({\n              membersData: [],\n            });\n      }\n      {\n        unittypeStatus == \"success\"\n          ? this.setState({\n              unitTypeData: this.props.unittype.items.data,\n            })\n          : this.setState({\n              unitTypeData: [],\n            });\n      }\n      {\n        unitsStatus == \"success\"\n          ? this.setState({\n              unitsData: this.props.units.items.data,\n            })\n          : this.setState({\n              unitsData: [],\n            });\n      }\n    }\n  }\n\n  ActionRoleBased = () => {\n    const { currentUnits, currentOffset, currentUnitType } = this.state;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetComplianceObligations(args);\n    let argss = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(argss);\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n  };\n\n  pageOnChange = (pagenumber) => {\n    const { currentUnits, FilterAction, val, fCurrentUnits } = this.state;\n    let x = pagenumber - 1;\n    let offset = x * 20;\n    let args;\n    if (FilterAction) {\n      args = val + `&offset=${offset}&unit_id=${fCurrentUnits}`;\n    } else {\n      args = `offset=${offset}&unit_id=${currentUnits}`;\n    }\n    this.props.GetComplianceObligations(args);\n  };\n\n  createComplianceObligations = (value) => {\n    const { baseValue, currentOffset, currentUnits, currentUnitType } =\n      this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.AddComplianceObligations(\n      value.title,\n      baseValue,\n      currentUnits,\n      currentUnitType,\n      args\n    );\n    this.formRef.current.resetFields();\n    this.formRef1.current.resetFields();\n    this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n    this.setState({\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      FilterAction: false,\n    });\n  };\n\n  DeleteAttachment = (record) => {\n    const { currentOffset, currentUnits } = this.state;\n    const id = record.compliance_obligations_id;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.formRef1.current.resetFields();\n    this.setState({\n      FilterAction: false,\n    });\n    this.props.DeleteComplianceObligations(id, args);\n  };\n\n  openEditAttachment = (record) => {\n    const { currentOffset, currentUnits } = this.state;\n    this.setState({ openeditattachment: true });\n    this.setState({ complianceId: record.compliance_obligations_id });\n    this.setState({ EditComplianceObligationsData: record });\n    let args = `compliance_obligations_id=${record.compliance_obligations_id}&offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetComplianceObligations(args);\n    console.log(record);\n  };\n\n  closeEditAttachment = () => {\n    const { currentOffset, currentUnits } = this.state;\n    this.setState({ openeditattachment: false });\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetComplianceObligations(args);\n    window.location.reload();\n  };\n\n  handleUpload = (e) => {\n    var fileInput = document.getElementById(\"file\");\n    var filePath = fileInput.value;\n    var fileType = /(\\.jpg|\\.jpeg|\\.png|\\.doc|\\.xls|\\.docx|\\.pdf|\\.xlsx)$/i;\n    if (!fileType.exec(filePath)) {\n      alert(\"Invalid file type\");\n      fileInput.value = \"\";\n      window.location.reload();\n      return false;\n    } else {\n      const file = e.target.files;\n      if (file && file[0]) {\n        this.setState({ file: file[0] });\n        this.getBase64(file[0]);\n      }\n    }\n  };\n\n  getBase64 = (file) => {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      let val = e.target.result;\n      this.setState({ baseValue: val });\n    };\n    reader.onerror = function (error) {\n      console.log(\"Error\", error);\n    };\n  };\n\n  handleUploads = (e) => {\n    var fileInput = document.getElementById(\"file\");\n    var filePath = fileInput.value;\n    var fileType = /(\\.jpg|\\.jpeg|\\.png|\\.doc|\\.xls|\\.docx|\\.pdf|\\.xlsx)$/i;\n    if (!fileType.exec(filePath)) {\n      alert(\"Invalid file type\");\n      fileInput.value = \"\";\n      window.location.reload();\n      return false;\n    } else {\n      const file = e.target.files;\n      if (file && file[0]) {\n        this.setState({ file: file[0] });\n        this.getBase64(file[0]);\n      }\n    }\n  };\n\n  getBase64 = (file) => {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      let val = e.target.result;\n      this.setState({ baseValue: val });\n    };\n    reader.onerror = function (error) {\n      console.log(\"Error\", error);\n    };\n  };\n\n  download = (file) => {\n    const link = document.createElement(\"a\");\n    link.href = file;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  updateComplianceObligations = (value) => {\n    const { complianceId, baseValue, currentOffset, currentUnits } = this.state;\n    let args = `compliance_obligations_id=${complianceId}&offset=${currentOffset}&unit_id=${currentUnits}`;\n    console.log(value);\n    this.props.EditComplianceObligations(\n      complianceId,\n      value.compliance_obligations_title,\n      baseValue\n    );\n    this.props.GetComplianceObligations(args);\n  };\n\n  DeleteComplianceAttachments = (data) => {\n    const { currentOffset, currentUnits } = this.state;\n    let id = data.compliance_obligations_attachments_id;\n    let args = `compliance_obligations_id=${id}&ffset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.DeleteComplianceObligationsAttachment(id, args);\n  };\n  resetForm = () => {\n    this.formRef.current.resetFields();\n  };\n  resetForm1 = () => {\n    const { currentOffset } = this.state;\n    this.formRef1.current.resetFields();\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.GetComplianceObligations(args);\n    this.setState({\n      FilterAction: false,\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      date1: \"\",\n      date2: \"\",\n      currentMembers: \"\",\n      fCurrentUnits: user.unit_id,\n      fCurrentUnitType: user.unit_type,\n      changeLocationType: false,\n    });\n  };\n  resetForm2 = () => {\n    this.formRef2.current.resetFields();\n  };\n\n  getFilterParams = (taskFilters) => {\n    const { currentOffset } = this.state;\n    let filterParams = \"\";\n    for (let i in taskFilters) {\n      let item = taskFilters[i];\n      if (item && item.length > 0) {\n        if (filterParams != \"\") {\n          filterParams += \"&\";\n        }\n        filterParams += `${i}=${item.toString()}`;\n      }\n    }\n    return filterParams;\n  };\n\n  filterTable = (fieldsValue) => {\n    const { date1, date2, currentMembers, fCurrentUnits, fCurrentUnitType } =\n      this.state;\n    const value = {\n      ...fieldsValue,\n      from_date: date1,\n      to_date: date2,\n      created_by: currentMembers.toString(),\n      unit_type: fCurrentUnitType,\n      unit_id: fCurrentUnits,\n    };\n    let updatedValue = this.getFilterParams(value);\n    this.setState({ val: updatedValue, FilterAction: true });\n    this.filter();\n  };\n\n  filter = () => {\n    const { val, currentOffset, fCurrentUnits } = this.state;\n    let updatedValue =\n      val + `&offset=${currentOffset}&unit_id=${fCurrentUnits}`;\n    this.props.GetComplianceObligations(updatedValue);\n  };\n\n  fromDateChanged = (date, dateString) => {\n    this.setState({ date1: dateString });\n  };\n  toDateChanged = (date, dateString) => {\n    this.setState({ date2: dateString });\n  };\n\n  handleMembers = (value) => {\n    this.setState({\n      currentMembers: value,\n    });\n  };\n\n  HandleLocationTypeChange = (value) => {\n    this.setState({ currentUnitType: value, currentUnits: \"\" });\n    this.props.SelectUnits(value);\n    this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n  };\n\n  HandleUnitsChange = (value) => {\n    this.setState({\n      currentUnits: value,\n    });\n  };\n\n  HandleLocationTypeChanges = (value) => {\n    this.setState({\n      fCurrentUnitType: value,\n      unit_id: \"\",\n      currentUnitandTypeInitialValue: null,\n      changeLocationType: true,\n    });\n    this.props.SelectUnits(value);\n    this.formRef1.current.setFieldsValue({ unit_id: undefined });\n    if (this.formRef.current != null) {\n      this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n      this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    }\n  };\n\n  HandleUnitsChanges = (value) => {\n    this.setState({\n      fCurrentUnits: value,\n    });\n  };\n\n  render() {\n    const {\n      userRoleSuperAdmin,\n      userRoleSubAdmin,\n      openeditattachment,\n      complianceObligationsData,\n      EditComplianceObligationsData,\n      membersData,\n      unitsData,\n      unitTypeData,\n      currentUnitType,\n      currentUnits,\n      currentUnitandTypeInitialValue,\n      changeLocationType,\n    } = this.state;\n    const { complianceobligations } = this.props;\n\n    const columns = [\n      {\n        title: \"Title\",\n        dataIndex: \"compliance_obligations_title\",\n        key: \"compliance_obligations_title\",\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"created_on\",\n        key: \"created_on\",\n        render: (created_on) => {\n          return <p>{moment(created_on).format(dateTimeFormat)}</p>;\n        },\n      },\n      {\n        title: \"Attachments\",\n        dataIndex: \"compliance_obligations_attachments\",\n        key: \"compliance_obligations_attachments\",\n        render: (compliance_obligations_attachments, i) => (\n          <span>\n            {compliance_obligations_attachments.map((attachment) => {\n              return (\n                <p key={i}>\n                  {attachment.compliance_obligations_attachments_filename}\n                </p>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        render: (text, record) => (\n          <div>\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n              onClick={() => {\n                this.openEditAttachment(record);\n              }}\n            >\n              <EditFilled />\n            </Button>\n            <Popconfirm\n              title=\"Are you sure to delete this Meeting?\"\n              placement=\"topRight\"\n              onConfirm={() => {\n                this.DeleteAttachment(record);\n              }}\n              onCancel={this.CancelDeleteMeeting}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                danger\n              >\n                <DeleteFilled />\n              </Button>\n            </Popconfirm>\n          </div>\n        ),\n      },\n    ];\n\n    const column = [\n      {\n        title: \"Attachments\",\n        dataIndex: \"compliance_obligations_attachments\",\n        key: \"compliance_obligations_attachments\",\n        width: \"150px\",\n        render: (compliance_obligations_attachments) => (\n          <span>\n            {compliance_obligations_attachments.map((attachment) => {\n              return (\n                <p>{attachment.compliance_obligations_attachments_filename}</p>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"compliance_obligations_attachments\",\n        key: \"compliance_obligations_attachments\",\n        width: \"150px\",\n        render: (compliance_obligations_attachments) => (\n          <span>\n            {compliance_obligations_attachments.map((attachment) => {\n              return (\n                <p>{moment(attachment.created_on).format(dateTimeFormat)}</p>\n              );\n            })}\n          </span>\n        ),\n      },\n\n      {\n        title: \"Actions\",\n        dataIndex: \"compliance_obligations_attachments\",\n        key: \"compliance_obligations_attachments\",\n        width: \"100px\",\n        render: (compliance_obligations_attachments) => (\n          <div className=\"actions\">\n            {compliance_obligations_attachments.map((attachment) => {\n              return (\n                <div className=\"needsactions\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\" ant-btn-no-bg x-button-secondary-no-bg mr-2 mb-2 p-1 only-icon float-left\"\n                    onClick={(e) =>\n                      this.download(\n                        attachment.compliance_obligations_attachments_filepath\n                      )\n                    }\n                  >\n                    <FontAwesomeIcon icon=\"download\" />\n                  </Button>\n                  <Popconfirm\n                    title=\"Are you sure to delete this Attachments?\"\n                    placement=\"topRight\"\n                    onConfirm={() => {\n                      this.DeleteComplianceAttachments(attachment);\n                    }}\n                    onCancel={this.CancelDeleteMeeting}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      type=\"primary\"\n                      size=\"small\"\n                      className=\"only-icon float-left ant-btn-no-bg mr-2 mb-2 p-1 ant-btn-dangerous-no-bg\"\n                      danger\n                    >\n                      <DeleteFilled />\n                    </Button>\n                  </Popconfirm>\n                </div>\n              );\n            })}\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-she-meeting\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Compliance Obligations</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/managementdashboard\">\n                <Breadcrumb.Item>\n                  <span>SHE Management</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Compliance Obligations</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n              <Collapse expandIconPosition=\"right\">\n                <Panel header=\"Upload Documents\" key=\"1\">\n                  <Card bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <Form\n                        layout=\"vertical\"\n                        autoComplete=\"off\"\n                        className=\"w-100\"\n                        size=\"large\"\n                        ref={this.formRef}\n                        onFinish={this.createComplianceObligations}\n                        // initialValues={{\n                        //   currentUnitType: currentUnitType,\n                        //   currentUnitName: currentUnits,\n                        // }}\n                        initialValues={currentUnitandTypeInitialValue}\n                      >\n                        {userRoleSuperAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Location Type\"\n                                  name=\"currentUnitType\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Location Type!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleLocationTypeChange}\n                                  >\n                                    {unitTypeData &&\n                                      unitTypeData.map((unittype, index) => (\n                                        <option value={unittype} key={index}>\n                                          {unittype}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnitName\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSuperAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\">\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnitName\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSubAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Title\"\n                              name=\"title\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Title!\",\n                                },\n                              ]}\n                            >\n                              <Input placeholder=\"Title\" />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Select Files\"\n                              name=\"selectfiles\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Attachments!\",\n                                },\n                              ]}\n                            >\n                              <input\n                                id=\"file\"\n                                type=\"file\"\n                                name=\"file\"\n                                accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                                onChange={(e) => this.handleUploads(e)}\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item>\n                              <div className=\"x-btn-flex\">\n                                <Button\n                                  type=\"link\"\n                                  className=\"float-right\"\n                                  danger\n                                  onClick={this.resetForm}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                  disabled={\n                                    complianceobligations.completeloading\n                                  }\n                                >\n                                  Save\n                                </Button>\n                                {complianceobligations.completeloading ? (\n                                  <div className=\"x-ant-icon\">\n                                    <SyncOutlined spin />\n                                  </div>\n                                ) : (\n                                  \"\"\n                                )}\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                      </Form>\n                    </div>\n                  </Card>\n                </Panel>\n              </Collapse>\n            </div>\n          </div>\n          <div className=\"row x-row  mt-4\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of Documents\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"x-table-filters\">\n                    <Form\n                      layout=\"vertical\"\n                      autoComplete=\"off\"\n                      ref={this.formRef1}\n                      className=\"w-100\"\n                      size=\"large\"\n                      onFinish={this.filterTable}\n                    >\n                      <div className=\"x-controls-section\">\n                        {userRoleSuperAdmin ? (\n                          <div className=\"x-controls-section x-mr-1\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_type\">\n                                <Select\n                                  placeholder=\"Location Type\"\n                                  onChange={this.HandleLocationTypeChanges}\n                                >\n                                  {unitTypeData &&\n                                    unitTypeData.map((unittype, index) => (\n                                      <option value={unittype} key={index}>\n                                        {unittype}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item\n                                name=\"unit_id\"\n                                rules={\n                                  changeLocationType\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Unit!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSuperAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <div className=\"x-controls-section\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_id\">\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSubAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <Form.Item name=\"created_by\">\n                            <div className=\"x-controls\">\n                              <Select\n                                placeholder=\"Created by\"\n                                onChange={this.handleMembers}\n                              >\n                                {membersData &&\n                                  membersData.map((member) => (\n                                    <option\n                                      key={member.member_id}\n                                      value={member.member_id}\n                                    >\n                                      {member.member_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </div>\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"compliance_obligations_title\">\n                              <div className=\"x-controls\">\n                                <Input placeholder=\"Title\" />\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"from_date\">\n                              <DatePicker\n                                onChange={this.fromDateChanged}\n                                placeholder=\"From Date\"\n                                format={dateTimeFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"to_date\">\n                              <DatePicker\n                                onChange={this.toDateChanged}\n                                placeholder=\"To Date\"\n                                format={dateTimeFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"control\">\n                          <div className=\"x-controls x-btn-flex\">\n                            <Button\n                              type=\"primary\"\n                              size=\"small\"\n                              htmlType=\"submit\"\n                              disabled={complianceobligations.getloading}\n                            >\n                              Filter\n                            </Button>\n                            {complianceobligations.getloading ? (\n                              <div className=\"x-ant-icon\">\n                                <SyncOutlined spin />\n                              </div>\n                            ) : (\n                              \"\"\n                            )}\n                            <Button\n                              type=\"link\"\n                              htmlType=\"reset\"\n                              danger\n                              onClick={this.resetForm1}\n                            >\n                              Reset\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Form>\n                  </div>\n                  <div className=\"table-responsive\">\n                    {complianceobligations.getstatus == \"request\" ||\n                    complianceobligations.completeloading ||\n                    complianceobligations.editloading ||\n                    complianceobligations.statusloading ||\n                    complianceobligations.deleteloading ? (\n                      <div>\n                        <Spin indicator={antIcon} />\n                      </div>\n                    ) : (\n                      <div>\n                        <Table\n                          dataSource={complianceObligationsData}\n                          columns={columns}\n                          pagination={false}\n                        />\n                      </div>\n                    )}\n                    <Pagination\n                      total={this.state.totalCount}\n                      onChange={this.pageOnChange}\n                      defaultCurrent={1}\n                      defaultPageSize={20}\n                    />\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <Drawer\n          title=\"Edit Documents\"\n          placement=\"right\"\n          onClose={this.closeEditAttachment}\n          visible={openeditattachment}\n        >\n          {complianceobligations.getstatus == \"request\" ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <>\n              <Table dataSource={complianceObligationsData} columns={column} />\n\n              <Form\n                name=\"edit_attachments\"\n                autoComplete=\"off\"\n                ref={this.formRef1}\n                onFinish={this.updateComplianceObligations}\n                className=\"col-md-12\"\n                layout=\"vertical\"\n                initialValues={EditComplianceObligationsData}\n              >\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Title\"\n                      name=\"compliance_obligations_title\"\n                      rules={[\n                        { required: true, message: \"Please input Title!\" },\n                      ]}\n                    >\n                      <Input placeholder=\"Title\" />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item label=\"Select Files\" name=\"selectfiles\">\n                      <input\n                        id=\"file\"\n                        type=\"file\"\n                        name=\"file\"\n                        accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                        onChange={(e) => this.handleUpload(e)}\n                      />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"controls\">\n                  <Form.Item>\n                    <div className=\"x-btn-flex\">\n                      <Button\n                        type=\"link\"\n                        className=\"float-right\"\n                        danger\n                        onClick={this.resetForm2}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        className=\"float-right\"\n                      >\n                        Upload\n                      </Button>\n                    </div>\n                  </Form.Item>\n                </div>\n              </Form>\n            </>\n          )}\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { complianceobligations, units, unittype, members } = state;\n  return { complianceobligations, units, unittype, members };\n}\nconst actionCreators = {\n  //forgotPassword: actions.forgotPassword\n  GetComplianceObligations: actions.GetComplianceObligations,\n  AddComplianceObligations: actions.AddComplianceObligations,\n  EditComplianceObligations: actions.EditComplianceObligations,\n  DeleteComplianceObligations: actions.DeleteComplianceObligations,\n  DeleteComplianceObligationsAttachment:\n    actions.DeleteComplianceObligationsAttachment,\n  SelectMembers: actions.SelectMembers,\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n};\nconst connectedComplianceObligations = connect(\n  mapState,\n  actionCreators\n)(ComplianceObligations);\nexport { connectedComplianceObligations as ComplianceObligations };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ResourceRoleResponsibility/ResourceRoleResponsibility.js",["472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  Form,\n  Select,\n  Button,\n  Breadcrumb,\n  Card,\n  Collapse,\n  Upload,\n  message,\n  Input,\n  Drawer,\n  Spin,\n  Table,\n  Popconfirm,\n  Pagination,\n  DatePicker,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  UploadOutlined,\n  DeleteFilled,\n  EditFilled,\n  LoadingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { actions } from \"../../../actions/actions\";\nimport moment from \"moment\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n//import reqwest from 'reqwest';\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst dateTimeFormat = \"DD-MM-YYYY\";\n\nclass ResourceRoleResponsibility extends React.Component {\n  formRef = React.createRef();\n  formRef1 = React.createRef();\n  formRef2 = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      openeditattachment: false,\n      file: [],\n      baseValue: \"\",\n      uploading: false,\n      rrraaData: [],\n      currentOffset: 0,\n      rrraaId: \"\",\n      initialValues: [],\n      totalCount: \"\",\n      FilterAction: false,\n      membersData: [],\n      unitsData: [],\n      unitTypeData: [],\n      currentMembers: \"\",\n      currentUnits: \"\",\n      currentUnitType: \"\",\n      fCurrentUnits: \"\",\n      fCurrentUnitType: \"\",\n      currentUnitandTypeInitialValue: \"\",\n      changeLocationType: false,\n    };\n  }\n\n  componentDidMount() {\n    const { currentOffset } = this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    {\n      currentUserRollId == 3\n        ? this.setState({\n            userRoleSubAdmin: true,\n          })\n        : this.setState({\n            userRoleSubAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        fCurrentUnits: user.unit_id,\n        fCurrentUnitType: user.unit_type,\n        currentUnitandTypeInitialValue: {\n          currentUnitType: user.unit_type,\n          currentUnitName: user.unit_id,\n        },\n      },\n      this.ActionRoleBased\n    );\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let rrraaStatus = this.props.rrraa.getstatus;\n      let membersStatus = this.props.members.selectstatus;\n      let unitsStatus = this.props.units.status;\n      let unittypeStatus = this.props.unittype.status;\n      {\n        rrraaStatus == \"success\"\n          ? this.setState({\n              rrraaData: this.props.rrraa.items.data,\n              totalCount: this.props.rrraa.items.total_count,\n            })\n          : this.setState({\n              rrraaData: [],\n              totalCount: 0,\n            });\n      }\n      {\n        membersStatus == \"success\"\n          ? this.setState({\n              membersData: this.props.members.items.data,\n            })\n          : this.setState({\n              membersData: [],\n            });\n      }\n      {\n        unittypeStatus == \"success\"\n          ? this.setState({\n              unitTypeData: this.props.unittype.items.data,\n            })\n          : this.setState({\n              unitTypeData: [],\n            });\n      }\n      {\n        unitsStatus == \"success\"\n          ? this.setState({\n              unitsData: this.props.units.items.data,\n            })\n          : this.setState({\n              unitsData: [],\n            });\n      }\n    }\n  }\n\n  ActionRoleBased = () => {\n    const { currentUnits, currentOffset, currentUnitType } = this.state;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetRRRAA(args);\n    let argss = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(argss);\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n  };\n\n  pageOnChange = (pagenumber) => {\n    const { currentUnits, FilterAction, val, fCurrentUnits } = this.state;\n    let x = pagenumber - 1;\n    let offset = x * 20;\n    let args;\n    if (FilterAction) {\n      args = val + `&offset=${offset}&unit_id=${fCurrentUnits}`;\n    } else {\n      args = `offset=${offset}&unit_id=${currentUnits}`;\n    }\n    this.props.GetRRRAA(args);\n  };\n\n  openEditAttachment = (record) => {\n    const { currentOffset, currentUnits } = this.state;\n    console.log(record);\n    this.setState({ openeditattachment: true });\n    this.setState({ rrraaId: record.rrr_aa_id });\n    let args = `offset=${currentOffset}&rrr_aa_id=${record.rrr_aa_id}&unit_id=${currentUnits}`;\n    this.props.GetRRRAA(args);\n    this.setState({ initialValues: record });\n  };\n  closeEditAttachment = () => {\n    const { currentOffset, currentUnits } = this.state;\n    this.setState({ openeditattachment: false });\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetRRRAA(args);\n    window.location.reload();\n  };\n\n  download = (file) => {\n    const link = document.createElement(\"a\");\n    link.href = file;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  handleUpload(e) {\n    var fileInput = document.getElementById(\"file\");\n    var filePath = fileInput.value;\n    var fileType = /(\\.jpg|\\.jpeg|\\.png|\\.doc|\\.xls|\\.docx|\\.pdf|\\.xlsx)$/i;\n    if (!fileType.exec(filePath)) {\n      alert(\"Invalid file type\");\n      window.location.reload();\n      fileInput.value = \"\";\n      return false;\n    } else {\n      const file = e.target.files;\n      if (file && file[0]) {\n        this.setState({ file: file[0] });\n        this.getBase64(file[0]);\n      }\n    }\n  }\n  getBase64 = (file) => {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      let val = e.target.result;\n      this.setState({ baseValue: val });\n    };\n    reader.onerror = function (error) {\n      console.log(\"Error\", error);\n    };\n  };\n\n  submitRrraa = (value) => {\n    const { baseValue, currentOffset, currentUnits, currentUnitType } =\n      this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.AddRRRAA(\n      value.title,\n      baseValue,\n      currentUnits,\n      currentUnitType,\n      args\n    );\n    this.formRef.current.resetFields();\n    this.formRef1.current.resetFields();\n    this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n    this.setState({\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      FilterAction: false,\n    });\n  };\n\n  resetForm = () => {\n    this.formRef.current.resetFields();\n  };\n  resetForm1 = () => {\n    const { currentOffset } = this.state;\n    this.formRef1.current.resetFields();\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.GetRRRAA(args);\n    this.setState({\n      FilterAction: false,\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      date1: \"\",\n      date2: \"\",\n      currentMembers: \"\",\n      fCurrentUnits: user.unit_id,\n      fCurrentUnitType: user.unit_type,\n      changeLocationType: false,\n    });\n  };\n  resetForm2 = () => {\n    this.formRef2.current.resetFields();\n  };\n\n  DeleteAttachment = (record) => {\n    const { currentOffset, currentUnits } = this.state;\n    const id = record.rrr_aa_id;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.formRef1.current.resetFields();\n    this.setState({\n      FilterAction: false,\n    });\n    this.props.DeleteRRRAA(id, args);\n  };\n\n  CancelDeleteMeeting = () => {\n    console.log(\"Meeting Canceled\");\n  };\n\n  UpdateRrraa = (value) => {\n    const { rrraaId, baseValue, currentOffset, currentUnits } = this.state;\n    let argss = `offset=${currentOffset}&rrr_aa_id=${rrraaId}&unit_id=${currentUnits}`;\n    this.props.EditRRRAA(rrraaId, value.rrr_aa_title, baseValue, argss);\n  };\n\n  DeleterrraaAttachments = (data) => {\n    console.log(data);\n    const { rrraaId, currentOffset, currentUnits } = this.state;\n    const id = data.rrr_aa_attachments_id;\n    let argss = `rrr_aa_id=${rrraaId}&offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.DeleteRRRAAAttachment(id, argss);\n  };\n\n  getFilterParams = (taskFilters) => {\n    const { currentOffset } = this.state;\n    let filterParams = \"\";\n    for (let i in taskFilters) {\n      let item = taskFilters[i];\n      if (item && item.length > 0) {\n        if (filterParams != \"\") {\n          filterParams += \"&\";\n        }\n        filterParams += `${i}=${item.toString()}`;\n      }\n    }\n    return filterParams;\n  };\n\n  filterTable = (fieldsValue) => {\n    const { date1, date2, currentMembers, fCurrentUnits, fCurrentUnitType } =\n      this.state;\n    const value = {\n      ...fieldsValue,\n      from_date: date1,\n      to_date: date2,\n      created_by: currentMembers.toString(),\n      unit_type: fCurrentUnitType,\n      unit_id: fCurrentUnits,\n    };\n    let updatedValue = this.getFilterParams(value);\n    this.setState({ val: updatedValue, FilterAction: true });\n    this.filter();\n  };\n\n  filter = () => {\n    const { val, currentOffset, fCurrentUnits } = this.state;\n    let updatedValue =\n      val + `&offset=${currentOffset}&unit_id=${fCurrentUnits}`;\n    this.props.GetRRRAA(updatedValue);\n  };\n\n  handleMembers = (value) => {\n    this.setState({\n      currentMembers: value,\n    });\n  };\n\n  fromDateChanged = (date, dateString) => {\n    this.setState({ date1: dateString });\n  };\n\n  toDateChanged = (date, dateString) => {\n    this.setState({ date2: dateString });\n  };\n\n  HandleLocationTypeChange = (value) => {\n    this.setState({ currentUnitType: value, currentUnits: \"\" });\n    this.props.SelectUnits(value);\n    this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n  };\n\n  HandleUnitsChange = (value) => {\n    this.setState({\n      currentUnits: value,\n    });\n  };\n\n  HandleLocationTypeChanges = (value) => {\n    this.setState({\n      fCurrentUnitType: value,\n      unit_id: \"\",\n      currentUnitandTypeInitialValue: null,\n      changeLocationType: true,\n    });\n    this.props.SelectUnits(value);\n    this.formRef1.current.setFieldsValue({ unit_id: undefined });\n    if (this.formRef.current != null) {\n      this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n      this.formRef.current.setFieldsValue({ currentUnitType: undefined });\n    }\n  };\n\n  HandleUnitsChanges = (value) => {\n    this.setState({\n      fCurrentUnits: value,\n    });\n  };\n\n  render() {\n    const {\n      userRoleSuperAdmin,\n      userRoleSubAdmin,\n      openeditattachment,\n      rrraaData,\n      initialValues,\n      membersData,\n      unitTypeData,\n      unitsData,\n      currentUnitType,\n      currentUnits,\n      currentUnitandTypeInitialValue,\n      changeLocationType,\n    } = this.state;\n    const { rrraa } = this.props;\n\n    const columns = [\n      {\n        title: \"Title\",\n        dataIndex: \"rrr_aa_title\",\n        key: \"rrr_aa_title\",\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"created_on\",\n        key: \"created_on\",\n        render: (created_on) => {\n          return <p>{moment(created_on).format(dateTimeFormat)}</p>;\n        },\n      },\n      {\n        title: \"Attachments\",\n        dataIndex: \"rrr_aa_attachments\",\n        key: \"rrr_aa_attachments\",\n        render: (rrr_aa_attachments, i) => (\n          <span>\n            {rrr_aa_attachments.map((attachment) => {\n              return <p key={i}>{attachment.rrr_aa_attachments_filename}</p>;\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        render: (text, record) => (\n          <div>\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n              onClick={() => {\n                this.openEditAttachment(record);\n              }}\n            >\n              <EditFilled />\n            </Button>\n            <Popconfirm\n              title=\"Are you sure to delete this Meeting?\"\n              placement=\"topRight\"\n              onConfirm={() => {\n                this.DeleteAttachment(record);\n              }}\n              onCancel={this.CancelDeleteMeeting}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                danger\n              >\n                <DeleteFilled />\n              </Button>\n            </Popconfirm>\n          </div>\n        ),\n      },\n    ];\n\n    const column = [\n      {\n        title: \"Attachments\",\n        dataIndex: \"rrr_aa_attachments\",\n        key: \"rrr_aa_attachments\",\n        width: \"150px\",\n        render: (rrr_aa_attachments) => (\n          <span>\n            {rrr_aa_attachments.map((attachment) => {\n              return <p>{attachment.rrr_aa_attachments_filename}</p>;\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"rrr_aa_attachments\",\n        key: \"rrr_aa_attachments\",\n        width: \"150px\",\n        render: (rrr_aa_attachments) => (\n          <span>\n            {rrr_aa_attachments.map((attachment) => {\n              return (\n                <p>{moment(attachment.created_on).format(dateTimeFormat)}</p>\n              );\n            })}\n          </span>\n        ),\n      },\n\n      {\n        title: \"Actions\",\n        dataIndex: \"rrr_aa_attachments\",\n        key: \"rrr_aa_attachments\",\n        width: \"100px\",\n        render: (rrr_aa_attachments) => (\n          <div className=\"actions\">\n            {rrr_aa_attachments.map((attachment) => {\n              return (\n                <div className=\"needsactions\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\" ant-btn-no-bg x-button-secondary-no-bg mr-2 mb-2 p-1 only-icon float-left\"\n                    onClick={(e) =>\n                      this.download(attachment.rrr_aa_attachments_filepath)\n                    }\n                  >\n                    <FontAwesomeIcon icon=\"download\" />\n                  </Button>\n                  <Popconfirm\n                    title=\"Are you sure to delete this Attachments?\"\n                    placement=\"topRight\"\n                    onConfirm={() => {\n                      this.DeleterrraaAttachments(attachment);\n                    }}\n                    onCancel={this.CancelDeleteMeeting}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      type=\"primary\"\n                      size=\"small\"\n                      className=\"only-icon float-left ant-btn-no-bg mr-2 mb-2 p-1 ant-btn-dangerous-no-bg\"\n                      danger\n                    >\n                      <DeleteFilled />\n                    </Button>\n                  </Popconfirm>\n                </div>\n              );\n            })}\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-she-meeting\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Resource Role Responsibility Accountability And Authority</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/managementdashboard\">\n                <Breadcrumb.Item>\n                  <span>SHE Management</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>\n                Resource Role Responsibility Accountability And Authority\n              </Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n              <Collapse expandIconPosition=\"right\">\n                <Panel header=\"Upload Documents\" key=\"1\">\n                  <Card bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <Form\n                        layout=\"vertical\"\n                        ref={this.formRef}\n                        autoComplete=\"off\"\n                        className=\"w-100\"\n                        size=\"large\"\n                        onFinish={this.submitRrraa}\n                        // initialValues={{\n                        //   currentUnitType: currentUnitType,\n                        //   currentUnitName: currentUnits,\n                        // }}\n                        initialValues={currentUnitandTypeInitialValue}\n                      >\n                        {userRoleSuperAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Location Type\"\n                                  name=\"currentUnitType\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Location Type!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleLocationTypeChange}\n                                  >\n                                    {unitTypeData &&\n                                      unitTypeData.map((unittype, index) => (\n                                        <option value={unittype} key={index}>\n                                          {unittype}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnitName\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSuperAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\">\n                                <Form.Item\n                                  label=\"Select Unit\"\n                                  name=\"currentUnitName\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please input Unit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    onChange={this.HandleUnitsChange}\n                                    disabled={\n                                      !userRoleSubAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </>\n                        ) : null}\n\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Title\"\n                              name=\"title\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Title!\",\n                                },\n                              ]}\n                            >\n                              <Input placeholder=\"Title\" />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Select Files\"\n                              name=\"selectfiles\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Title!\",\n                                },\n                              ]}\n                            >\n                              <input\n                                id=\"file\"\n                                type=\"file\"\n                                name=\"file\"\n                                accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                                onChange={(e) => this.handleUpload(e)}\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item>\n                              <div className=\"x-btn-flex\">\n                                <Button\n                                  type=\"link\"\n                                  className=\"float-right\"\n                                  danger\n                                  onClick={this.resetForm}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                  disabled={rrraa.completestatus}\n                                >\n                                  Save\n                                </Button>\n                                {rrraa.completestatus ? (\n                                  <div className=\"x-ant-icon\">\n                                    <SyncOutlined spin />\n                                  </div>\n                                ) : (\n                                  \"\"\n                                )}\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                      </Form>\n                    </div>\n                  </Card>\n                </Panel>\n              </Collapse>\n            </div>\n          </div>\n          <div className=\"row x-row  mt-4\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of Documents\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"x-table-filters\">\n                    <Form\n                      layout=\"vertical\"\n                      autoComplete=\"off\"\n                      ref={this.formRef1}\n                      className=\"w-100\"\n                      size=\"large\"\n                      onFinish={this.filterTable}\n                    >\n                      <div className=\"x-controls-section\">\n                        {userRoleSuperAdmin ? (\n                          <div className=\"x-controls-section x-mr-1\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_type\">\n                                <Select\n                                  placeholder=\"Location Type\"\n                                  onChange={this.HandleLocationTypeChanges}\n                                >\n                                  {unitTypeData &&\n                                    unitTypeData.map((unittype, index) => (\n                                      <option value={unittype} key={index}>\n                                        {unittype}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item\n                                name=\"unit_id\"\n                                rules={\n                                  changeLocationType\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Unit!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSuperAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <div className=\"x-controls-section\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"unit_id\">\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSubAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <Form.Item name=\"created_by\">\n                            <div className=\"x-controls\">\n                              <Select\n                                placeholder=\"Created by\"\n                                onChange={this.handleMembers}\n                              >\n                                {membersData &&\n                                  membersData.map((member) => (\n                                    <option\n                                      key={member.member_id}\n                                      value={member.member_id}\n                                    >\n                                      {member.member_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </div>\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"rrr_aa_title\">\n                              <div className=\"x-controls\">\n                                <Input placeholder=\"Title\" />\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"from_date\">\n                              <DatePicker\n                                onChange={this.fromDateChanged}\n                                placeholder=\"From Date\"\n                                format={dateTimeFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"to_date\">\n                              <DatePicker\n                                onChange={this.toDateChanged}\n                                placeholder=\"To Date\"\n                                format={dateTimeFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"control\">\n                          <div className=\"x-controls x-btn-flex\">\n                            <Button\n                              type=\"primary\"\n                              size=\"small\"\n                              htmlType=\"submit\"\n                              disabled={rrraa.getloading}\n                            >\n                              Filter\n                            </Button>\n                            {rrraa.getloading ? (\n                              <div className=\"x-ant-icon\">\n                                <SyncOutlined spin />\n                              </div>\n                            ) : (\n                              \"\"\n                            )}\n                            <Button\n                              type=\"link\"\n                              htmlType=\"reset\"\n                              danger\n                              onClick={this.resetForm1}\n                            >\n                              Reset\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Form>\n                  </div>\n\n                  <div className=\"table-responsive\">\n                    {rrraa.getloading ||\n                    rrraa.addloading ||\n                    rrraa.deleteloading ? (\n                      <div>\n                        <Spin indicator={antIcon} />\n                      </div>\n                    ) : (\n                      <div>\n                        <Table\n                          dataSource={rrraaData}\n                          columns={columns}\n                          pagination={false}\n                        />\n                      </div>\n                    )}\n                    <Pagination\n                      total={this.state.totalCount}\n                      onChange={this.pageOnChange}\n                      defaultCurrent={1}\n                      defaultPageSize={20}\n                    />\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <Drawer\n          title=\"Edit Documents\"\n          placement=\"right\"\n          onClose={this.closeEditAttachment}\n          visible={openeditattachment}\n        >\n          {rrraa.getstatus == \"request\" ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <>\n              <Table dataSource={rrraaData} columns={column} />\n\n              <Form\n                name=\"edit_attachments\"\n                autoComplete=\"off\"\n                ref={this.formRef1}\n                onFinish={this.UpdateRrraa}\n                className=\"col-md-12\"\n                layout=\"vertical\"\n                initialValues={initialValues}\n              >\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Title\"\n                      name=\"rrr_aa_title\"\n                      rules={[\n                        { required: true, message: \"Please input Title!\" },\n                      ]}\n                    >\n                      <Input placeholder=\"Title\" />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Select Files\"\n                      rules={[\n                        { required: true, message: \"Please input File!\" },\n                      ]}\n                    >\n                      <input\n                        id=\"file\"\n                        type=\"file\"\n                        name=\"file\"\n                        accept=\".jpg,.jpeg,.png .doc, .docx, .pdf,.xls,.xlsx\"\n                        onChange={(e) => this.handleUpload(e)}\n                      />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"controls\">\n                  <Form.Item>\n                    <div className=\"x-btn-flex\">\n                      <Button\n                        type=\"link\"\n                        className=\"float-right\"\n                        danger\n                        onClick={this.resetForm2}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        className=\"float-right\"\n                      >\n                        Upload\n                      </Button>\n                    </div>\n                  </Form.Item>\n                </div>\n              </Form>\n            </>\n          )}\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { rrraa, members, units, unittype } = state;\n  return { rrraa, members, units, unittype };\n}\nconst actionCreators = {\n  //forgotPassword: actions.forgotPassword\n  GetRRRAA: actions.GetRRRAA,\n  AddRRRAA: actions.AddRRRAA,\n  EditRRRAA: actions.EditRRRAA,\n  DeleteRRRAA: actions.DeleteRRRAA,\n  DeleteRRRAAAttachment: actions.DeleteRRRAAAttachment,\n  SelectMembers: actions.SelectMembers,\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n};\nconst connectedResourceRoleResponsibility = connect(\n  mapState,\n  actionCreators\n)(ResourceRoleResponsibility);\nexport { connectedResourceRoleResponsibility as ResourceRoleResponsibility };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Scheduler/Scheduler/Scheduler.js",["495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  DatePicker,\n  Button,\n  Breadcrumb,\n  Card,\n  Checkbox,\n  Input,\n  Space,\n  Collapse,\n  Tabs,\n  Radio,\n  InputNumber,\n  TimePicker,\n  Popconfirm,\n  Switch,\n  Spin,\n  Table,\n  Pagination,\n  Drawer,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  LoadingOutlined,\n  SyncOutlined,\n  EditFilled,\n  DeleteFilled,\n} from \"@ant-design/icons\";\nimport moment from \"moment\";\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst { TabPane } = Tabs;\nconst dateFormat = \"DD-MM-YYYY\";\nconst datetimeFormat = \"DD-MM-YYYY  HH:mm\";\nconst timeFormat = \"HH:mm\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nclass Scheduler extends Component {\n  formRef = React.createRef();\n  formRef1 = React.createRef();\n  editSchedulerForm = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      reminderEmailChecked: false,\n      unitTypeData: [],\n      unitsData: [],\n      currentUnits: \"\",\n      currentUnitType: \"\",\n      membersData: [],\n      schedulerTypeData: [],\n      schedulerMeetingSubTypeData: [],\n      schedulerFrequencyData: [],\n      schedulerDaysData: [],\n      schedulerFrequencyRepeatOnData: [],\n      currentMembers: \"\",\n      agendaData: [],\n      agendaForData: [],\n      auditTypeData: [],\n      auditData: [],\n      currentAgendafor: \"\",\n      currentScheduleDate: \"\",\n      currentAgenda: \"\",\n      showCustomRecurrence: false,\n      customEnds: \"\",\n      customInterval: \"\",\n      customMonthRepeat: \"\",\n      customYearRepeat: \"\",\n      customMonthYearRepeat: \"\",\n      schedulerType: \"\",\n      auditType: \"\",\n      currentOffset: 0,\n      showAudit: false,\n      FilterAction: false,\n      currentSchedulerType: \"\",\n      openEditScheduler: false,\n      fCurrentUnits: \"\",\n      fCurrentUnitType: \"\",\n      currentUnitandTypeInitialValue: \"\",\n      date1: \"\",\n      date2: \"\",\n      status: \"\",\n      changeLocationType: false,\n      editSchedulerData: [],\n    };\n  }\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    {\n      currentUserRollId == 3\n        ? this.setState({\n            userRoleSubAdmin: true,\n          })\n        : this.setState({\n            userRoleSubAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        fCurrentUnits: user.unit_id,\n        fCurrentUnitType: user.unit_type,\n        currentUnitandTypeInitialValue: {\n          unit_type: user.unit_type,\n          unit: user.unit_id,\n        },\n      },\n      this.ActionRoleBased\n    );\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let schedulerStatus = this.props.scheduler.getstatus;\n      let unittypeStatus = this.props.unittype.status;\n      let unitsStatus = this.props.units.status;\n      let membersStatus = this.props.members.selectstatus;\n      let agendaforStatus = this.props.agendafor.status;\n      let agendaStatus = this.props.agenda.status;\n      let schedulerTypeStatus = this.props.schedulertype.status;\n      let schedulerMeetingSubTypeStatus =\n        this.props.schedulermeetingsubtype.status;\n      let schedulerFrequencyStatus = this.props.schedulerfrequency.status;\n      let schedulerDaysStatus = this.props.schedulerdays.status;\n      let schedulerFrequencyRepeatOnStatus =\n        this.props.schedulerfrequencyrepeaton.status;\n      let selectAuditTypeStatus = this.props.selectaudittype.status;\n      let selectauditStatus = this.props.selectaudit.status;\n\n      {\n        schedulerStatus == \"success\"\n          ? this.setState({\n              schedulerData: this.props.scheduler.items.data,\n              totalCount: this.props.scheduler.items.total_count,\n            })\n          : this.setState({\n              schedulerData: [],\n              totalCount: 0,\n            });\n      }\n      {\n        unittypeStatus == \"success\"\n          ? this.setState({\n              unitTypeData: this.props.unittype.items.data,\n            })\n          : this.setState({\n              unitTypeData: [],\n            });\n      }\n      {\n        unitsStatus == \"success\"\n          ? this.setState({\n              unitsData: this.props.units.items.data,\n            })\n          : this.setState({\n              unitsData: [],\n            });\n      }\n      {\n        membersStatus == \"success\"\n          ? this.setState({\n              membersData: this.props.members.items.data,\n            })\n          : this.setState({\n              membersData: [],\n            });\n      }\n      {\n        agendaforStatus == \"success\"\n          ? this.setState({\n              agendaForData: this.props.agendafor.items.data,\n            })\n          : this.setState({\n              agendaForData: [],\n            });\n      }\n      {\n        agendaStatus == \"success\"\n          ? this.setState({\n              agendaData: this.props.agenda.items.data,\n            })\n          : this.setState({\n              agendaData: [],\n            });\n      }\n      {\n        schedulerTypeStatus == \"success\"\n          ? this.setState({\n              schedulerTypeData: this.props.schedulertype.items.data,\n            })\n          : this.setState({\n              schedulerTypeData: [],\n            });\n      }\n\n      {\n        schedulerMeetingSubTypeStatus == \"success\"\n          ? this.setState({\n              schedulerMeetingSubTypeData:\n                this.props.schedulermeetingsubtype.items.data,\n            })\n          : this.setState({\n              schedulerMeetingSubTypeData: [],\n            });\n      }\n\n      {\n        schedulerFrequencyStatus == \"success\"\n          ? this.setState({\n              schedulerFrequencyData: this.props.schedulerfrequency.items.data,\n            })\n          : this.setState({\n              schedulerFrequencyData: [],\n            });\n      }\n\n      {\n        schedulerDaysStatus == \"success\"\n          ? this.setState({\n              schedulerDaysData: this.props.schedulerdays.items.data,\n            })\n          : this.setState({\n              schedulerDaysData: [],\n            });\n      }\n\n      {\n        schedulerFrequencyRepeatOnStatus == \"success\"\n          ? this.setState({\n              schedulerFrequencyRepeatOnData:\n                this.props.schedulerfrequencyrepeaton.items.data,\n            })\n          : this.setState({\n              schedulerFrequencyRepeatOnData: [],\n            });\n      }\n\n      {\n        selectAuditTypeStatus == \"success\"\n          ? this.setState({\n              auditTypeData: this.props.selectaudittype.items.data,\n            })\n          : this.setState({ auditTypeData: [] });\n      }\n\n      {\n        selectauditStatus == \"success\"\n          ? this.setState({ auditData: this.props.selectaudit.items.data })\n          : this.setState({ auditData: [] });\n      }\n    }\n  }\n  ActionRoleBased = () => {\n    const { currentUnits, currentUnitType, currentOffset } = this.state;\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n    let args = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(args);\n    this.props.SelectAgendaFor();\n    this.props.SelectSchedulerType();\n    this.props.SelectSchedulerMeetingSubType();\n    this.props.SelectSchedulerFrequency();\n    this.props.SelectSchedulerDays();\n    this.props.SelectSchedulerFrequencyRepeatOn();\n    this.props.SelectAuditType();\n    let args1 = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    let args2 = `unit_type=${currentUnitType}`;\n    this.props.GetScheduler(args1);\n    this.props.SelectDepartments(args2);\n  };\n\n  pageOnChange = (pagenumber) => {\n    const {\n      currentUnits,\n      FilterAction,\n      currentSchedulerType,\n      val,\n      fCurrentUnits,\n    } = this.state;\n    let x = pagenumber - 1;\n    let offset = x * 20;\n    let args;\n    if (FilterAction) {\n      args = val + `&offset=${offset}&unit_id=${fCurrentUnits}`;\n    } else {\n      args = `offset=${offset}&unit_id=${currentUnits}`;\n    }\n    this.props.GetScheduler(args);\n  };\n\n  // ActionFilter = () => {\n  //   this.setState({ FilterAction: true });\n  //   const { currentOffset, fCurrentUnits, fCurrentUnitType } = this.state;\n  //   let args = `offset=${currentOffset}&unit_id=${fCurrentUnits}&unit_type=${fCurrentUnitType}`;\n  //   this.props.GetScheduler(args);\n  // };\n\n  getFilterParams = (taskFilters) => {\n    let filterParams = \"\";\n    for (let i in taskFilters) {\n      let item = taskFilters[i];\n      if (item && item.length > 0) {\n        if (filterParams != \"\") {\n          filterParams += \"&\";\n        }\n        filterParams += `${i}=${item.toString()}`;\n      }\n    }\n    return filterParams;\n  };\n\n  ActionFilter = (fieldsValue) => {\n    const {\n      currentSchedulerType,\n      fCurrentUnits,\n      fCurrentUnitType,\n      date1,\n      date2,\n      status,\n    } = this.state;\n    const value = {\n      scheduler_fromdate: date1,\n      scheduler_todate: date2,\n      scheduler_type: currentSchedulerType,\n      unit_type: fCurrentUnitType,\n      unit_id: fCurrentUnits,\n      status: status,\n    };\n    let updatedValue = this.getFilterParams(value);\n    this.setState({ val: updatedValue, FilterAction: true });\n    this.filter();\n  };\n\n  filter = () => {\n    const { val, currentOffset, fCurrentUnits } = this.state;\n    let updatedValue =\n      val + `&offset=${currentOffset}&unit_id=${fCurrentUnits}`;\n    this.props.GetScheduler(updatedValue);\n  };\n\n  ActionFilterReset = () => {\n    this.formRef1.current.resetFields();\n    const { currentOffset } = this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.GetScheduler(args);\n    this.setState({\n      FilterAction: false,\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      date1: \"\",\n      date2: \"\",\n      currentSchedulerType: \"\",\n      fCurrentUnits: user.unit_id,\n      fCurrentUnitType: user.unit_type,\n      status: \"\",\n      changeLocationType: false,\n    });\n  };\n\n  FilterSchedulerType = (value) => {\n    this.setState({ currentSchedulerType: value });\n  };\n\n  ActionOpenEditScheduler = () => {\n    const { currentUnits, customInterval } = this.state;\n    if (customInterval == \"Year\") {\n      this.setState({ repeatEveryMaxValue: 1 });\n    }\n    if (customInterval == \"Month\") {\n      this.setState({ repeatEveryMaxValue: 12 });\n    }\n    if (customInterval == \"Week\") {\n      this.setState({ repeatEveryMaxValue: 52 });\n    }\n    if (customInterval == \"Day\") {\n      this.setState({ repeatEveryMaxValue: 365 });\n    }\n    let args = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(args);\n  };\n\n  OpenEditScheduler = (record) => {\n    const { openEditScheduler } = this.state;\n\n    const get_data = record;\n\n    let updated_date;\n    if (record.scheduler_date != null || \"\") {\n      get_data.updated_scheduler_date = moment(record.scheduler_date);\n      updated_date = moment(record.scheduler_date).format(\"DD-MM-YYYY\");\n    } else {\n      get_data.updated_scheduler_date = \"\";\n      updated_date = \"\";\n    }\n\n    let updated_scheduler_frequency_start;\n    if (record.scheduler_frequency_start != null || \"\") {\n      get_data.updated_scheduler_frequency_start = moment(\n        record.scheduler_frequency_start\n      );\n      updated_scheduler_frequency_start = moment(\n        record.scheduler_frequency_start\n      ).format(\"DD-MM-YYYY\");\n    } else {\n      get_data.updated_scheduler_frequency_start = \"\";\n      updated_scheduler_frequency_start = \"\";\n    }\n\n    let updated_scheduler_frequency_year_date;\n    if (record.scheduler_frequency_year_date != null || \"\") {\n      get_data.updated_scheduler_frequency_year_date = moment(\n        record.scheduler_frequency_year_date\n      );\n      updated_scheduler_frequency_year_date = moment(\n        record.scheduler_frequency_year_date\n      ).format(\"DD-MM-YYYY\");\n    } else {\n      get_data.updated_scheduler_frequency_year_date = \"\";\n      updated_scheduler_frequency_year_date = \"\";\n    }\n\n    //updated_scheduler_frequency_end_date\n    let updated_scheduler_frequency_end_date;\n    if (record.scheduler_frequency_end != null || \"\") {\n      if (record.scheduler_frequency_end != \"Never\") {\n        get_data.updated_scheduler_frequency_end_date = moment(\n          record.scheduler_frequency_end\n        );\n        updated_scheduler_frequency_end_date = moment(\n          record.scheduler_frequency_end\n        ).format(\"DD-MM-YYYY\");\n      } else {\n        get_data.updated_scheduler_frequency_end_date = \"\";\n        updated_scheduler_frequency_end_date = \"Never\";\n      }\n    }\n\n    const scheduler_members_data = JSON.parse(\n      \"[\" + record.scheduler_members + \"]\"\n    );\n    get_data.updated_scheduler_members = scheduler_members_data;\n\n    get_data.update_scheduler_time = moment(record.scheduler_time, \"HH:mm:ss\");\n    if (record.scheduler_frequency !== \"specificdate\") {\n      this.setState({ showCustomRecurrence: true });\n    }\n\n    if (record.scheduler_frequency_end != null || \"\") {\n      if (record.scheduler_frequency_end == \"Never\") {\n        get_data.updated_customEnds = \"1\";\n      } else {\n        get_data.updated_customEnds = \"2\";\n      }\n    }\n\n    let updated_remainderEmail_status;\n    if (record.scheduler_reminder != \"Yes\") {\n      updated_remainderEmail_status = false;\n    } else {\n      updated_remainderEmail_status = true;\n    }\n\n    // console.log(\"record *************\");\n    // console.log(record);\n    // console.log(get_data);\n\n    this.setState(\n      {\n        currentUnits: record.unit_id,\n        openEditScheduler: true,\n        editSchedulerData: record,\n        updated_scheduler_id: record.scheduler_id,\n        updated_scheduler_type: record.scheduler_type,\n        updated_scheduler_sub_type: record.scheduler_sub_type,\n        updated_unit_type: record.unit_type,\n        updated_unit_id: record.unit_id,\n        updated_scheduler_frequency: record.scheduler_frequency,\n        currentScheduleDate: updated_date,\n        currentScheduleTime: record.scheduler_time,\n        currentMembers: record.scheduler_members,\n        currentStartDate: updated_scheduler_frequency_start,\n        customInterval: record.scheduler_frequency,\n        customMonthRepeat: record.scheduler_frequency_repeat_on,\n        currentFrequencyYearDate: updated_scheduler_frequency_year_date,\n        customEnds: get_data.updated_customEnds,\n        currentEndDate: updated_scheduler_frequency_end_date,\n        updated_remainderEmail: updated_remainderEmail_status,\n        reminderEmailChecked: updated_remainderEmail_status,\n      },\n      this.ActionOpenEditScheduler,\n      this.ActionCustomInterval\n    );\n  };\n\n  EditScheduleMeeting = (values) => {\n    const {\n      updated_scheduler_id,\n      updated_scheduler_type,\n      updated_scheduler_sub_type,\n      updated_unit_type,\n      updated_unit_id,\n      customInterval,\n      currentScheduleDate,\n      currentScheduleTime,\n      currentMembers,\n      currentStartDate,\n      currentEndDate,\n      customEnds,\n      showCustomRecurrence,\n      currentFrequencyYearDate,\n      updated_remainderEmail,\n    } = this.state;\n\n    //if(customInterval )\n\n    if (customEnds == 1) {\n      values.updated_scheduler_frequency_end = \"Never\";\n    } else {\n      values.updated_scheduler_frequency_end = currentEndDate;\n    }\n\n    if (showCustomRecurrence) {\n      values.updated_scheduler_frequency = customInterval;\n      values.updated_scheduler_date = \"\";\n    } else {\n      values.updated_scheduler_frequency = \"specificdate\";\n      values.updated_scheduler_date = currentScheduleDate;\n    }\n\n    values.scheduler_reminder = updated_remainderEmail;\n    if (values.scheduler_reminder == true) {\n      values.scheduler_reminder = \"Yes\";\n    } else {\n      values.scheduler_reminder = \"\";\n    }\n\n    // console.log(\n    //   \"scheduler_id ******** \" + updated_scheduler_id,\n    //   \"scheduler_type ******** \" + updated_scheduler_type,\n    //   \"scheduler_sub_type ******** \" + updated_scheduler_sub_type,\n    //   \"unit_type ******** \" + updated_unit_type,\n    //   \"unit ******** \" + updated_unit_id,\n    //   \"members ******** \" + currentMembers,\n    //   \"scheduler_frequency ******** \" + values.updated_scheduler_frequency,\n    //   \"scheduler_date ******** \" + values.updated_scheduler_date,\n    //   \"scheduler_time ******** \" + currentScheduleTime,\n    //   \"scheduler_frequency_start ******** \" + currentStartDate,\n    //   \"scheduler_frequency_end ******** \" +\n    //     values.updated_scheduler_frequency_end,\n    //   \"scheduler_frequency_repeat ******** \" +\n    //     values.scheduler_frequency_repeat,\n    //   \"scheduler_frequency_year_date ******** \" + currentFrequencyYearDate,\n    //   \"scheduler_frequency_days ********* \" + values.scheduler_frequency_days,\n    //   \"scheduler_frequency_repeat_on ***********\" +\n    //     values.scheduler_frequency_repeat_on,\n    //   \"scheduler_frequency_date ********* \" + values.scheduler_frequency_date,\n    //   \"scheduler_frequency_weeks ********* \" + values.scheduler_frequency_weeks,\n    //   \"scheduler_reminder ********* \" + values.scheduler_reminder,\n    //   \"values.scheduler_reminder_days ********* \" + values.scheduler_reminder_days\n    // );\n\n    this.props.EditScheduler(\n      updated_scheduler_id,\n      updated_scheduler_type,\n      updated_scheduler_sub_type,\n      updated_unit_type,\n      updated_unit_id,\n      currentMembers,\n      values.updated_scheduler_frequency,\n      values.updated_scheduler_date,\n      currentScheduleTime,\n      currentStartDate,\n      values.updated_scheduler_frequency_end,\n      values.scheduler_frequency_repeat,\n      currentFrequencyYearDate,\n      values.scheduler_frequency_days,\n      values.scheduler_frequency_repeat_on,\n      values.scheduler_frequency_date,\n      values.scheduler_frequency_weeks,\n      values.scheduler_reminder,\n      values.scheduler_reminder_days\n    );\n  };\n\n  ActionresetEditSchedulerForm = () => {\n    this.editSchedulerForm.current.resetFields();\n  };\n\n  resetEditSchedulerForm = () => {\n    this.setState(\n      {\n        editSchedulerData: \"\",\n      },\n      this.ActionresetEditSchedulerForm\n    );\n  };\n\n  CloseEditScheduler = () => {\n    const { openEditScheduler } = this.state;\n    this.setState({\n      editSchedulerData: [],\n      openEditScheduler: false,\n    });\n    window.location.reload();\n  };\n\n  DeleteScheduler = (record) => {\n    const { currentOffset, currentUnits, FilterAction, currentSchedulerType } =\n      this.state;\n\n    //let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    let args;\n    if (FilterAction) {\n      args = `offset=${currentOffset}&unit_id=${currentUnits}&scheduler_type=${currentSchedulerType}`;\n    } else {\n      args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    }\n    this.props.DeleteScheduler(record.scheduler_id, args);\n  };\n\n  HandleStatus = (record) => {\n    const { currentOffset, currentUnits, FilterAction, currentSchedulerType } =\n      this.state;\n    let status = \"\";\n    if (record.status == \"A\") {\n      status = \"D\";\n    } else {\n      status = \"A\";\n    }\n    let args;\n    if (FilterAction) {\n      args = `offset=${currentOffset}&unit_id=${currentUnits}&scheduler_type=${currentSchedulerType}`;\n    } else {\n      args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    }\n    this.props.StatusScheduler(record.scheduler_id, status, args);\n  };\n  HandleSchedulerType = (value) => {\n    this.formRef.current.setFieldsValue({ scheduler_sub_type: undefined });\n    this.setState({\n      schedulerType: value,\n      //auditType: \"\",\n      showAudit: false,\n    });\n  };\n  ActionUnitType = () => {\n    const { currentUnitType, currentUnits } = this.state;\n    this.props.SelectUnits(currentUnitType);\n    let args = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(args);\n  };\n  ActionUnits = () => {\n    const { currentUnits } = this.state;\n    let args = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(args);\n  };\n  ActionAgendaFor = () => {\n    const { currentAgendafor } = this.state;\n    this.props.selectAgenda(currentAgendafor);\n    this.formRef.current.setFieldsValue({ meetingagenda: undefined });\n  };\n  HandleUnitsChange = (value) => {\n    this.setState({ currentUnits: value }, this.ActionUnits);\n  };\n  HandleLocationTypeChange = (value) => {\n    let exactValue = value.trim();\n    this.setState(\n      { currentUnitType: exactValue, currentUnits: \"\" },\n      this.ActionUnitType\n    );\n    this.formRef.current.setFieldsValue({ unit: undefined });\n    this.formRef.current.setFieldsValue({ scheduler_members: undefined });\n  };\n  HandleMembersSelect = (value) => {\n    let arrayString = value.join(\",\");\n    this.setState({\n      currentMembers: arrayString,\n    });\n  };\n  HandleAgendaForChange = (value) => {\n    this.setState({ currentAgendafor: value }, this.ActionAgendaFor);\n  };\n  ActionAuditType = () => {\n    const { auditType } = this.state;\n\n    if (auditType == \"SHE Internal Audit\") {\n      this.setState({ showAudit: true });\n    } else if (auditType == \"Corporarte SHE Audit\") {\n      this.setState({ showAudit: true });\n    } else if (auditType == \"Monthly Inspection\") {\n      this.setState({ showAudit: true });\n    } else {\n      this.setState({ showAudit: false });\n    }\n    this.props.SelectAudit(auditType);\n  };\n  HandleAuditType = (value) => {\n    this.setState({ auditType: value }, this.ActionAuditType);\n  };\n  HandleAudit = (value) => {\n    //console.log(value);\n  };\n  HandleDate = (date, dateString) => {\n    this.setState({ currentScheduleDate: dateString });\n  };\n  HandleTime = (time, timeString) => {\n    this.setState({ currentScheduleTime: timeString });\n  };\n  HandleCustomEnds = (e) => {\n    let value = e.target.value;\n    this.setState({ customEnds: value });\n  };\n  ActionCustomInterval = () => {\n    const { customInterval } = this.state;\n\n    if (customInterval == \"Year\") {\n      this.setState({ repeatEveryMaxValue: 1 });\n    }\n    if (customInterval == \"Month\") {\n      this.setState({ repeatEveryMaxValue: 12 });\n    }\n    if (customInterval == \"Week\") {\n      this.setState({ repeatEveryMaxValue: 52 });\n    }\n    if (customInterval == \"Day\") {\n      this.setState({ repeatEveryMaxValue: 365 });\n    }\n  };\n  HandleCustomInterval = (value) => {\n    this.setState({ customInterval: value }, this.ActionCustomInterval);\n  };\n  HandleCustomMonthRepeat = (value) => {\n    this.setState({ customMonthRepeat: value });\n  };\n  HandleCustomYearRepeat = (value) => {\n    this.setState({ customYearRepeat: value });\n  };\n  HandleCustomMonthYearRepeat = (value) => {\n    this.setState({ customMonthYearRepeat: value });\n  };\n  ToggleCustomRecurrence = () => {\n    this.setState({ showCustomRecurrence: !this.state.showCustomRecurrence });\n  };\n  HandleAgendaSelect = (value) => {\n    let arrayString = value.join(\",\");\n    this.setState({\n      currentAgenda: arrayString,\n    });\n  };\n  handleStartDate = (date, dateString) => {\n    this.setState({ currentStartDate: dateString });\n  };\n  handleEndDate = (date, dateString) => {\n    this.setState({ currentEndDate: dateString });\n  };\n  HandleFrequencyYearDate = (date, dateString) => {\n    this.setState({ currentFrequencyYearDate: dateString });\n  };\n\n  Reminderemail = () => {\n    this.setState({\n      reminderEmailChecked: !this.state.reminderEmailChecked,\n      updated_remainderEmail: !this.state.updated_remainderEmail,\n    });\n  };\n  ScheduleMeeting = (values) => {\n    const {\n      currentAgenda,\n      currentMembers,\n      currentScheduleDate,\n      currentScheduleTime,\n      showCustomRecurrence,\n      currentOffset,\n      currentStartDate,\n      currentEndDate,\n      currentFrequencyYearDate,\n      customMonthRepeat,\n    } = this.state;\n    if (!showCustomRecurrence) {\n      values.scheduler_frequency = \"specificdate\";\n    }\n    if (values.scheduler_frequency_end == 1) {\n      values.scheduler_frequency_end = \"Never\";\n    } else {\n      values.scheduler_frequency_end = currentEndDate;\n    }\n    if (values.scheduler_frequency == \"Month\") {\n      values.scheduler_frequency_repeat_on = customMonthRepeat;\n    } else {\n      values.scheduler_frequency_repeat_on = \"\";\n    }\n\n    values.scheduler_frequency_start = currentStartDate;\n    values.scheduler_frequency_year_date = currentFrequencyYearDate;\n\n    values.scheduler_date = currentScheduleDate;\n    values.scheduler_time = currentScheduleTime;\n    values.scheduler_reminder = this.state.reminderEmailChecked;\n    values.scheduler_agenda = currentAgenda;\n    values.members = currentMembers;\n\n    if (values.scheduler_reminder == true) {\n      values.scheduler_reminder = \"Yes\";\n    } else {\n      values.scheduler_reminder = \"\";\n    }\n\n    // console.log(\n    //   \"scheduler_type ******** \" + values.scheduler_type + \"</br>\",\n    //   \"scheduler_sub_type ******** \" + values.scheduler_sub_type,\n    //   \"unit_type ******** \" + values.unit_type,\n    //   \"unit ******** \" + values.unit,\n    //   \"members ******** \" + values.members,\n    //   \"scheduler_frequency ******** \" + values.scheduler_frequency,\n    //   \"scheduler_date ******** \" + values.scheduler_date,\n    //   \"scheduler_time ******** \" + values.scheduler_time,\n    //   \"scheduler_agenda ******** \" + values.scheduler_agenda,\n    //   \"scheduler_frequency_start ******** \" + values.scheduler_frequency_start,\n    //   \"scheduler_frequency_end ******** \" + values.scheduler_frequency_end,\n    //   \"scheduler_frequency_repeat ******** \" +\n    //     values.scheduler_frequency_repeat,\n    //   \"scheduler_frequency_year_date ******** \" +\n    //     values.scheduler_frequency_year_date,\n    //   \"scheduler_frequency_days ********* \" + values.scheduler_frequency_days,\n    //   \"values.scheduler_frequency_repeat_on ***********\" +values.scheduler_frequency_repeat_on,\n    //   \"scheduler_frequency_date ********* \" +values.scheduler_frequency_date,\n    //   \"scheduler_frequency_weeks ********* \" +values.scheduler_frequency_weeks,\n\n    // );\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args1 = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n    this.props.CreateScheduler(\n      values.scheduler_type,\n      values.scheduler_sub_type,\n      values.unit_type,\n      values.unit,\n      values.members,\n      values.scheduler_frequency,\n      values.scheduler_date,\n      values.scheduler_time,\n      values.scheduler_agenda,\n      values.scheduler_frequency_start,\n      values.scheduler_frequency_end,\n      values.scheduler_frequency_repeat,\n      values.scheduler_frequency_year_date,\n      values.scheduler_frequency_days,\n      values.scheduler_frequency_repeat_on,\n      values.scheduler_frequency_date,\n      values.scheduler_frequency_weeks,\n      values.scheduler_audit,\n      values.scheduler_reminder,\n      values.scheduler_reminder_days,\n      args1\n    );\n\n    this.formRef.current.resetFields();\n    this.formRef1.current.resetFields();\n    this.formRef.current.setFieldsValue({ unit_type: undefined });\n    this.formRef.current.setFieldsValue({ unit: undefined });\n    this.setState({\n      reminderEmailChecked: false,\n      currentScheduleDate: \"\",\n      currentStartDate: \"\",\n      currentFrequencyYearDate: \"\",\n      currentEndDate: \"\",\n      customMonthRepeat: \"\",\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      FilterAction: false,\n    });\n  };\n  resetForm = () => {\n    this.formRef.current.resetFields();\n    this.setState({ reminderEmailChecked: false });\n  };\n\n  HandleLocationTypeChanges = (value) => {\n    this.setState({\n      fCurrentUnitType: value,\n      fcurrentUnitName: \"\",\n      currentUnitandTypeInitialValue: null,\n      changeLocationType: true,\n    });\n    this.props.SelectUnits(value);\n    this.formRef1.current.setFieldsValue({ fcurrentUnitName: undefined });\n\n    if (this.formRef.current != null) {\n      this.formRef.current.setFieldsValue({ unit: undefined });\n      this.formRef.current.setFieldsValue({ unit_type: undefined });\n    }\n  };\n\n  HandleUnitsChanges = (value) => {\n    this.setState({\n      fCurrentUnits: value,\n    });\n  };\n\n  fromDateChanged = (date, dateString) => {\n    this.setState({ date1: dateString });\n  };\n  toDateChanged = (date, dateString) => {\n    this.setState({ date2: dateString });\n  };\n\n  FilterStatus = (value) => {\n    this.setState({ status: value });\n  };\n\n  render() {\n    const {\n      schedulerData,\n      reminderEmailChecked,\n      userRoleSuperAdmin,\n      userRoleSubAdmin,\n      unitTypeData,\n      unitsData,\n      membersData,\n      agendaForData,\n      agendaData,\n      currentUnitType,\n      currentUnits,\n      showCustomRecurrence,\n      customEnds,\n      customInterval,\n      customMonthRepeat,\n      schedulerType,\n      auditType,\n      repeatEveryMaxValue,\n      schedulerTypeData,\n      schedulerMeetingSubTypeData,\n      schedulerFrequencyData,\n      schedulerDaysData,\n      schedulerFrequencyRepeatOnData,\n      auditTypeData,\n      auditData,\n      showAudit,\n      openEditScheduler,\n      currentUnitandTypeInitialValue,\n      changeLocationType,\n      editSchedulerData,\n      currentUpdatedSchedulerFrequencyEnd,\n      updated_remainderEmail,\n    } = this.state;\n    const {\n      scheduler,\n      schedulertype,\n      selectaudit,\n      selectaudittype,\n      schedulermeetingsubtype,\n    } = this.props;\n    const columns = [\n      {\n        title: \"Location Type\",\n        dataIndex: \"unit_type\",\n        key: \"unit_type\",\n      },\n      {\n        title: \"Unit\",\n        dataIndex: \"unit_name\",\n        key: \"unit_name\",\n      },\n      {\n        title: \"Scheduler Type\",\n        dataIndex: \"scheduler_type\",\n        key: \"scheduler_type\",\n      },\n      {\n        title: \"Schedule Date\",\n        dataIndex: \"scheduler_date\",\n        key: \"scheduler_date\",\n        render: (text, record) => (\n          <div>\n            {record.scheduler_frequency == \"specificdate\" ? (\n              <div>\n                {record.scheduler_date === null || \"\" ? (\n                  \"Recurring\"\n                ) : (\n                  <span>\n                    <p>{moment(record.scheduler_date).format(dateFormat)}</p>\n                  </span>\n                )}\n              </div>\n            ) : (\n              \"Recurring\"\n            )}\n          </div>\n        ),\n      },\n      {\n        title: \"Schedule Time\",\n        dataIndex: \"scheduler_time\",\n        key: \"scheduler_time\",\n      },\n      {\n        title: \"Created On\",\n        dataIndex: \"created_on\",\n        key: \"created_on\",\n        render: (text, record) => (\n          <div>\n                {record.created_on === null || \"\" ? (\n                  \"Recurring\"\n                ) : (\n                  <span>\n                    <p>{moment(record.created_on).format(datetimeFormat)}</p>\n                  </span>\n                )}\n              </div>\n        ),\n      },\n      {\n        title: \"Participants\",\n        dataIndex: \"scheduler_members_details\",\n        key: \"scheduler_members_details\",\n        render: (scheduler_members_details) => (\n          <span>\n            {scheduler_members_details !== \"\" ? (\n              <span>\n                {scheduler_members_details.map((member) => {\n                  return (\n                    <span\n                      key={member.member_id}\n                      style={{ marginRight: \"15px\" }}\n                    >\n                      {member.member_name}\n                    </span>\n                  );\n                })}\n              </span>\n            ) : (\n              \"\"\n            )}\n          </span>\n        ),\n      },\n      {\n        title: \"Status\",\n        dataIndex: \"status\",\n        key: \"status\",\n        render: (text, record) => (\n          <div>\n            {record.status === \"A\" ? (\n              <div>\n                <Switch\n                  defaultChecked\n                  onChange={() => this.HandleStatus(record)}\n                />\n              </div>\n            ) : (\n              <div>\n                <Switch onChange={() => this.HandleStatus(record)} />\n              </div>\n            )}\n          </div>\n        ),\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        render: (text, record) => (\n          <div>\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"only-icon float-left ant-btn-no-bg  ant-btn-primary-no-bg\"\n              onClick={() => {\n                this.OpenEditScheduler(record);\n              }}\n            >\n              <EditFilled />\n            </Button>\n            <Popconfirm\n              title=\"Are you sure to delete this Meeting?\"\n              placement=\"topRight\"\n              onConfirm={() => {\n                this.DeleteScheduler(record);\n              }}\n              onCancel={this.CancelDeleteMeeting}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                danger\n              >\n                <DeleteFilled />\n              </Button>\n            </Popconfirm>\n          </div>\n        ),\n      },\n    ];\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-she-meeting\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Scheduler</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Schedule Meeting and Audit</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n              <Collapse expandIconPosition=\"right\">\n                <Panel header=\"Schedule Meeting and Audit\" key=\"1\">\n                  <Card bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <Form\n                        layout=\"vertical\"\n                        autoComplete=\"off\"\n                        ref={this.formRef}\n                        className=\"w-100\"\n                        size=\"large\"\n                        onFinish={this.ScheduleMeeting}\n                        initialValues={currentUnitandTypeInitialValue}\n                      >\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\" style={{ width: 300 }}>\n                            <Form.Item\n                              label=\"Select Type\"\n                              name=\"scheduler_type\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Meeting Type!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Type\"\n                                onChange={this.HandleSchedulerType}\n                                loading={schedulertype.loading}\n                              >\n                                {schedulerTypeData &&\n                                  schedulerTypeData.map((val, index) => (\n                                    <option key={index} value={val}>\n                                      {val}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                          {schedulerType == \"Meetings\" ? (\n                            <div\n                              className=\"controls x-label-visible-hidden position-relative\"\n                              style={{ width: 300 }}\n                            >\n                              <Form.Item\n                                label=\"..\"\n                                name=\"scheduler_sub_type\"\n                                rules={[\n                                  {\n                                    required: true,\n                                    message: \"Please input Meeting Type!\",\n                                  },\n                                ]}\n                              >\n                                <Select\n                                  placeholder=\"Select Meeting Type\"\n                                  onChange={this.HandleAgendaForChange}\n                                  loading={schedulermeetingsubtype.loading}\n                                >\n                                  {schedulerMeetingSubTypeData &&\n                                    schedulerMeetingSubTypeData.map(\n                                      (val, index) => (\n                                        <option key={index} value={val}>\n                                          {val}\n                                        </option>\n                                      )\n                                    )}\n                                </Select>\n                              </Form.Item>\n                              {/* <div\n                                className=\"controls x-btn-flex x-add-meeting-btn\"\n                                style={{ width: 200 }}\n                              >\n                                <Button type=\"link\">Add New</Button>\n                              </div> */}\n                            </div>\n                          ) : null}\n                          {schedulerType == \"Audits\" ? (\n                            <div\n                              className=\"controls x-label-visible-hidden\"\n                              style={{ width: 300 }}\n                            >\n                              <Form.Item\n                                label=\"..\"\n                                name=\"scheduler_sub_type\"\n                                rules={[\n                                  {\n                                    required: true,\n                                    message: \"Please input Audit Type!\",\n                                  },\n                                ]}\n                              >\n                                <Select\n                                  placeholder=\"Select Audit Type\"\n                                  onChange={this.HandleAuditType}\n                                  loading={selectaudittype.proloading}\n                                >\n                                  {auditTypeData &&\n                                    auditTypeData.map((val, index) => (\n                                      <option key={index} value={val}>\n                                        {val}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          ) : null}\n                          <div>\n                            {showAudit ? (\n                              <div\n                                className=\"controls x-label-visible-hidden\"\n                                style={{ width: 300 }}\n                              >\n                                <Form.Item\n                                  label=\"..\"\n                                  name=\"scheduler_audit\"\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: \"Please Select Audit!\",\n                                    },\n                                  ]}\n                                >\n                                  <Select\n                                    placeholder=\"Select Audit\"\n                                    onChange={this.HandleAudit}\n                                    loading={selectaudit.proloading}\n                                  >\n                                    {auditData &&\n                                      auditData.map((audit) => (\n                                        <option\n                                          key={audit.audit_id}\n                                          value={audit.audit_id}\n                                        >\n                                          {audit.audit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            ) : null}\n                          </div>\n\n                          {schedulerType == \"Others\" ? (\n                            <div\n                              className=\"controls x-label-visible-hidden\"\n                              style={{ width: 300 }}\n                            >\n                              <Form.Item\n                                label=\"..\"\n                                name=\"scheduler_sub_type\"\n                                rules={[\n                                  {\n                                    required: true,\n                                    message: \"Please input Other Type!\",\n                                  },\n                                ]}\n                              >\n                                <Input placeholder />\n                              </Form.Item>\n                            </div>\n                          ) : null}\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div\n                            className={\n                              userRoleSuperAdmin\n                                ? \"controls\"\n                                : \"controls d-none\"\n                            }\n                            style={{ width: 300 }}\n                          >\n                            <Form.Item\n                              label=\"Location Type\"\n                              name=\"unit_type\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Location Type!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Location Type\"\n                                onChange={this.HandleLocationTypeChange}\n                                disabled={!userRoleSuperAdmin}\n                              >\n                                {unitTypeData &&\n                                  unitTypeData.map((unittype, index) => (\n                                    <option value={unittype} key={index}>\n                                      {unittype}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                          <div\n                            className={\n                              userRoleSuperAdmin\n                                ? \"controls\"\n                                : \"controls d-none\"\n                            }\n                            style={{ width: 300 }}\n                          >\n                            <Form.Item\n                              label=\"Unit\"\n                              name=\"unit\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Unit!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Unit\"\n                                onChange={this.HandleUnitsChange}\n                                disabled={\n                                  !userRoleSuperAdmin ||\n                                  this.props.units.prodloading\n                                }\n                                loading={this.props.units.prodloading}\n                              >\n                                {unitsData &&\n                                  unitsData.map((unit, index) => (\n                                    <option\n                                      value={unit.unit_id}\n                                      key={unit.unit_id}\n                                    >\n                                      {unit.unit_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                          <div\n                            className={\n                              userRoleSubAdmin ? \"controls\" : \"controls d-none\"\n                            }\n                            style={{ width: 300 }}\n                          >\n                            <Form.Item\n                              label=\"Unit\"\n                              name=\"unit\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Unit!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Unit\"\n                                onChange={this.HandleUnitsChange}\n                                disabled={\n                                  !userRoleSubAdmin ||\n                                  this.props.units.prodloading\n                                }\n                                loading={this.props.units.prodloading}\n                              >\n                                {unitsData &&\n                                  unitsData.map((unit, index) => (\n                                    <option\n                                      value={unit.unit_id}\n                                      key={unit.unit_id}\n                                    >\n                                      {unit.unit_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                          <div\n                            className={\n                              showCustomRecurrence\n                                ? \"controls position-relative d-none\"\n                                : \"controls position-relative\"\n                            }\n                            style={{ width: 350 }}\n                          >\n                            <Form.Item\n                              label=\"Date\"\n                              name=\"scheduler_date\"\n                              rules={\n                                !showCustomRecurrence\n                                  ? [\n                                      {\n                                        required: true,\n                                        message: \"Please input Date!\",\n                                      },\n                                    ]\n                                  : null\n                              }\n                            >\n                              <DatePicker\n                                onChange={this.HandleDate}\n                                format={dateFormat}\n                              />\n                            </Form.Item>\n                          </div>\n                          <div\n                            className={\n                              showCustomRecurrence\n                                ? \"controls position-relative d-none\"\n                                : \"controls position-relative\"\n                            }\n                            style={{ width: 100 }}\n                          >\n                            <Form.Item\n                              label=\"Time\"\n                              name=\"scheduler_time\"\n                              rules={\n                                !showCustomRecurrence\n                                  ? [\n                                      {\n                                        required: true,\n                                        message: \"Please input Time!\",\n                                      },\n                                    ]\n                                  : null\n                              }\n                            >\n                              <TimePicker\n                                placeholder=\"Time\"\n                                onChange={this.HandleTime}\n                                format={timeFormat}\n                              />\n                            </Form.Item>\n                          </div>\n                          <div\n                            className=\"controls x-btn-flex\"\n                            style={{ width: 100 }}\n                            onClick={this.ToggleCustomRecurrence}\n                          >\n                            <Button type=\"link\">Recurring</Button>\n                          </div>\n                        </div>\n                        {showCustomRecurrence ? (\n                          <div className=\"x-custom-recurrence\">\n                            <div className=\"x-controls-section align-items-baseline\">\n                              <div\n                                className=\"controls x-form-control-layout-horizontal\"\n                                style={{ width: 150 }}\n                              >\n                                <Form.Item\n                                  label=\"Starts on\"\n                                  name=\"scheduler_frequency_start\"\n                                  rules={\n                                    showCustomRecurrence\n                                      ? [\n                                          {\n                                            required: true,\n                                            message: \"Please input Date!\",\n                                          },\n                                        ]\n                                      : null\n                                  }\n                                >\n                                  <DatePicker\n                                    format={dateFormat}\n                                    placeholder=\"Starts On\"\n                                    onChange={this.handleStartDate}\n                                  />\n                                </Form.Item>\n                              </div>\n                            </div>\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\" style={{ width: 150 }}>\n                                <Form.Item\n                                  label=\"Select Frequency\"\n                                  name=\"scheduler_frequency\"\n                                  rules={\n                                    showCustomRecurrence\n                                      ? [\n                                          {\n                                            required: true,\n                                            message: \"Please input Frequency!\",\n                                          },\n                                        ]\n                                      : null\n                                  }\n                                >\n                                  <Select\n                                    onChange={this.HandleCustomInterval}\n                                    placeholder=\"Frequency\"\n                                  >\n                                    {schedulerFrequencyData &&\n                                      schedulerFrequencyData.map(\n                                        (val, index) => (\n                                          <option value={val} key={index}>\n                                            {val}\n                                          </option>\n                                        )\n                                      )}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                              {customInterval == \"Week\" ? (\n                                <div className=\"d-flex\">\n                                  <div\n                                    className=\"controls  x-label-visible-hidden\"\n                                    style={{ width: 100 }}\n                                  >\n                                    <Form.Item\n                                      label=\"..\"\n                                      name=\"scheduler_frequency_days\"\n                                      rules={\n                                        customInterval == \"Week\"\n                                          ? [\n                                              {\n                                                required: true,\n                                                message: \"Please input Days!\",\n                                              },\n                                            ]\n                                          : null\n                                      }\n                                    >\n                                      <Select placeholder=\"Days\">\n                                        {schedulerDaysData &&\n                                          schedulerDaysData.map(\n                                            (val, index) => (\n                                              <option\n                                                key={val.value}\n                                                value={val.value}\n                                              >\n                                                {val.text}\n                                              </option>\n                                            )\n                                          )}\n                                      </Select>\n                                    </Form.Item>\n                                  </div>\n                                </div>\n                              ) : null}\n                              {customInterval == \"Year\" ? (\n                                <div\n                                  className=\"controls  x-label-visible-hidden\"\n                                  style={{ width: 180 }}\n                                >\n                                  <Form.Item\n                                    label=\"..\"\n                                    name=\"scheduler_frequency_year_date\"\n                                    rules={\n                                      customInterval == \"Year\"\n                                        ? [\n                                            {\n                                              required: true,\n                                              message: \"Please input Date!\",\n                                            },\n                                          ]\n                                        : null\n                                    }\n                                  >\n                                    <DatePicker\n                                      onChange={this.HandleFrequencyYearDate}\n                                      format={dateFormat}\n                                    />\n                                  </Form.Item>\n                                </div>\n                              ) : null}\n                              {customInterval == \"Month\" ? (\n                                <div className=\"d-flex\">\n                                  <div\n                                    className=\"controls\"\n                                    style={{ width: 160 }}\n                                  >\n                                    <Form.Item\n                                      label=\"Repeat On\"\n                                      name=\"scheduler_frequency_repeat_on\"\n                                      rules={\n                                        customInterval == \"Month\"\n                                          ? [\n                                              {\n                                                required: true,\n                                                message:\n                                                  \"Please input Repeat On!\",\n                                              },\n                                            ]\n                                          : null\n                                      }\n                                    >\n                                      <Select\n                                        onChange={this.HandleCustomMonthRepeat}\n                                        placeholder=\"Repeat On\"\n                                      >\n                                        {schedulerFrequencyRepeatOnData &&\n                                          schedulerFrequencyRepeatOnData.map(\n                                            (val, index) => (\n                                              <option key={index} value={val}>\n                                                {val}\n                                              </option>\n                                            )\n                                          )}\n                                      </Select>\n                                    </Form.Item>\n                                  </div>\n\n                                  <div className=\"x-controls-section\">\n                                    {customMonthRepeat == \"Monthly On Date\" ? (\n                                      <div\n                                        className=\"controls  x-label-visible-hidden\"\n                                        style={{ width: 60 }}\n                                      >\n                                        <Form.Item\n                                          label=\"..\"\n                                          name=\"scheduler_frequency_date\"\n                                          rules={\n                                            customMonthRepeat ==\n                                            \"Monthly On Date\"\n                                              ? [\n                                                  {\n                                                    required: true,\n                                                    message:\n                                                      \"Please input Date!\",\n                                                  },\n                                                ]\n                                              : null\n                                          }\n                                        >\n                                          <Select>\n                                            <option value=\"1\">1</option>\n                                            <option value=\"2\">2</option>\n                                            <option value=\"3\">3</option>\n                                            <option value=\"4\">4</option>\n                                            <option value=\"5\">5</option>\n                                            <option value=\"6\">6</option>\n                                            <option value=\"7\">7</option>\n                                            <option value=\"8\">8</option>\n                                            <option value=\"9\">9</option>\n                                            <option value=\"10\">10</option>\n                                            <option value=\"11\">11</option>\n                                            <option value=\"12\">12</option>\n                                            <option value=\"13\">13</option>\n                                            <option value=\"14\">14</option>\n                                            <option value=\"15\">15</option>\n                                            <option value=\"16\">16</option>\n                                            <option value=\"17\">17</option>\n                                            <option value=\"18\">18</option>\n                                            <option value=\"19\">19</option>\n                                            <option value=\"20\">20</option>\n                                            <option value=\"21\">21</option>\n                                            <option value=\"22\">22</option>\n                                            <option value=\"23\">23</option>\n                                            <option value=\"24\">24</option>\n                                            <option value=\"25\">25</option>\n                                            <option value=\"26\">26</option>\n                                            <option value=\"27\">27</option>\n                                            <option value=\"28\">28</option>\n                                            <option value=\"29\">29</option>\n                                            <option value=\"30\">30</option>\n                                            <option value=\"31\">31</option>\n                                          </Select>\n                                        </Form.Item>\n                                      </div>\n                                    ) : null}\n                                    {customMonthRepeat == \"Monthly On Week\" ? (\n                                      <div className=\"d-flex\">\n                                        <div\n                                          className=\"controls x-label-visible-hidden\"\n                                          style={{ width: 55 }}\n                                        >\n                                          <Form.Item\n                                            label=\"..\"\n                                            name=\"scheduler_frequency_weeks\"\n                                            rules={\n                                              customMonthRepeat ==\n                                              \"Monthly On Week\"\n                                                ? [\n                                                    {\n                                                      required: true,\n                                                      message:\n                                                        \"Please input Weeks!\",\n                                                    },\n                                                  ]\n                                                : null\n                                            }\n                                          >\n                                            <Select>\n                                              <option value=\"1\">1</option>\n                                              <option value=\"2\">2</option>\n                                              <option value=\"3\">3</option>\n                                              <option value=\"4\">4</option>\n                                            </Select>\n                                          </Form.Item>\n                                        </div>\n                                        <div\n                                          className=\"controls x-label-visible-hidden\"\n                                          style={{ width: 100 }}\n                                        >\n                                          <Form.Item\n                                            label=\"..\"\n                                            name=\"scheduler_frequency_days\"\n                                            rules={\n                                              customMonthRepeat ==\n                                              \"Monthly On Week\"\n                                                ? [\n                                                    {\n                                                      required: true,\n                                                      message:\n                                                        \"Please input Days!\",\n                                                    },\n                                                  ]\n                                                : null\n                                            }\n                                          >\n                                            <Select placeholder=\"Days\">\n                                              {schedulerDaysData &&\n                                                schedulerDaysData.map(\n                                                  (val, index) => (\n                                                    <option\n                                                      key={val.value}\n                                                      value={val.value}\n                                                    >\n                                                      {val.text}\n                                                    </option>\n                                                  )\n                                                )}\n                                            </Select>\n                                          </Form.Item>\n                                        </div>\n                                      </div>\n                                    ) : null}\n                                  </div>\n                                </div>\n                              ) : null}\n                            </div>\n\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls \" style={{ width: 100 }}>\n                                <Form.Item\n                                  label=\"Repeat Every\"\n                                  name=\"scheduler_frequency_repeat\"\n                                  rules={\n                                    showCustomRecurrence\n                                      ? [\n                                          {\n                                            required: true,\n                                            message: \"Please input Repeat!\",\n                                          },\n                                        ]\n                                      : null\n                                  }\n                                >\n                                  <InputNumber\n                                    max={repeatEveryMaxValue}\n                                    min=\"1\"\n                                    placeholder=\"Repeat\"\n                                  />\n                                </Form.Item>\n                              </div>\n                              <div className=\"controls\" style={{ width: 150 }}>\n                                <Form.Item\n                                  label=\"Time\"\n                                  name=\"scheduler_time\"\n                                  rules={\n                                    showCustomRecurrence\n                                      ? [\n                                          {\n                                            required: true,\n                                            message: \"Please input Time!\",\n                                          },\n                                        ]\n                                      : null\n                                  }\n                                >\n                                  <TimePicker\n                                    placeholder=\"Time\"\n                                    onChange={this.HandleTime}\n                                    format={timeFormat}\n                                  />\n                                </Form.Item>\n                              </div>\n                            </div>\n\n                            <div className=\"x-controls-section\">\n                              <div className=\"controls\" style={{ width: 300 }}>\n                                <Form.Item\n                                  label=\"Ends\"\n                                  name=\"scheduler_frequency_end\"\n                                  rules={\n                                    showCustomRecurrence\n                                      ? [\n                                          {\n                                            required: true,\n                                            message: \"Please input Ends on!\",\n                                          },\n                                        ]\n                                      : null\n                                  }\n                                >\n                                  <Radio.Group onChange={this.HandleCustomEnds}>\n                                    <Space>\n                                      <Radio value=\"1\">Never</Radio>\n                                      <Radio value=\"2\">On</Radio>\n                                      {customEnds == 2 ? (\n                                        <div className=\"x-label-visible-hidden\">\n                                          <Form.Item\n                                            name=\"scheduler_frequency_end_date\"\n                                            rules={\n                                              customEnds == 2\n                                                ? [\n                                                    {\n                                                      required: true,\n                                                      message:\n                                                        \"Please input Date!\",\n                                                    },\n                                                  ]\n                                                : null\n                                            }\n                                          >\n                                            <DatePicker\n                                              format={dateFormat}\n                                              placeholder=\"Ends On\"\n                                              onChange={this.handleEndDate}\n                                            />\n                                          </Form.Item>\n                                        </div>\n                                      ) : null}\n                                    </Space>\n                                  </Radio.Group>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </div>\n                        ) : null}\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Participants\"\n                              name=\"scheduler_members\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Member!\",\n                                },\n                              ]}\n                            >\n                              <Select\n                                placeholder=\"Select Member\"\n                                mode=\"multiple\"\n                                onChange={this.HandleMembersSelect}\n                                disabled={this.props.members.selectprodloading}\n                                loading={this.props.members.selectprodloading}\n                              >\n                                {membersData &&\n                                  membersData.map((members, index) => (\n                                    <option\n                                      key={members.member_id}\n                                      value={members.member_id}\n                                    >\n                                      {members.member_name}\n                                    </option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          {schedulerType == \"Meetings\" ? (\n                            <div className=\"controls\">\n                              <Form.Item\n                                label=\"Agenda of Meeting\"\n                                name=\"scheduler_agenda\"\n                                rules={[\n                                  {\n                                    required: true,\n                                    message: \"Please input Agenda!\",\n                                  },\n                                ]}\n                              >\n                                <Select\n                                  placeholder=\"Select Agenda of Meeting\"\n                                  mode=\"multiple\"\n                                  onChange={this.HandleAgendaSelect}\n                                  loading={this.props.agenda.prodloading}\n                                  disabled={this.props.agenda.prodloading}\n                                  allowClear\n                                >\n                                  {agendaData &&\n                                    agendaData.map((agenda, index) => (\n                                      <option\n                                        key={agenda.agenda_id}\n                                        value={agenda.agenda_id}\n                                      >\n                                        {agenda.agenda_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          ) : null}\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\" style={{ width: 250 }}>\n                            <Form.Item\n                              label=\"Reminder Email\"\n                              name=\"scheduler_reminder\"\n                            >\n                              <Checkbox onChange={this.Reminderemail}>\n                                Send Reminder Email\n                              </Checkbox>\n                            </Form.Item>\n                          </div>\n                          <div\n                            className={\n                              reminderEmailChecked\n                                ? \"controls x-inline-formcontrols daybefore\"\n                                : \"d-none\"\n                            }\n                            style={{ width: \"auto\" }}\n                          >\n                            <Form.Item\n                              label=\"\"\n                              name=\"scheduler_reminder_days\"\n                              rules={\n                                reminderEmailChecked\n                                  ? [\n                                      {\n                                        required: true,\n                                        message: \"Please input Days!\",\n                                      },\n                                    ]\n                                  : null\n                              }\n                            >\n                              <InputNumber min={1} />\n                            </Form.Item>\n                          </div>\n                          <div\n                            className={\n                              reminderEmailChecked\n                                ? \"x-inline-formcontrols ml-0 daybefore-mtop\"\n                                : \"d-none\"\n                            }\n                          >\n                            {\" \"}\n                            Days Before\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item>\n                              <div className=\"x-btn-flex\">\n                                <Button\n                                  type=\"link\"\n                                  htmlType=\"reset\"\n                                  className=\"float-right\"\n                                  danger\n                                  onClick={this.resetForm}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                  disabled={scheduler.createloading}\n                                >\n                                  Save\n                                </Button>\n                                {scheduler.createloading ? (\n                                  <div className=\"x-ant-icon\">\n                                    <SyncOutlined spin />\n                                  </div>\n                                ) : (\n                                  \"\"\n                                )}\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                      </Form>\n                    </div>\n                  </Card>\n                </Panel>\n              </Collapse>\n            </div>\n          </div>\n          <div className=\"row x-row mt-4\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of Schedules\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"x-table-filters\">\n                    <Form\n                      layout=\"vertical\"\n                      autoComplete=\"off\"\n                      ref={this.formRef1}\n                      className=\"w-100\"\n                      size=\"large\"\n                      onFinish={this.ActionFilter}\n                    >\n                      <div className=\"x-controls-section\">\n                        {userRoleSuperAdmin ? (\n                          <div className=\"x-controls-section x-mr-1\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"funit_type\">\n                                <Select\n                                  placeholder=\"Location Type\"\n                                  onChange={this.HandleLocationTypeChanges}\n                                >\n                                  {unitTypeData &&\n                                    unitTypeData.map((unittype, index) => (\n                                      <option value={unittype} key={index}>\n                                        {unittype}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item\n                                name=\"fcurrentUnitName\"\n                                rules={\n                                  changeLocationType\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Unit!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSuperAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <div className=\"x-controls-section\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <Form.Item name=\"fcurrentUnitName\">\n                                <Select\n                                  placeholder=\"Select Unit\"\n                                  onChange={this.HandleUnitsChanges}\n                                  disabled={\n                                    !userRoleSubAdmin ||\n                                    this.props.units.prodloading\n                                  }\n                                  loading={this.props.units.prodloading}\n                                >\n                                  {unitsData &&\n                                    unitsData.map((unit) => (\n                                      <option\n                                        value={unit.unit_id}\n                                        key={unit.unit_id}\n                                      >\n                                        {unit.unit_name}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n                        <div className=\"controls\" style={{ width: 170 }}>\n                          <Form.Item label=\"\" name=\"Meeting_filter_type\">\n                            <Select\n                              placeholder=\"Select Type\"\n                              onChange={this.FilterSchedulerType}\n                              loading={schedulertype.loading}\n                            >\n                              {schedulerTypeData &&\n                                schedulerTypeData.map((val, index) => (\n                                  <option key={index} value={val}>\n                                    {val}\n                                  </option>\n                                ))}\n                            </Select>\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <Form.Item name=\"scheduler_fromdate\">\n                            <DatePicker\n                              onChange={this.fromDateChanged}\n                              placeholder=\"From Date\"\n                              format={dateFormat}\n                              size=\"large\"\n                            />\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <Form.Item name=\"scheduler_todate\">\n                            <DatePicker\n                              onChange={this.toDateChanged}\n                              placeholder=\"To Date\"\n                              format={dateFormat}\n                              size=\"large\"\n                            />\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <Form.Item name=\"status\">\n                            <Select\n                              placeholder=\"Status\"\n                              size=\"large\"\n                              onChange={this.FilterStatus}\n                            >\n                              <Option value=\"A\">Active</Option>\n                              <Option value=\"D\">Deactive</Option>\n                            </Select>\n                          </Form.Item>\n                        </div>\n\n                        <div className=\"control\">\n                          <div className=\"x-controls x-btn-flex\">\n                            <Button\n                              type=\"primary\"\n                              size=\"small\"\n                              htmlType=\"submit\"\n                              disabled={scheduler.getloading}\n                            >\n                              Filter\n                            </Button>\n                            {scheduler.getloading ? (\n                              <div className=\"x-ant-icon\">\n                                <SyncOutlined spin />\n                              </div>\n                            ) : (\n                              \"\"\n                            )}\n                            <Button\n                              type=\"link\"\n                              htmlType=\"reset\"\n                              danger\n                              onClick={this.ActionFilterReset}\n                            >\n                              Reset\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Form>\n                  </div>\n                </div>\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"table-responsive\">\n                    {scheduler.getloading ||\n                    scheduler.statusloading ||\n                    scheduler.deleteloading ||\n                    scheduler.createloading ? (\n                      <div>\n                        <Spin indicator={antIcon} />\n                      </div>\n                    ) : (\n                      <div>\n                        <Table\n                          dataSource={schedulerData}\n                          columns={columns}\n                          pagination={false}\n                        />\n                      </div>\n                    )}\n                    <Pagination\n                      total={this.state.totalCount}\n                      onChange={this.pageOnChange}\n                      defaultCurrent={1}\n                      defaultPageSize={20}\n                    />\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n        <Drawer\n          title=\"Edit Schedule\"\n          placement=\"right\"\n          onClose={this.CloseEditScheduler}\n          visible={openEditScheduler}\n        >\n          <Form\n            name=\"edit_scheduler\"\n            autoComplete=\"off\"\n            className=\"w-100\"\n            layout=\"vertical\"\n            ref={this.editSchedulerForm}\n            size=\"large\"\n            initialValues={editSchedulerData}\n            onFinish={this.EditScheduleMeeting}\n          >\n            <div className=\"x-controls-section\">\n              <div\n                className={\n                  showCustomRecurrence\n                    ? \"controls position-relative d-none\"\n                    : \"controls position-relative\"\n                }\n                style={{ width: 350 }}\n              >\n                <Form.Item\n                  label=\"Date\"\n                  name=\"updated_scheduler_date\"\n                  rules={\n                    !showCustomRecurrence\n                      ? [\n                          {\n                            required: true,\n                            message: \"Please input Date!\",\n                          },\n                        ]\n                      : null\n                  }\n                >\n                  <DatePicker onChange={this.HandleDate} format={dateFormat} />\n                </Form.Item>\n              </div>\n              <div\n                className={\n                  showCustomRecurrence\n                    ? \"controls position-relative d-none\"\n                    : \"controls position-relative\"\n                }\n                style={{ width: 100 }}\n              >\n                <Form.Item\n                  label=\"Time\"\n                  name=\"update_scheduler_time\"\n                  rules={\n                    !showCustomRecurrence\n                      ? [\n                          {\n                            required: true,\n                            message: \"Please input Time!\",\n                          },\n                        ]\n                      : null\n                  }\n                >\n                  <TimePicker\n                    placeholder=\"Time\"\n                    onChange={this.HandleTime}\n                    format={timeFormat}\n                  />\n                </Form.Item>\n              </div>\n              <div\n                className=\"controls x-btn-flex\"\n                style={{ width: 100 }}\n                onClick={this.ToggleCustomRecurrence}\n              >\n                <Button type=\"link\">Recurring</Button>\n              </div>\n            </div>\n            {showCustomRecurrence ? (\n              <div className=\"x-custom-recurrence\">\n                <div className=\"x-controls-section align-items-baseline\">\n                  <div\n                    className=\"controls x-form-control-layout-horizontal\"\n                    style={{ width: 150 }}\n                  >\n                    <Form.Item\n                      label=\"Starts on\"\n                      name=\"updated_scheduler_frequency_start\"\n                      rules={\n                        showCustomRecurrence\n                          ? [\n                              {\n                                required: true,\n                                message: \"Please input Date!\",\n                              },\n                            ]\n                          : null\n                      }\n                    >\n                      <DatePicker\n                        format={dateFormat}\n                        placeholder=\"Starts On\"\n                        onChange={this.handleStartDate}\n                      />\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\" style={{ width: 150 }}>\n                    <Form.Item\n                      label=\"Select Frequency\"\n                      name=\"scheduler_frequency\"\n                      rules={\n                        showCustomRecurrence\n                          ? [\n                              {\n                                required: true,\n                                message: \"Please input Frequency!\",\n                              },\n                            ]\n                          : null\n                      }\n                    >\n                      <Select\n                        onChange={this.HandleCustomInterval}\n                        placeholder=\"Frequency\"\n                      >\n                        {schedulerFrequencyData &&\n                          schedulerFrequencyData.map((val, index) => (\n                            <option value={val} key={index}>\n                              {val}\n                            </option>\n                          ))}\n                      </Select>\n                    </Form.Item>\n                  </div>\n                  {customInterval == \"Week\" ? (\n                    <div className=\"d-flex\">\n                      <div\n                        className=\"controls  x-label-visible-hidden\"\n                        style={{ width: 100 }}\n                      >\n                        <Form.Item\n                          label=\"..\"\n                          name=\"scheduler_frequency_days\"\n                          rules={\n                            customInterval == \"Week\"\n                              ? [\n                                  {\n                                    required: true,\n                                    message: \"Please input Days!\",\n                                  },\n                                ]\n                              : null\n                          }\n                        >\n                          <Select placeholder=\"Days\">\n                            {schedulerDaysData &&\n                              schedulerDaysData.map((val, index) => (\n                                <option key={val.value} value={val.value}>\n                                  {val.text}\n                                </option>\n                              ))}\n                          </Select>\n                        </Form.Item>\n                      </div>\n                    </div>\n                  ) : null}\n                  {customInterval == \"Year\" ? (\n                    <div\n                      className=\"controls  x-label-visible-hidden\"\n                      style={{ width: 180 }}\n                    >\n                      <Form.Item\n                        label=\"..\"\n                        name=\"updated_scheduler_frequency_year_date\"\n                        rules={\n                          customInterval == \"Year\"\n                            ? [\n                                {\n                                  required: true,\n                                  message: \"Please input Date!\",\n                                },\n                              ]\n                            : null\n                        }\n                      >\n                        <DatePicker\n                          onChange={this.HandleFrequencyYearDate}\n                          format={dateFormat}\n                        />\n                      </Form.Item>\n                    </div>\n                  ) : null}\n                  {customInterval == \"Month\" ? (\n                    <div className=\"d-flex\">\n                      <div className=\"controls\" style={{ width: 160 }}>\n                        <Form.Item\n                          label=\"Repeat On\"\n                          name=\"scheduler_frequency_repeat_on\"\n                          rules={\n                            customInterval == \"Month\"\n                              ? [\n                                  {\n                                    required: true,\n                                    message: \"Please input Repeat On!\",\n                                  },\n                                ]\n                              : null\n                          }\n                        >\n                          <Select\n                            onChange={this.HandleCustomMonthRepeat}\n                            placeholder=\"Repeat On\"\n                          >\n                            {schedulerFrequencyRepeatOnData &&\n                              schedulerFrequencyRepeatOnData.map(\n                                (val, index) => (\n                                  <option key={index} value={val}>\n                                    {val}\n                                  </option>\n                                )\n                              )}\n                          </Select>\n                        </Form.Item>\n                      </div>\n\n                      <div className=\"x-controls-section\">\n                        {customMonthRepeat == \"Monthly On Date\" ? (\n                          <div\n                            className=\"controls  x-label-visible-hidden\"\n                            style={{ width: 60 }}\n                          >\n                            <Form.Item\n                              label=\"..\"\n                              name=\"scheduler_frequency_date\"\n                              rules={\n                                customMonthRepeat == \"Monthly On Date\"\n                                  ? [\n                                      {\n                                        required: true,\n                                        message: \"Please input Date!\",\n                                      },\n                                    ]\n                                  : null\n                              }\n                            >\n                              <Select>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                                <option value=\"11\">11</option>\n                                <option value=\"12\">12</option>\n                                <option value=\"13\">13</option>\n                                <option value=\"14\">14</option>\n                                <option value=\"15\">15</option>\n                                <option value=\"16\">16</option>\n                                <option value=\"17\">17</option>\n                                <option value=\"18\">18</option>\n                                <option value=\"19\">19</option>\n                                <option value=\"20\">20</option>\n                                <option value=\"21\">21</option>\n                                <option value=\"22\">22</option>\n                                <option value=\"23\">23</option>\n                                <option value=\"24\">24</option>\n                                <option value=\"25\">25</option>\n                                <option value=\"26\">26</option>\n                                <option value=\"27\">27</option>\n                                <option value=\"28\">28</option>\n                                <option value=\"29\">29</option>\n                                <option value=\"30\">30</option>\n                                <option value=\"31\">31</option>\n                              </Select>\n                            </Form.Item>\n                          </div>\n                        ) : null}\n                        {customMonthRepeat == \"Monthly On Week\" ? (\n                          <div className=\"d-flex\">\n                            <div\n                              className=\"controls x-label-visible-hidden\"\n                              style={{ width: 55 }}\n                            >\n                              <Form.Item\n                                label=\"..\"\n                                name=\"scheduler_frequency_weeks\"\n                                rules={\n                                  customMonthRepeat == \"Monthly On Week\"\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Weeks!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <Select>\n                                  <option value=\"1\">1</option>\n                                  <option value=\"2\">2</option>\n                                  <option value=\"3\">3</option>\n                                  <option value=\"4\">4</option>\n                                </Select>\n                              </Form.Item>\n                            </div>\n                            <div\n                              className=\"controls x-label-visible-hidden\"\n                              style={{ width: 100 }}\n                            >\n                              <Form.Item\n                                label=\"..\"\n                                name=\"scheduler_frequency_days\"\n                                rules={\n                                  customMonthRepeat == \"Monthly On Week\"\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Days!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <Select placeholder=\"Days\">\n                                  {schedulerDaysData &&\n                                    schedulerDaysData.map((val, index) => (\n                                      <option key={val.value} value={val.value}>\n                                        {val.text}\n                                      </option>\n                                    ))}\n                                </Select>\n                              </Form.Item>\n                            </div>\n                          </div>\n                        ) : null}\n                      </div>\n                    </div>\n                  ) : null}\n                </div>\n\n                <div className=\"x-controls-section\">\n                  <div className=\"controls \" style={{ width: 100 }}>\n                    <Form.Item\n                      label=\"Repeat Every\"\n                      name=\"scheduler_frequency_repeat\"\n                      rules={\n                        showCustomRecurrence\n                          ? [\n                              {\n                                required: true,\n                                message: \"Please input Repeat!\",\n                              },\n                            ]\n                          : null\n                      }\n                    >\n                      <InputNumber\n                        max={repeatEveryMaxValue}\n                        min=\"1\"\n                        placeholder=\"Repeat\"\n                      />\n                    </Form.Item>\n                  </div>\n                  <div className=\"controls\" style={{ width: 150 }}>\n                    <Form.Item\n                      label=\"Time\"\n                      name=\"update_scheduler_time\"\n                      rules={\n                        showCustomRecurrence\n                          ? [\n                              {\n                                required: true,\n                                message: \"Please input Time!\",\n                              },\n                            ]\n                          : null\n                      }\n                    >\n                      <TimePicker\n                        placeholder=\"Time\"\n                        onChange={this.HandleTime}\n                        format={timeFormat}\n                      />\n                    </Form.Item>\n                  </div>\n                </div>\n\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\" style={{ width: 300 }}>\n                    <Form.Item\n                      label=\"Ends\"\n                      name=\"updated_customEnds\"\n                      rules={\n                        showCustomRecurrence\n                          ? [\n                              {\n                                required: true,\n                                message: \"Please input Ends on!\",\n                              },\n                            ]\n                          : null\n                      }\n                    >\n                      <Radio.Group\n                        onChange={this.HandleCustomEnds}\n                        value={customEnds}\n                      >\n                        <Space>\n                          <Radio value=\"1\">Never</Radio>\n                          <Radio value=\"2\">On</Radio>\n                          {customEnds == 2 ? (\n                            <div className=\"x-label-visible-hidden\">\n                              <Form.Item\n                                name=\"updated_scheduler_frequency_end_date\"\n                                rules={\n                                  customEnds == 2\n                                    ? [\n                                        {\n                                          required: true,\n                                          message: \"Please input Date!\",\n                                        },\n                                      ]\n                                    : null\n                                }\n                              >\n                                <DatePicker\n                                  format={dateFormat}\n                                  placeholder=\"Ends On\"\n                                  onChange={this.handleEndDate}\n                                />\n                              </Form.Item>\n                            </div>\n                          ) : null}\n                        </Space>\n                      </Radio.Group>\n                    </Form.Item>\n                  </div>\n                </div>\n              </div>\n            ) : null}\n\n            <div className=\"x-controls-section\">\n              <div className=\"controls\">\n                <Form.Item\n                  label=\"Participants\"\n                  name=\"updated_scheduler_members\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input Member!\",\n                    },\n                  ]}\n                >\n                  <Select\n                    placeholder=\"Select Member\"\n                    mode=\"multiple\"\n                    onChange={this.HandleMembersSelect}\n                    disabled={this.props.members.selectprodloading}\n                    loading={this.props.members.selectprodloading}\n                  >\n                    {membersData &&\n                      membersData.map((members, index) => (\n                        <option\n                          key={members.member_id}\n                          value={members.member_id}\n                        >\n                          {members.member_name}\n                        </option>\n                      ))}\n                  </Select>\n                </Form.Item>\n              </div>\n            </div>\n            <div className=\"x-controls-section\">\n              <div className=\"controls\" style={{ width: 250 }}>\n                <Form.Item label=\"Reminder Email\" name=\"scheduler_reminder\">\n                  <Checkbox\n                    onChange={this.Reminderemail}\n                    checked={updated_remainderEmail}\n                  >\n                    Send Reminder Email\n                  </Checkbox>\n                </Form.Item>\n              </div>\n              <div\n                className={\n                  reminderEmailChecked\n                    ? \"controls x-inline-formcontrols daybefore\"\n                    : \"d-none\"\n                }\n                style={{ width: \"auto\" }}\n              >\n                <Form.Item\n                  label=\"\"\n                  name=\"scheduler_reminder_days\"\n                  rules={\n                    reminderEmailChecked\n                      ? [\n                          {\n                            required: true,\n                            message: \"Please input Days!\",\n                          },\n                        ]\n                      : null\n                  }\n                >\n                  <InputNumber min={1} />\n                </Form.Item>\n              </div>\n              <div\n                className={\n                  reminderEmailChecked\n                    ? \"x-inline-formcontrols ml-0 daybefore-mtop\"\n                    : \"d-none\"\n                }\n              >\n                {\" \"}\n                Days Before\n              </div>\n            </div>\n            <div className=\"x-controls-section\">\n              <div className=\"controls\">\n                <Form.Item>\n                  <div className=\"x-btn-flex\">\n                    <Button\n                      type=\"link\"\n                      htmlType=\"reset\"\n                      className=\"float-right\"\n                      danger\n                      onClick={this.resetEditSchedulerForm}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      className=\"float-right\"\n                      disabled={scheduler.editloading}\n                    >\n                      Save\n                    </Button>\n                    {scheduler.editloading ? (\n                      <div className=\"x-ant-icon\">\n                        <SyncOutlined spin />\n                      </div>\n                    ) : (\n                      \"\"\n                    )}\n                  </div>\n                </Form.Item>\n              </div>\n            </div>\n          </Form>\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const {\n    members,\n    unittype,\n    units,\n    agendafor,\n    agenda,\n    mrmmeeting,\n    mrmrecommendation,\n    auditmaster,\n    scheduler,\n    schedulertype,\n    schedulermeetingsubtype,\n    schedulerfrequency,\n    schedulerdays,\n    schedulerfrequencyrepeaton,\n    selectaudittype,\n    selectaudit,\n  } = state;\n  return {\n    members,\n    unittype,\n    units,\n    agendafor,\n    agenda,\n    mrmmeeting,\n    mrmrecommendation,\n    auditmaster,\n    scheduler,\n    schedulertype,\n    schedulermeetingsubtype,\n    schedulerfrequency,\n    schedulerdays,\n    schedulerfrequencyrepeaton,\n    selectaudittype,\n    selectaudit,\n  };\n}\nconst actionCreators = {\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n  selectAgenda: actions.selectAgenda,\n  SelectAgendaFor: actions.SelectAgendaFor,\n  SelectMembers: actions.SelectMembers,\n  SelectSchedulerType: actions.SelectSchedulerType,\n  SelectSchedulerMeetingSubType: actions.SelectSchedulerMeetingSubType,\n  SelectSchedulerFrequency: actions.SelectSchedulerFrequency,\n  SelectSchedulerDays: actions.SelectSchedulerDays,\n  SelectSchedulerFrequencyRepeatOn: actions.SelectSchedulerFrequencyRepeatOn,\n  SelectAuditType: actions.SelectAuditType,\n  SelectAudit: actions.SelectAudit,\n  CreateScheduler: actions.CreateScheduler,\n  EditScheduler: actions.EditScheduler,\n  GetScheduler: actions.GetScheduler,\n  DeleteScheduler: actions.DeleteScheduler,\n  StatusScheduler: actions.StatusScheduler,\n  SelectDepartments: actions.SelectDepartments,\n};\nconst connectedScheduler = connect(mapState, actionCreators)(Scheduler);\nexport { connectedScheduler as Scheduler };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Scheduler/CalendarView/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/Scheduler/CalendarView/CalendarView.js",["587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  DatePicker,\n  Button,\n  Breadcrumb,\n  Card,\n  Progress,\n  Calendar,\n  Badge,\n  Spin,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  Loading3QuartersOutlined,\n  ProfileFilled,\n  CheckCircleFilled,\n  ScheduleFilled,\n  CalendarOutlined,\n  LoadingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport moment from \"moment\";\nconst { Option } = Select;\nconst dateFormat = \"DD-MM-YYYY\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass CalendarView extends Component {\n  formRef = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      unitTypeData: [],\n      unitsData: [],\n      schedulerMtdData: [],\n      meetingDetails: [],\n      filterMonth: \"\",\n      changeLocationType: false,\n    };\n  }\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    {\n      currentUserRollId == 3\n        ? this.setState({\n            userRoleSubAdmin: true,\n          })\n        : this.setState({\n            userRoleSubAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n      },\n      this.ActionRoleBased\n    );\n    var today = new Date();\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\");\n    var yyyy = today.getFullYear();\n    today = mm + \"-\" + yyyy;\n    let args = `filter_month=01-${today}&unit_id=${user.unit_id}`;\n    this.props.GetSchedulerMTD(args);\n  }\n\n  ActionRoleBased = () => {\n    const { currentUnitType } = this.state;\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let unitTypestatus = this.props.unittype.status;\n      let unitsStatus = this.props.units.status;\n      let schedulerMtdStatus = this.props.schedulermtd.getstatus;\n\n      {\n        unitTypestatus == \"success\"\n          ? this.setState({ unitTypeData: this.props.unittype.items.data })\n          : this.setState({ unitTypeData: [] });\n      }\n\n      {\n        unitsStatus == \"success\"\n          ? this.setState({ unitsData: this.props.units.items.data })\n          : this.setState({ unitsData: [] });\n      }\n      {\n        schedulerMtdStatus == \"success\"\n          ? this.setState(\n              {\n                schedulerMtdData: this.props.schedulermtd.items.data,\n              },\n              this.ActionCalendarSheMeeting,\n              this.ActionCalendarAudit,\n              this.ActionCalendarOthers\n            )\n          : this.setState({ schedulerMtdData: [] });\n      }\n    }\n  }\n\n  ActionCalendarSheMeeting = (value) => {\n    let meetingData;\n    const { schedulerMtdData } = this.state;\n\n    let dateStr = moment(value).format(\"YYYY-MM-DD\");\n    if (schedulerMtdData != \"\") {\n      let info = schedulerMtdData[dateStr];\n      if (info != undefined) {\n        let content = info.shemeetings_details;\n        meetingData = [{ type: \"success\", content: content }];\n      }\n    }\n    return meetingData || [];\n  };\n  ActionCalendarAudit = (value) => {\n    let auditData;\n    const { schedulerMtdData } = this.state;\n    let dateStr = moment(value).format(\"YYYY-MM-DD\");\n    if (schedulerMtdData != \"\") {\n      let info = schedulerMtdData[dateStr];\n      if (info != undefined) {\n        let content = info.audits_details;\n        auditData = [{ type: \"success\", content: content }];\n      }\n    }\n    return auditData || [];\n  };\n  ActionCalendarOthers = (value) => {\n    let othersData;\n    const { schedulerMtdData } = this.state;\n    let dateStr = moment(value).format(\"YYYY-MM-DD\");\n    if (schedulerMtdData != \"\") {\n      let info = schedulerMtdData[dateStr];\n      if (info != undefined) {\n        let content = info.othermeetings_details;\n        othersData = [{ type: \"success\", content: content }];\n      }\n    }\n    return othersData || [];\n  };\n  dateCellRender = (value) => {\n    const meetingData = this.ActionCalendarSheMeeting(value);\n    const auditData = this.ActionCalendarAudit(value);\n    const othersData = this.ActionCalendarOthers(value);\n    return (\n      <div className=\"x-meeting-details\">\n        {meetingData.map((item) => (\n          <span>\n            {item.content.map((items) => (\n              <div key={items.content} className={items.she_meeting_status}>\n                {items.she_meeting_type}\n              </div>\n            ))}\n          </span>\n        ))}\n        {auditData.map((item) => (\n          <span>\n            {item.content.map((items) => (\n              <div key={items.content} className=\"calendarTag\">\n                {items.audit_name}\n              </div>\n            ))}\n          </span>\n        ))}\n        {othersData.map((item) => (\n          <span>\n            {item.content.map((items) => (\n              <div key={items.content} className=\"calendarTag\">\n                Others\n              </div>\n            ))}\n          </span>\n        ))}\n      </div>\n    );\n  };\n\n  onPanelChange = (value, val) => {\n    const { currentUnits } = this.state;\n    let x = value.format(\"DD-MM-YYYY\");\n    this.setState({ filterMonth: x });\n    let args = `filter_month=${x}&unit_id=${currentUnits}`;\n    this.props.GetSchedulerMTD(args);\n  };\n\n  HandleChange = (value) => {\n    this.props.SelectUnits(value);\n    this.setState({\n      currentUnitType: value,\n      changeLocationType: true,\n    });\n    this.formRef.current.setFieldsValue({ unit: undefined });\n  };\n\n  HandleUnitsChange = (value) => {\n    this.setState({ currentUnits: value });\n  };\n\n  ActionFilter = () => {\n    const { filterMonth, currentUnits } = this.state;\n    let args = `filter_month=${filterMonth}&unit_id=${currentUnits}`;\n    this.props.GetSchedulerMTD(args);\n  };\n  ActionFilterReset = () => {\n    this.formRef.current.resetFields();\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    this.setState({\n      currentUnits: user.unit_id,\n      currentUnitType: user.unit_type,\n      changeLocationType: false,\n    });\n  };\n\n  render() {\n    const {\n      unitsData,\n      unitTypeData,\n      currentUnitType,\n      currentUnits,\n      changeLocationType,\n      userRoleSuperAdmin,\n      userRoleSubAdmin,\n      years,\n      months,\n      meetingDetails,\n      data2,\n    } = this.state;\n    const { schedulermtd } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Calendar View</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Calendar View</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n\n          <div className=\"row x-panel mb-4\">\n            <div className=\"x-table-filters\">\n              <Form\n                layout=\"vertical\"\n                autoComplete=\"off\"\n                ref={this.formRef}\n                className=\"w-100\"\n                size=\"large\"\n                onFinish={this.ActionFilter}\n              >\n                {userRoleSuperAdmin ? (\n                  <div className=\"x-controls-section\">\n                    <div className=\"controls\" style={{ width: 250 }}>\n                      <div className=\"x-controls mr-4\">\n                        <Form.Item name=\"unit_type\">\n                          <Select\n                            onChange={this.HandleChange}\n                            placeholder=\"Location Type\"\n                          >\n                            {unitTypeData &&\n                              unitTypeData.map((unittype, index) => (\n                                <option value={unittype} key={index}>\n                                  {unittype}\n                                </option>\n                              ))}\n                          </Select>\n                        </Form.Item>\n                      </div>\n                    </div>\n                    <div className=\"controls\" style={{ width: 250 }}>\n                      <Form.Item\n                        name=\"unit\"\n                        rules={\n                          changeLocationType\n                            ? [\n                                {\n                                  required: true,\n                                  message: \"Please input Unit!\",\n                                },\n                              ]\n                            : null\n                        }\n                      >\n                        <Select\n                          onChange={this.HandleUnitsChange}\n                          loading={this.props.units.prodloading}\n                          size=\"large\"\n                          placeholder=\"Unit\"\n                          disabled={!changeLocationType}\n                        >\n                          {unitsData &&\n                            unitsData.map((unit) => (\n                              <option value={unit.unit_id} key={unit.unit_id}>\n                                {unit.unit_name}\n                              </option>\n                            ))}\n                        </Select>\n                      </Form.Item>\n                    </div>\n                    <div className=\"controls\" style={{ width: 200 }}>\n                      <Form.Item>\n                        <div className=\"x-btn-flex\">\n                          <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            className=\"float-right\"\n                          >\n                            Filter\n                          </Button>\n\n                          <Button\n                            type=\"link\"\n                            htmlType=\"reset\"\n                            className=\"float-right\"\n                            danger\n                            onClick={this.ActionFilterReset}\n                          >\n                            Reset\n                          </Button>\n                        </div>\n                      </Form.Item>\n                    </div>\n                  </div>\n                ) : null}\n\n                {userRoleSubAdmin ? (\n                  <div className=\"x-controls-section\">\n                    <div className=\"controls\" style={{ width: 250 }}>\n                      <Form.Item name=\"unit\">\n                        <Select\n                          onChange={this.HandleUnitsChange}\n                          loading={this.props.units.prodloading}\n                          size=\"large\"\n                          placeholder=\"Unit\"\n                        >\n                          {unitsData &&\n                            unitsData.map((unit) => (\n                              <option value={unit.unit_id} key={unit.unit_id}>\n                                {unit.unit_name}\n                              </option>\n                            ))}\n                        </Select>\n                      </Form.Item>\n                    </div>\n                    <div className=\"controls\" style={{ width: 200 }}>\n                      <Form.Item>\n                        <div className=\"x-btn-flex\">\n                          <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            className=\"float-right\"\n                          >\n                            Filter\n                          </Button>\n\n                          <Button\n                            type=\"link\"\n                            htmlType=\"reset\"\n                            className=\"float-right\"\n                            danger\n                            onClick={this.ActionFilterReset}\n                          >\n                            Reset\n                          </Button>\n                        </div>\n                      </Form.Item>\n                    </div>\n                  </div>\n                ) : null}\n              </Form>\n            </div>\n          </div>\n\n          <div className=\"row justify-content-center\">\n            <Calendar\n              dateCellRender={this.dateCellRender}\n              onPanelChange={this.onPanelChange}\n            />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { unittype, units, schedulermtd } = state;\n  return {\n    unittype,\n    units,\n    schedulermtd,\n  };\n}\nconst actionCreators = {\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n  GetSchedulerMTD: actions.GetSchedulerMTD,\n};\nconst connectedCalendarView = connect(mapState, actionCreators)(CalendarView);\nexport { connectedCalendarView as CalendarView };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Dashboard/Dashboard.js",["624","625","626","627","628","629","630","631"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Form, Select, DatePicker, Button, Breadcrumb, Card, Progress } from 'antd';\nimport { ComingSoon } from \"../../component/ComingSoon/ComingSoon\"\nconst { Option } = Select;\n\nclass Dashboard extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = {};\n}\ncomponentDidMount() {\n}  \nrender(){\nreturn(\n<React.Fragment>\n  <div className=\"x-page-container x-dashboard\">\n  <ComingSoon></ComingSoon>\n  </div>\n</React.Fragment>\n)\n}\n}\nfunction mapState(state) {\n}\nconst actionCreators = {\n};\nconst connectedDashboard = connect(mapState, actionCreators)(Dashboard);\nexport { connectedDashboard as Dashboard };","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/Audits/Audits.js",["632","633","634","635","636","637"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  Button,\n  Breadcrumb,\n  Card,\n  Input,\n  Collapse,\n  Tabs,\n  Spin,\n  Checkbox,\n  InputNumber,\n} from \"antd\";\nimport { HomeOutlined, LoadingOutlined, SyncOutlined } from \"@ant-design/icons\";\n\nimport { AuditList } from \"../AuditList/AuditList\";\n//import { AuditList } from \"../AuditList-UI/AuditList\";\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst { TabPane } = Tabs;\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nclass Audits extends Component {\n  formRef = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      auditType: [],\n    };\n  }\n  componentDidMount() {\n    this.props.SelectAuditType();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let audit_status = this.props.selectaudittype.status;\n      if (audit_status == \"success\") {\n        this.setState({ auditType: this.props.selectaudittype.items.data });\n      }\n    }\n  }\n  resetForm = () => {\n    this.formRef.current.resetFields();\n  };\n\n  createAudit = (values) => {\n    console.log(values);\n    let args = ``;\n    this.props.AddAuditMaster(\n      values.audits,\n      values.meeting_type,\n      values.ui_order,\n      args\n    );\n    this.formRef.current.resetFields();\n  };\n\n  render() {\n    const { auditType } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Audits</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/auditdashboard\">\n                <Breadcrumb.Item>\n                  <span>Audit Protocol</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Audits</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row\">\n            <div className=\"text-left x-form-card col-md-12 px-0 mb-0 pb-0\">\n              <Collapse expandIconPosition=\"right\">\n                <Panel header=\"Create Audit\" key=\"1\">\n                  <Card bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <Form\n                        layout=\"vertical\"\n                        autoComplete=\"off\"\n                        ref={this.formRef}\n                        className=\"w-100\"\n                        size=\"large\"\n                        onFinish={this.createAudit}\n                      >\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\" style={{ width: 300 }}>\n                            <Form.Item\n                              label=\"Category Name\"\n                              name=\"meeting_type\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Category Name!\",\n                                },\n                              ]}\n                            >\n                              <Select placeholder=\"Category Name\">\n                                {auditType &&\n                                  auditType.map((audit, index) => (\n                                    <Option key={index} value={audit}>\n                                      {audit}\n                                    </Option>\n                                  ))}\n                              </Select>\n                            </Form.Item>\n                          </div>\n                          <div className=\"controls\">\n                            <Form.Item\n                              label=\"Audit\"\n                              name=\"audits\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Meeting Type!\",\n                                },\n                              ]}\n                            >\n                              <Input placeholder=\"Audit\" />\n                            </Form.Item>\n                          </div>\n                          ​\n                        </div>\n                        ​\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\" style={{ width: 100 }}>\n                            <Form.Item\n                              label=\"Order\"\n                              name=\"ui_order\"\n                              rules={[\n                                {\n                                  required: true,\n                                  message: \"Please input Order!\",\n                                },\n                              ]}\n                            >\n                              <InputNumber min={1} placeholder=\"Order\" />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"x-controls-section\">\n                          <div className=\"controls\">\n                            <Form.Item>\n                              <div className=\"x-btn-flex\">\n                                <Button\n                                  type=\"link\"\n                                  htmlType=\"reset\"\n                                  className=\"float-right\"\n                                  danger\n                                  onClick={this.resetForm}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                >\n                                  Save\n                                </Button>\n                              </div>\n                            </Form.Item>\n                          </div>\n                        </div>\n                      </Form>\n                    </div>\n                  </Card>\n                </Panel>\n              </Collapse>\n            </div>\n          </div>\n          <div className=\"row x-row mt-4\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of Audits\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <AuditList></AuditList>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { selectaudittype, getaudit } = state;\n  return {\n    selectaudittype,\n    getaudit,\n  };\n}\nconst actionCreators = {\n  SelectAuditType: actions.SelectAuditType,\n  AddAuditMaster: actions.AddAuditMaster,\n};\nconst connectedAudits = connect(mapState, actionCreators)(Audits);\nexport { connectedAudits as Audits };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/Dashboard/Dashboard.js",["638","639","640","641","642","643","644","645","646","647","648"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Form, Select, DatePicker, Button, Breadcrumb, Card, Progress } from 'antd';\nimport { HomeOutlined, HourglassFilled, ProfileFilled, CheckCircleFilled, ScheduleFilled, Loading3QuartersOutlined } from '@ant-design/icons';\nimport { ComingSoon } from \"../../../component/ComingSoon/ComingSoon\";\nconst { Option } = Select;\n\nclass AuditDashboard extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = {};\n}\ncomponentDidMount() {\n}  \nrender(){\nreturn(\n<React.Fragment>\n  <div className=\"x-page-container x-dashboard\">\n  <div className=\"row\">\n      <div className=\"x-page-title\">\n        <h1>Dashboard</h1>\n      </div>\n    </div>\n    <div className=\"row x-breadcrumb\">\n      <Breadcrumb>\n      <Link to=\"/dashboard\">\n        <Breadcrumb.Item>\n          <HomeOutlined />\n        </Breadcrumb.Item>\n        </Link>\n        \n        <Breadcrumb.Item>Audit Dashboard</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n  <ComingSoon></ComingSoon>\n  </div>\n</React.Fragment>\n)\n}\n}\nfunction mapState(state) {\n}\nconst actionCreators = {\n};\nconst connectedAuditDashboard = connect(mapState, actionCreators)(AuditDashboard);\nexport { connectedAuditDashboard as AuditDashboard };","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/AuditList/AuditList.js",["649","650","651","652","653","654","655","656","657","658","659","660","661","662"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Select,\n  Button,\n  Drawer,\n  Spin,\n  Popconfirm,\n  Card,\n  Input,\n  Form,\n  Table,\n  InputNumber,\n} from \"antd\";\nimport {\n  EditFilled,\n  DeleteFilled,\n  AuditOutlined,\n  LoadingOutlined,\n  ProfileOutlined,\n} from \"@ant-design/icons\";\nconst { Option } = Select;\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass AuditList extends Component {\n  formRef = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      openEditAudits: false,\n      openEditAuditsFlag: false,\n      currentAuditsData: [],\n      currentUnitsData: [],\n      editAuditsData: [],\n      currentAuditsList: [],\n      auditType: [],\n      auditId: \"\",\n      checked: false,\n      value: null,\n      options: [],\n      current_audit_type: \"\",\n    };\n  }\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    console.log(\"user\");\n    console.log(user);\n    this.props.SelectUnitType();\n    let args = ``;\n    this.props.GetAuditMaster(args);\n    this.props.SelectUnits(user.unit_type);\n    this.props.SelectAuditType();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      console.log(this.props);\n      let audits_status = this.props.audits.getstatus;\n      let audit_status = this.props.selectaudit.status;\n      let audits_id_status = this.props.auditsid.getstatus;\n      {\n        audit_status == \"success\"\n          ? this.setState({ auditType: this.props.selectaudit.items.data })\n          : this.setState({ auditType: [] });\n      }\n\n      {\n        audits_status == \"success\"\n          ? this.setState({ currentAuditsList: this.props.audits.items.data })\n          : this.setState({ currentAuditsList: [] });\n      }\n\n      if (audits_id_status == \"success\") {\n        this.setState(\n          {\n            currentAuditsData: this.props.auditsid.items.data,\n            currentUnitsData: this.props.auditsid.items.units,\n          },\n          this.ActionAuditUnits\n        );\n      }\n    }\n  }\n\n  ActionAuditUnits = () => {\n    const { currentAuditsData, currentUnitsData } = this.state;\n\n    let unitArray = currentUnitsData;\n    if (unitArray != undefined) {\n      var filteredUnitId = unitArray\n        .filter((val, x) => {\n          return val.checked == \"true\";\n        })\n        .map((el) => {\n          return el.unit_id;\n        });\n    }\n    let editAuditsData = [];\n    let auditArray = currentAuditsData;\n\n    if (filteredUnitId != undefined) {\n      if (auditArray != undefined) {\n        const updatedUnitId = JSON.parse(\"[\" + filteredUnitId + \"]\");\n        editAuditsData.push({\n          unit_id: updatedUnitId,\n          audit_type: auditArray[0].audit_type,\n          audit_name: auditArray[0].audit_name,\n          ui_order: auditArray[0].ui_order,\n        });\n      }\n    }\n    this.setState({ editAuditsData: editAuditsData }, this.ActionEditAudit);\n  };\n\n  ActionEditAudit = () => {\n    const { openEditAuditsFlag } = this.state;\n\n    if (openEditAuditsFlag) {\n      this.setState({ openEditAudits: true });\n    }\n  };\n\n  DeleteAttachment(record) {\n    const id = record.audit_id;\n    this.props.DeleteAuditMaster(id);\n    console.log(\"deleted\" + record.audit_id);\n    console.log(record);\n  }\n\n  CancelDeleteMeeting = () => {\n    console.log(\"Meeting Canceled\");\n  };\n\n  OpenEditAudits = (record) => {\n    this.setState({ openEditAuditsFlag: true });\n    let args = `audit_id=${record.audit_id}`;\n    //this.props.GetAuditMaster(args);\n    this.props.GetAuditId(args);\n\n    this.setState({\n      auditId: record.audit_id,\n    });\n  };\n\n  CloseEditAudits = () => {\n    this.setState({\n      openEditAudits: false,\n      openEditAuditsFlag: false,\n    });\n    let args = ``;\n    this.props.GetAuditMaster(args);\n    window.location.reload();\n  };\n\n  onChange = (value) => {\n    console.log(\"checked =\", value);\n  };\n\n  resetForm = () => {\n    this.formRef.current.resetFields();\n  };\n\n  updateAudit = (value) => {\n    const { auditId } = this.state;\n    console.log(value);\n\n    let x = value.unit_id;\n    let arrayString = x.join(\",\");\n    console.log(arrayString);\n    this.props.EditAuditMaster(\n      auditId,\n      value.audit_type,\n      value.audit_name,\n      value.ui_order,\n      arrayString\n    );\n  };\n\n  render() {\n    const {\n      openEditAudits,\n      auditType,\n      currentAuditsData,\n      currentUnitsData,\n      currentAuditsList,\n    } = this.state;\n    const { audits } = this.props;\n\n    const columns = [\n      {\n        title: \"Category Name\",\n        dataIndex: \"audit_type\",\n        key: \"audit_type\",\n      },\n      {\n        title: \"Audits\",\n        dataIndex: \"audit_name\",\n        key: \"audit_name\",\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        render: (text, record) => (\n          <div>\n            {/* <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\" ant-btn-no-bg x-button-secondary-no-bg mr-2 only-icon float-left\"\n            >\n              <ProfileOutlined />\n            </Button> */}\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n              onClick={() => {\n                this.OpenEditAudits(record);\n              }}\n            >\n              <EditFilled />\n            </Button>\n            <Popconfirm\n              title=\"Are you sure to delete this Meeting?\"\n              placement=\"topRight\"\n              onConfirm={() => {\n                this.DeleteAttachment(record);\n              }}\n              onCancel={this.CancelDeleteMeeting}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                danger\n              >\n                <DeleteFilled />\n              </Button>\n            </Popconfirm>\n          </div>\n        ),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <div className=\"table-responsive\">\n          {audits.getloading ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <div>\n              <Table dataSource={currentAuditsList} columns={columns} />\n            </div>\n          )}\n        </div>\n        <Drawer\n          title=\"Edit Audits\"\n          placement=\"right\"\n          onClose={this.CloseEditAudits}\n          visible={openEditAudits}\n        >\n          {audits.getstatus == \"request\" ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <div className=\"row col-lg-12 px-0\">\n              <Form\n                layout=\"vertical\"\n                ref={this.formRef}\n                className=\"col-md-12\"\n                size=\"large\"\n                onFinish={this.updateAudit}\n                initialValues={this.state.editAuditsData[0]}\n              >\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\" style={{ width: 300 }}>\n                    <Form.Item\n                      label=\"Category Name\"\n                      name=\"audit_type\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input Category Name!\",\n                        },\n                      ]}\n                    >\n                      <Select placeholder=\"Category Name\">\n                        {auditType &&\n                          auditType.map((audit, index) => (\n                            <Option key={index} value={audit}>\n                              {audit}\n                            </Option>\n                          ))}\n                      </Select>\n                    </Form.Item>\n                  </div>\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Audit\"\n                      name=\"audit_name\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input Audit!\",\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"Audit\" />\n                    </Form.Item>\n                  </div>\n                  ​\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Order\"\n                      name=\"ui_order\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input Order!\",\n                        },\n                      ]}\n                    >\n                      <InputNumber min={1} placeholder=\"Order\" />\n                    </Form.Item>\n                  </div>\n                </div>\n\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item\n                      label=\"Applicability\"\n                      name=\"unit_id\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input Applicability!\",\n                        },\n                      ]}\n                    >\n                      <Select placeholder=\"Select Member\" mode=\"multiple\">\n                        {currentUnitsData &&\n                          currentUnitsData.map((unit, index) => (\n                            <option key={unit.unit_id} value={unit.unit_id}>\n                              {unit.unit_name}\n                            </option>\n                          ))}\n                      </Select>\n                    </Form.Item>\n                  </div>\n                </div>\n                <div className=\"x-controls-section\">\n                  <div className=\"controls\">\n                    <Form.Item>\n                      <div className=\"x-btn-flex\">\n                        <Button\n                          type=\"link\"\n                          htmlType=\"reset\"\n                          className=\"float-right\"\n                          danger\n                          onClick={this.resetForm}\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"primary\"\n                          htmlType=\"submit\"\n                          className=\"float-right\"\n                        >\n                          Save\n                        </Button>\n                      </div>\n                    </Form.Item>\n                  </div>\n                </div>\n              </Form>\n            </div>\n          )}\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const { audits, units, unittype, selectaudit, auditsid } = state;\n  return { audits, units, unittype, selectaudit, auditsid };\n}\nconst actionCreators = {\n  GetAuditMaster: actions.GetAuditMaster,\n  GetAuditId: actions.GetAuditId,\n  EditAuditMaster: actions.EditAuditMaster,\n  DeleteAuditMaster: actions.DeleteAuditMaster,\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n  SelectAuditType: actions.SelectAuditType,\n};\nconst connectedAuditList = connect(mapState, actionCreators)(AuditList);\nexport { connectedAuditList as AuditList };\n","/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/PerformAudits/PerformAudits.js",["663","664","665","666","667","668","669","670","671","672"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport { Form, Select, DatePicker, Button, Breadcrumb, Card, Checkbox, Input, Drawer, Space, Collapse, notification, Tabs, Popconfirm } from 'antd';\nimport { \nHomeOutlined, \nLoading3QuartersOutlined, \nCalendarOutlined, \nCheckCircleFilled, \nPlusOutlined, \nLockFilled,\nTagFilled,\nPlusCircleFilled,\nEditFilled,\nPlayCircleFilled,\nDeleteFilled,\nLoadingOutlined,\nSyncOutlined,\nFullscreenOutlined,\nFullscreenExitOutlined,\nScheduleOutlined\n} from '@ant-design/icons';\nimport moment from 'moment';\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst { TabPane } = Tabs;\nconst dateFormat = 'DD-MM-YYYY';\nconst datetimeFormat = 'DD-MM-YYYY  HH:mm';\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nclass PerformAudits extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nnotification_placement: 'topRight',\nopen_add_recommendations: false,\nopen_edit_recommendations: false,\nopen_view_recommendations: false,\nopen_edit_meeting: false,\nupdate_reminder_email_checked:true,\nactive_single_add_recommendation:true,\nmeeting_details_toggle: true,\nupdate_council_date: '17-02-2021 10:00',\nedit_recommendations: {\nsheRecommendations: [\n{\nSNo: \"1\",\nrecommendation: \"Recommendation1\",\nFPR: \"4\",\ntargetdate: moment('02-02-2021', dateFormat),\nstatus: 'pending'\n},\n{\nSNo: \"2\",\nrecommendation: \"Recommendation2\",\nFPR: \"9\",\ntargetdate: moment('12-12-2021', dateFormat),\nstatus: 'completed'\n},\n{\nSNo: \"3\",\nrecommendation: \"Recommendation3\",\nFPR: \"8\",\ntargetdate: moment('03-05-2022', dateFormat),\nstatus: 'pending'\n},\n{\nSNo: \"4\",\nrecommendation: \"Recommendation4\",\nFPR: \"7\",\ntargetdate: moment('10-11-2021', dateFormat),\nstatus: 'completed'\n},\n{\nSNo: \"5\",\nrecommendation: \"Recommendation5\",\nFPR: \"6\",\ntargetdate: moment('22-08-2021', dateFormat),\nstatus: 'completed'\n},\n{\nSNo: \"6\",\nrecommendation: \"Recommendation6\",\nFPR: \"5\",\ntargetdate: moment('01-09-2021', dateFormat),\nstatus: 'pending'\n},\n],\n},\n}\n}\ncomponentDidMount() {\nlet user = JSON.parse(localStorage.getItem('user'));\nconsole.log('user');\nconsole.log(user);\nthis.props.SelectUnitType();\n}\ncomponentDidUpdate(prevProps){\nif(prevProps !== this.props){\n}\n}\nstartMeeting = () => {\nconst {notification_placement} = this.state;\nnotification.success({\nclassName: 'successnotice',\nmessage: `Success Notice`,\ndescription:\n'SHE Council Meeting Started Successfully',\nnotification_placement,\n//duration: 0,\nicon: <CheckCircleFilled style={{ color: '#fff' }} />,\n});\n}\nopenEditMeeting = () => {\nthis.setState({open_edit_meeting: true});\n}\ncloseEditMeeting = () => {\nthis.setState({open_edit_meeting: false});\n}\nopenAddRecommendations = () => {\nthis.setState({open_add_recommendations: true});  \n}\ncloseAddRecommendations = () => {\nthis.setState({open_add_recommendations: false});  \n}\nopenEditRecommendations = () => {\nthis.setState({open_edit_recommendations: true});\n}\ncloseEditRecommendations = () => {\nthis.setState({open_edit_recommendations: false});\n}\nopenViewRecommendations = () => {\nthis.setState({open_view_recommendations: true});\n}\ncloseViewRecommendations = () => {\nthis.setState({open_view_recommendations: false});\n}\nactiveSingleAddRecommendation = () => {\nthis.setState({active_single_add_recommendation: !this.state.active_single_add_recommendation});\n}\nmeetingDetailsToggle = () => {\nthis.setState({meeting_details_toggle: !this.state.meeting_details_toggle});\n}\nrender(){\nconst {\nnotification_placement, open_add_recommendations, open_edit_recommendations, \nopen_view_recommendations, open_edit_meeting, update_reminder_email_checked, \nactive_single_add_recommendation, meeting_details_toggle\n} = this.state\nreturn(\n<React.Fragment>\n<div className=\"x-page-container\">\n<div className=\"row\">\n      <div className=\"x-page-title\">\n        <h1>Perform Audits</h1>\n      </div>\n    </div>\n    <div className=\"row x-breadcrumb\">\n      <Breadcrumb>\n        <Link to=\"/dashboard\">\n        <Breadcrumb.Item>\n          <HomeOutlined />\n        </Breadcrumb.Item>\n        </Link>\n        <Link to=\"/auditdashboard\">\n        <Breadcrumb.Item>\n          <span>Audit Protocol</span>\n        </Breadcrumb.Item>\n        </Link>\n        <Breadcrumb.Item>Perform Audits</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n    <div className=\"row x-row mt-4\">\n    <div className=\"text-left x-form-card col-md-12 px-0\">\n      <Card title=\"List of Audits\" bordered={false} className=\"x-card-no-padding\">\n        <div className=\"row col-lg-12 col-xl-12 px-0\">\n          <div className=\"x-table-filters\">\n            <div className=\"x-controls mr-4\"  style={{ width: 250 }}>\n            <Select placeholder=\"Category Name\" size=\"large\">\n              <Option value=\"1\">Management System</Option>\n              <Option value=\"2\">Safety Management</Option>\n              <Option value=\"3\">Environment Management</Option>\n              <Option value=\"4\">Health Management</Option>\n            </Select>\n          </div>\n          <div className=\"x-controls mr-4\">\n            <Button type=\"primary\" size=\"small\">Filter</Button>\n          </div>\n        </div>\n    </div>\n    <div className=\"row col-lg-12 col-xl-12 px-0\">\n    <div className=\"table-responsive\">\n    <table className=\"table table-hover\">\n    <thead>\n    <tr>\n    <th>Category Name</th>\n    <th>Audits</th>\n    <th className=\"text-center\" style={{width:200}}>Action</th>\n    </tr>\n    </thead>\n    <tbody>    \n    <tr>\n    <td>Management System</td>\n    <td>SHE Management</td>\n    <td className=\"text-center x-div-flex\">\n    <Button type=\"primary\" size=\"small\" className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\">\n    <ScheduleOutlined />\n    Audit\n    </Button>\n    </td>\n    </tr>\n    <tr>\n    <td>Safety Management\t</td>\n    <td>HIRA,JSA&HAZOP</td>\n    <td className=\"text-center  x-div-flex\">\n    <Button type=\"primary\" size=\"small\" className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\">\n    <EditFilled />\n    Audit\n    </Button>\n    </td>\n    </tr>\n    </tbody>\n    </table>\n    </div>\n    </div>\n    </Card>\n  </div>\n  </div>\n  <Drawer\n    title=\"Edit SHE Meeting\"\n    placement=\"right\"\n    onClose={this.closeEditMeeting}\n    visible={open_edit_meeting}\n    >\n    <div className=\"row x-meeting-details\">\n      <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" onFinish={this.editMeeting} className=\"col-md-12\" layout=\"vertical\" size=\"large\"\n      initialValues={{\n      update_location_id: '3p',\n      update_unit_id:'plant1',\n      update_council_date:moment(this.state.update_council_date, datetimeFormat),\n      update_council_members:['1','5'],\n      update_council_agenda: ['a1','a2'],\n      }}\n      >\n      <div className=\"x-controls-section\">\n        <div className=\"controls\" style={{ width: 300 }}>\n        <Form.Item\n        label=\"Location Type\"\n        name=\"update_location_id\"\n        rules={[{ required: true, message: 'Please input Location Type!' }]}\n        >\n        <Select placeholder=\"Select Location Type\">\n          <Option value=\"plant\">Plant</Option>\n          <Option value=\"3p\">3P</Option>\n          <Option value=\"depot\">depot</Option>\n        </Select>\n        </Form.Item>\n      </div>\n      <div className=\"controls\" style={{ width: 300 }}>\n      <Form.Item\n      label=\"Unit\"\n      name=\"update_unit_id\"\n      rules={[{ required: true, message: 'Please input Unit!' }]}\n      >\n      <Select placeholder=\"Select Unit\">\n        <Option value=\"plant1\">Plant1</Option>\n        <Option value=\"plant2\">Plant2</Option>\n        <Option value=\"plant3\">plant3</Option>\n      </Select>\n      </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ width: 350 }}>\n    <Form.Item\n    label=\"Date\"\n    name=\"update_council_date\"\n    rules={[{ required: true, message: 'Please input Date!' }]}\n    >\n    <DatePicker showTime format={datetimeFormat}  onChange={this.handleupdateDate}/>\n    </Form.Item>\n    </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\">\n        <Form.Item\n        label=\"Participants\"\n        name=\"update_council_members\"\n        rules={[{ required: true, message: 'Please input Member!' }]}\n        >\n        <Select  placeholder=\"Select Member\" mode=\"multiple\">\n          <Option value=\"1\">Member 1</Option>\n          <Option value=\"2\">Member 2</Option>\n          <Option value=\"3\">Member 3</Option>\n          <Option value=\"4\">Member 4</Option>\n          <Option value=\"5\">Member 5</Option>\n          <Option value=\"6\">Member 6</Option>\n          <Option value=\"7\">Member 7</Option>\n          <Option value=\"8\">Member 8</Option>\n          <Option value=\"9\">Member 9</Option>\n        </Select>\n        </Form.Item>\n      </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\">\n        <Form.Item\n        label=\"Agenda of Meeting\"\n        name=\"update_council_agenda\"\n        rules={[{ required: true, message: 'Please input Date!' }]}\n        >\n        <Select placeholder=\"Select Agenda of Meeting\" mode=\"multiple\">\n          <Option value=\"a1\">External and internal issues</Option>\n          <Option value=\"a2\">SHE concerns of members</Option>\n          <Option value=\"a3\">SHE concerns of service providers</Option>\n          <Option value=\"a4\">Communication of changes</Option>\n        </Select>\n        </Form.Item>\n      </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\"  style={{ width: 200 }}>\n      <Form.Item\n        label=\"Reminder Email\"\n        name=\"update_reminder_email\"\n        >\n        <Checkbox checked={update_reminder_email_checked} onChange={this.updatereminderemail}>Send Reminder Email</Checkbox>\n      </Form.Item>\n    </div>\n    <div className={update_reminder_email_checked ? \"controls x-inline-formcontrols\" : \"d-none\"} style={{ width: 'auto' }}>\n    <Form.Item\n      label=\"\"\n      name=\"daysbefore\"\n      >\n      <Input/>\n      <div> Days Before</div>\n    </Form.Item>\n    </div>\n    </div>\n    <div className=\"x-controls-section\">\n      <div className=\"controls\">\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"float-right\">\n          Save\n          </Button>\n          <Button type=\"link\" htmlType=\"submit\" className=\"float-right\" danger>\n          Cancel\n          </Button>\n        </Form.Item>\n      </div>\n    </div>\n    </Form>\n    </div>\n  </Drawer>\n  <Drawer\n    title=\"Add SHE Meeting Recommendations\"\n    placement=\"right\"\n    onClose={this.closeAddRecommendations}\n    visible={open_add_recommendations}\n    >\n    <div className=\"row x-meeting-details\">\n      <div className={meeting_details_toggle ? 'col-lg-9 px-0' : 'col-lg-12 px-0'}>\n      <Button type=\"primary\" onClick={this.meetingDetailsToggle} size=\"small\" \n        className=\"x-button-secondary x-toggle-meeting\">\n        {meeting_details_toggle ? \n        <FullscreenOutlined />\n        : \n        <FullscreenExitOutlined />\n        }\n      </Button>\n      <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" onFinish={this.submitRecommendations} className=\"col-md-12\" layout=\"vertical\" size=\"large\">\n        <div className=\"x-dynamic-container\">\n          <Form.List name=\"sheRecommendations\">\n            {(fields, { add, remove }) => (\n            <>\n            <Form.Item>\n              <Button type=\"dashed\" style={{width: 'auto', display: 'flex', alignItems: 'center'}} onClick={() =>\n              add()} block icon={\n              <PlusOutlined />\n              }>\n              Add Recommendations\n              </Button>\n            </Form.Item>\n            <div className=\"x-dynamic-form-container\">\n              <div className=\"x-controls-section x-dynamic-label\" style={{height:50}}>\n                <div className=\"controls\"  style={{ 'minWidth': 70, width: 70 }}>\n                <Form.Item label=\"S.No\">\n                </Form.Item>\n              </div>\n              <div className=\"controls\" style = {meeting_details_toggle ?  {'minWidth': 500, width: 500}  : {'minWidth': 700, width: 700} }>\n              <Form.Item label=\"Recommendations\">\n              </Form.Item>\n            </div>\n            <div className=\"controls\"  style={{ 'minWidth': 300, width: 300 }}>\n            <Form.Item label=\"FPR\">\n            </Form.Item>\n        </div>\n        <div className=\"controls\"  style={{ 'minWidth': 120, width: 120 }}>\n        <Form.Item label=\"Target Date\">\n        </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ 'minWidth': 100, width: 100 }}>\n    <Form.Item label=\"Actions\">\n    </Form.Item>\n    </div>\n    </div>\n    {fields.map(field => (\n    <Space key={field.key} style={{ display: 'flex' }} align=\"baseline\" className=\"x-dynamic-form x-dynamic-form-visible-controls mb-3\">\n    <Form.Item\n    {...field}\n    name={[field.name, 'S.No']}\n    fieldKey={[field.fieldKey, 'S.No']}\n    style={{width:70}}\n    >\n    <Input  placeholder=\"S.No\" />\n    </Form.Item>  \n    <Form.Item\n    {...field}\n    name={[field.name, 'recommendation']}\n    fieldKey={[field.fieldKey, 'recommendation']}\n    rules={[{ required: true, message: 'Missing Recommendation' }]}\n    style = {meeting_details_toggle ?  {width: 500}  : {width: 700} }\n    >\n    <TextArea rows={1}  placeholder=\"Recommendation\"></TextArea>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'FPR']}\n    fieldKey={[field.fieldKey, 'FPR']}\n    rules={[{ required: true, message: 'Please input Member!' }]}\n    style={{'width':300}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"1\">FPR 1</Option>\n    <Option value=\"2\">FPR 2</Option>\n    <Option value=\"3\">FPR 3</Option>\n    <Option value=\"4\">FPR 4</Option>\n    <Option value=\"5\">FPR 5</Option>\n    <Option value=\"6\">FPR 6</Option>\n    <Option value=\"7\">FPR 7</Option>\n    <Option value=\"8\">FPR 8</Option>\n    <Option value=\"9\">FPR 9</Option>\n    </Select>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'targetdate']}\n    fieldKey={[field.fieldKey, 'targetdate']}\n    rules={[{ required: true, message: 'Missing Target Date' }]}\n    style={{'width':130}}\n    >\n    <DatePicker format={dateFormat}  placeholder=\"Target Date\"/>\n    </Form.Item>\n    <div  style={{ width: 100, paddingTop: 7, paddingBottom: 7 }}>\n    <Button type=\"primary\" danger size=\"small\" className=\"mr-2 only-icon ant-btn-no-bg ant-btn-dangerous-no-bg\" onClick={() =>\n    remove(field.name)}><DeleteFilled /></Button>\n    </div>\n    </Space>\n    ))}\n    </div>\n    </>\n    )}\n    </Form.List>\n    </div>\n    <Form.Item>\n    <div className=\"x-recommendation-btn\">\n    <Button type=\"link\" htmlType=\"submit\" className=\"float-right\" danger>\n    Cancel\n    </Button>\n    <Button type=\"primary\" htmlType=\"submit\" className=\"float-right mt-4\">\n    Save All\n    </Button>\n    </div>\n    </Form.Item>\n    </Form>\n    </div>\n    <div className={meeting_details_toggle ? 'col-lg-3 px-0' : 'col-lg-3 px-0 d-none'}>\n    <div className=\"x-meeting-data x-panel-1\">\n      <div className=\"x-panel-1-header with-btn\">\n        <div>\n          Meeting Details \n        </div>\n        <div>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"ant-btn-secondary float-right\"  size=\"large\" disabled>\n          Submit\n          </Button>\n        </div>\n      </div>\n      <div className=\"x-panel-1-body\">\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Location Type</div>\n          <div className=\"x-section-content\">Plant</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Unit</div>\n          <div className=\"x-section-content\">Plant 1</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Date</div>\n          <div className=\"x-section-content\">19-02-2021 12:15</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Agenda</div>\n          <div className=\"x-section-content\">\n            <ul className=\"x-list-items\">\n              <li>External and internal issues</li>\n              <li>SHE concerns of members</li>\n              <li>SHE concerns of service providers</li>\n              <li>Communication of changes</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Participants</div>\n          <div className=\"x-section-content\">\n            <ul className=\"x-list-items\">\n              <li>Lionel</li>\n              <li>Kalai</li>\n              <li>Jack</li>\n              <li>Krish</li>\n              <li>Janavi</li>\n              <li>Murali</li>\n              <li>Michel</li>\n              <li>Malar</li>\n              <li>John</li>\n              <li>Venba</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Reminder Email</div>\n          <div className=\"x-section-content\">2 Days Before</div>\n        </div>\n      </div>\n    </div>\n    </div>\n    </div>\n  </Drawer>\n  <Drawer\n    title=\"Edit SHE Meeting Recommendations\"\n    placement=\"right\"\n    onClose={this.closeEditRecommendations}\n    initialValues={this.state.edit_recommendations}\n    visible={open_edit_recommendations}\n    >\n    <div className=\"row x-meeting-details\">\n      <div className={meeting_details_toggle ? 'col-lg-9 px-0' : 'col-lg-12 px-0'}>\n      <Button type=\"primary\" onClick={this.meetingDetailsToggle} size=\"small\" \n        className=\"x-button-secondary x-toggle-meeting\">\n        {meeting_details_toggle ? \n        <FullscreenOutlined />\n        : \n        <FullscreenExitOutlined />\n        }\n      </Button>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n          <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" \n            className=\"col-md-12\" \n            layout=\"vertical\" size=\"large\"  \n            initialValues={this.state.edit_recommendations}\n            onValuesChange={(changedValues, allValues) =>\n            {\n            this.getUpdatedRecommendationData(changedValues, allValues);\n            }}\n            >\n            <div className=\"x-dynamic-container\">\n              <Form.List name=\"sheRecommendations\">\n                {(fields, { add, remove }) => (\n                <>\n                <div className=\"x-dynamic-form-container\" id=\"x-dynamic-form-container\">\n                  <div className=\"x-controls-section x-dynamic-label\" style={{height:50}}>\n                    <div className=\"controls\"  style={{ 'minWidth':70, width: 70 }}>\n                    <Form.Item label=\"S.No\">\n                    </Form.Item>\n                  </div>\n                  <div className=\"controls\"  style = {meeting_details_toggle ?  {'minWidth': 500, width: 500}  : {'minWidth': 700, width: 700} }>\n                  <Form.Item label=\"Recommendations\">\n                  </Form.Item>\n                </div>\n                <div className=\"controls\"  style={{ 'minWidth':300, width: 300 }}>\n                <Form.Item label=\"FPR\">\n                </Form.Item>\n            </div>\n            <div className=\"controls\"  style={{ 'minWidth':165, width: 165 }}>\n            <Form.Item label=\"Target Date\">\n            </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ 'minWidth':165, width: 165 }}>\n    <Form.Item label=\"Status\">\n    </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ 'minWidth':100, width: 100 }}>\n    <Form.Item label=\"Actions\">\n    </Form.Item>\n    </div>\n    </div>\n    {fields.map((field, index, record) => (\n    <Space key={field.key} value={field.value} style={{ display: 'flex' }} align=\"baseline\" className=\"x-dynamic-form\" id={`x-recommendation-list${index}`}>\n    <Form.Item\n    {...field}\n    name={[field.name, 'SNo']}\n    fieldKey={[field.fieldKey, 'SNo']}\n    style={{width:70}}\n    >\n    <Input  placeholder=\"S.No\" />\n    </Form.Item>  \n    <Form.Item\n    {...field}\n    name={[field.name, 'recommendation']}\n    fieldKey={[field.fieldKey, 'recommendation']}\n    rules={[{ required: true, message: 'Missing Recommendation' }]}\n    style = {meeting_details_toggle ?  {minWidth: 500}  : {minWidth: 700} }\n    >\n    <TextArea rows={1}  placeholder=\"Recommendation\"></TextArea>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'FPR']}\n    fieldKey={[field.fieldKey, 'FPR']}\n    rules={[{ required: true, message: 'Please input Member!' }]}\n    style={{'minWidth':300}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"1\">FPR 1</Option>\n    <Option value=\"2\">FPR 2</Option>\n    <Option value=\"3\">FPR 3</Option>\n    <Option value=\"4\">FPR 4</Option>\n    <Option value=\"5\">FPR 5</Option>\n    <Option value=\"6\">FPR 6</Option>\n    <Option value=\"7\">FPR 7</Option>\n    <Option value=\"8\">FPR 8</Option>\n    <Option value=\"9\">FPR 9</Option>\n    </Select>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'targetdate']}\n    fieldKey={[field.fieldKey, 'targetdate']}\n    rules={[{ required: true, message: 'Missing Target Date' }]}\n    style={{'minWidth':175}}\n    >\n    <DatePicker format={dateFormat} onChange={this.updateTargetDate}  placeholder=\"Target Date\"/>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'status']}\n    fieldKey={[field.fieldKey, 'status']}\n    rules={[{ required: true, message: 'Please input Status!' }]}\n    style={{'minWidth':165}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"completed\">Completed</Option>\n    <Option value=\"pending\">Pending</Option>\n    </Select>\n    </Form.Item>\n    <div className=\"x-action-btns\" style={{ width: 100, paddingTop: 7, paddingBottom: 7 }}>\n    <Button type=\"primary\" size=\"small\" className=\"mr-2 x-initiate-edit-btn only-icon  ant-btn-no-bg ant-btn-primary-no-bg\"  onClick={() => this.initiateUpdateRecommendation(field.key)}><EditFilled /></Button>\n    <Button type=\"primary\" size=\"small\" className=\"mr-2 x-edit-btn icon-with-text\"  onClick={(form) =>\n    {\n    this.updateRecommendation(index, field);\n    }}>Save</Button>\n    <Button type=\"primary\" danger size=\"small\" className=\"mr-2 only-icon ant-btn-no-bg ant-btn-dangerous-no-bg  ant-btn-no-bg ant-btn-dangerous-no-bg\"  onClick={() =>\n    remove(field.name)}><DeleteFilled /></Button>\n    </div>\n    </Space>\n    ))}\n    </div>\n    </>\n    )}\n    </Form.List>\n    </div>\n    </Form>\n    <div className=\"mt-4\">\n    <Form  name=\"dynamic_recommendations\" autoComplete=\"off\" onFinish={this.submitSingleAddRecommendations} className=\"col-md-12\" layout=\"vertical\" size=\"large\">\n    <div className=\"x-dynamic-container\">\n    <Form.List name=\"sheRecommendations\">\n    {(fields, { add, remove }) => (\n    <>\n    <Form.Item>\n    <Button type=\"dashed\" disabled = {!active_single_add_recommendation} style={{width: 'auto', display: 'flex', alignItems: 'center'}} onClick={() =>\n    {add(); this.activeSingleAddRecommendation();}} block icon={\n    <PlusOutlined />\n    }>\n    Add Recommendations\n    </Button>\n    </Form.Item>\n    <div className=\"x-dynamic-form-container\" style={{'minHeight':'200px'}}>\n    <div className=\"x-controls-section x-dynamic-label\" style={{height:50}}>\n    <div className=\"controls\"  style={{ 'minWidth': 70, width: 70 }}>\n    <Form.Item label=\"S.No\">\n    </Form.Item>\n    </div>\n    <div className=\"controls\"  style = {meeting_details_toggle ?  {'minWidth': 500, width: 500}  : {'minWidth': 700, width: 700} }>\n    <Form.Item label=\"Recommendations\">\n    </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ 'minWidth': 300, width: 300 }}>\n    <Form.Item label=\"FPR\">\n    </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ 'minWidth': 165, width: 165 }}>\n    <Form.Item label=\"Target Date\">\n    </Form.Item>\n    </div>\n    <div className=\"controls\"  style={{ 'minWidth': 100, width: 100 }}>\n    <Form.Item label=\"Actions\">\n    </Form.Item>\n    </div>\n    </div>\n    {fields.map(field => (\n    <Space key={field.key} style={{ display: 'flex' }} align=\"baseline\" className=\"x-dynamic-form x-dynamic-form-visible-controls\">\n    <Form.Item\n    {...field}\n    name={[field.name, 'S.No']}\n    fieldKey={[field.fieldKey, 'S.No']}\n    style={{width:70}}\n    >\n    <Input  placeholder=\"S.No\" />\n    </Form.Item>  \n    <Form.Item\n    {...field}\n    name={[field.name, 'recommendation']}\n    fieldKey={[field.fieldKey, 'recommendation']}\n    rules={[{ required: true, message: 'Missing Recommendation' }]}\n    style = {meeting_details_toggle ?  {minWidth: 500}  : {minWidth: 700} }\n    >\n    <TextArea rows={1}  placeholder=\"Recommendation\"></TextArea>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'FPR']}\n    fieldKey={[field.fieldKey, 'FPR']}\n    rules={[{ required: true, message: 'Please input Member!' }]}\n    style={{'minWidth':300}}\n    >\n    <Select  placeholder=\"Select FPR\">\n    <Option value=\"1\">FPR 1</Option>\n    <Option value=\"2\">FPR 2</Option>\n    <Option value=\"3\">FPR 3</Option>\n    <Option value=\"4\">FPR 4</Option>\n    <Option value=\"5\">FPR 5</Option>\n    <Option value=\"6\">FPR 6</Option>\n    <Option value=\"7\">FPR 7</Option>\n    <Option value=\"8\">FPR 8</Option>\n    <Option value=\"9\">FPR 9</Option>\n    </Select>\n    </Form.Item>\n    <Form.Item\n    {...field}\n    name={[field.name, 'targetdate']}\n    fieldKey={[field.fieldKey, 'targetdate']}\n    rules={[{ required: true, message: 'Missing Target Date' }]}\n    style={{'minWidth':165, 'marginRight': '15px'}}\n    >\n    <DatePicker format={dateFormat}  placeholder=\"Target Date\"/>\n    </Form.Item>\n    <div className=\"x-action-btns\"  style={{ width: 100, paddingTop: 5, paddingBottom: 5 }}>\n    <Button type=\"primary\" size=\"small\" className=\"mr-2 only-icon icon-with-text\"  htmlType=\"submit\">Save</Button>\n    <Button type=\"primary\" danger size=\"small\" className=\"mr-2 only-icon   ant-btn-no-bg ant-btn-dangerous-no-bg\"  onClick={() =>\n    {remove(field.name); this.activeSingleAddRecommendation()}}><DeleteFilled /></Button>\n    </div>\n    </Space>\n    ))}\n    </div>\n    </>\n    )}\n    </Form.List>\n    </div>\n    </Form>\n    </div>\n    </TabPane>\n    <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n    <div className=\"table-responsive\">\n    <table className=\"table table-hover\">\n    <thead>\n    <tr>\n    <th>S.No</th>\n    <th>Recommendations</th>\n    <th>FPR</th>\n    <th>Target Date</th>\n    <th style={{width:50}} className=\"text-center\">Status</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n    <td>1</td>\n    <td>Recommendations1</td>\n    <td>FPR4</td>\n    <td>02-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-completed\">\n    <CheckCircleFilled />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>2</td>\n    <td>Recommendations2</td>\n    <td>FPR4</td>\n    <td>10-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-assined\">\n    <Loading3QuartersOutlined />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>3</td>\n    <td>Recommendations3</td>\n    <td>FPR4</td>\n    <td>12-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-assined\">\n    <Loading3QuartersOutlined />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>4</td>\n    <td>Recommendations4</td>\n    <td>FPR4</td>\n    <td>22-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-completed\">\n    <CheckCircleFilled />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>5</td>\n    <td>Recommendations5</td>\n    <td>FPR4</td>\n    <td>16-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-completed\">\n    <CheckCircleFilled />\n    </span>\n    </td>\n    </tr>\n    <tr>\n    <td>6</td>\n    <td>Recommendations6</td>\n    <td>FPR7</td>\n    <td>16-02-2021</td>\n    <td className=\"text-center x-status-icon\">\n    <span className=\"x-status-icon-due\">\n    <Loading3QuartersOutlined />\n    </span>\n    </td>\n    </tr>\n    </tbody>\n    </table>\n    </div>\n    </TabPane>\n    </Tabs>\n    </div>\n    <div className={meeting_details_toggle ? 'col-lg-3 px-0' : 'col-lg-3 px-0 d-none'}>\n    <div className=\"x-meeting-data x-panel-1\">\n      <div className=\"x-panel-1-header with-btn\">\n        <div>\n          Meeting Details\n        </div>\n        <div>\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"ant-btn-secondary float-right\">\n          Submit\n          </Button>\n        </div>\n      </div>\n      <div className=\"x-panel-1-body\">\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Location Type</div>\n          <div className=\"x-section-content\">Plant</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Unit</div>\n          <div className=\"x-section-content\">Plant 1</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Date</div>\n          <div className=\"x-section-content\">19-02-2021 12:15</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Agenda</div>\n          <div className=\"x-section-content\">\n            <ul className=\"x-list-items\">\n              <li>External and internal issues</li>\n              <li>SHE concerns of members</li>\n              <li>SHE concerns of service providers</li>\n              <li>Communication of changes</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Participants</div>\n          <div className=\"x-section-content\">\n            <ul className=\"x-list-items\">\n              <li>Lionel</li>\n              <li>Kalai</li>\n              <li>Jack</li>\n              <li>Krish</li>\n              <li>Janavi</li>\n              <li>Murali</li>\n              <li>Michel</li>\n              <li>Malar</li>\n              <li>John</li>\n              <li>Venba</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Reminder Email</div>\n          <div className=\"x-section-content\">2 Days Before</div>\n        </div>\n      </div>\n    </div>\n    </div>\n    </div>\n    <div className=\"row x-meeting-details\">\n    </div>\n  </Drawer>\n  <Drawer\n    title=\"View SHE Meeting Recommendations\"\n    placement=\"right\"\n    onClose={this.closeViewRecommendations}\n    visible={open_view_recommendations}\n    >\n    <div className=\"row x-meeting-details\">\n      <div className={meeting_details_toggle ? 'col-lg-9 px-0' : 'col-lg-12 px-0'}>\n      <Button type=\"primary\" onClick={this.meetingDetailsToggle} size=\"small\" \n        className=\"x-button-secondary x-toggle-meeting\">\n        {meeting_details_toggle ? \n        <FullscreenOutlined />\n        : \n        <FullscreenExitOutlined />\n        }\n      </Button>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th>S.No</th>\n                  <th>Recommendations</th>\n                  <th>FPR</th>\n                  <th>Target Date</th>\n                  <th style={{width:50}} className=\"text-center\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Recommendations1</td>\n                  <td>FPR4</td>\n                  <td>02-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-completed\">\n                      <CheckCircleFilled />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Recommendations2</td>\n                  <td>FPR4</td>\n                  <td>10-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-assined\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>3</td>\n                  <td>Recommendations3</td>\n                  <td>FPR4</td>\n                  <td>12-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-assined\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>4</td>\n                  <td>Recommendations4</td>\n                  <td>FPR4</td>\n                  <td>22-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-completed\">\n                      <CheckCircleFilled />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>5</td>\n                  <td>Recommendations5</td>\n                  <td>FPR4</td>\n                  <td>16-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-completed\">\n                      <CheckCircleFilled />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>6</td>\n                  <td>Recommendations6</td>\n                  <td>FPR7</td>\n                  <td>16-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-due\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </TabPane>\n        <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th>S.No</th>\n                  <th>Recommendations</th>\n                  <th>FPR</th>\n                  <th>Target Date</th>\n                  <th style={{width:50}} className=\"text-center\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>1</td>\n                  <td>Recommendations111</td>\n                  <td>FPR3</td>\n                  <td>08-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-assined\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Recommendations222</td>\n                  <td>FPR2</td>\n                  <td>01-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-completed\">\n                      <CheckCircleFilled />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>3</td>\n                  <td>Recommendations333</td>\n                  <td>FPR1</td>\n                  <td>02-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-completed\">\n                      <CheckCircleFilled />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>4</td>\n                  <td>Recommendations444</td>\n                  <td>FPR6</td>\n                  <td>12-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-assined\">\n                      <Loading3QuartersOutlined />\n                    </span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>5</td>\n                  <td>Recommendations555</td>\n                  <td>FPR8</td>\n                  <td>26-02-2021</td>\n                  <td className=\"text-center x-status-icon\">\n                    <span className=\"x-status-icon-completed\">\n                      <CheckCircleFilled />\n                    </span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </TabPane>\n      </Tabs>\n    </div>\n    <div className={meeting_details_toggle ? 'col-lg-3 px-0' : 'col-lg-3 px-0 d-none'}>\n    <div className=\"x-meeting-data x-panel-1\">\n      <div className=\"x-panel-1-header with-btn\">\n        <div>\n          Meeting Details \n        </div>\n        <div className=\"x-button-secondary-no-bg\">\n          12-04-2021\n        </div>\n      </div>\n      <div className=\"x-panel-1-body\">\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Location Type</div>\n          <div className=\"x-section-content\">Plant</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Unit</div>\n          <div className=\"x-section-content\">Plant 1</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Date</div>\n          <div className=\"x-section-content\">19-02-2021 12:15</div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Agenda</div>\n          <div className=\"x-section-content\">\n            <ul className=\"x-list-items\">\n              <li>External and internal issues</li>\n              <li>SHE concerns of members</li>\n              <li>SHE concerns of service providers</li>\n              <li>Communication of changes</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Participants</div>\n          <div className=\"x-section-content\">\n            <ul className=\"x-list-items\">\n              <li>Lionel</li>\n              <li>Kalai</li>\n              <li>Jack</li>\n              <li>Krish</li>\n              <li>Janavi</li>\n              <li>Murali</li>\n              <li>Michel</li>\n              <li>Malar</li>\n              <li>John</li>\n              <li>Venba</li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"x-section\">\n          <div className=\"x-section-title\">Reminder Email</div>\n          <div className=\"x-section-content\">2 Days Before</div>\n        </div>\n      </div>\n    </div>\n    </div>\n    </div>\n  </Drawer>\n\n</div>\n\n</React.Fragment>\n);\n}\n}    \nfunction mapState(state) {\nconst {  members, unittype, units, agendafor, agenda, mrmmeeting, mrmrecommendation } = state;\nreturn { members, unittype, units, agendafor, agenda, mrmmeeting, mrmrecommendation };\n}\nconst actionCreators = {\nSelectUnits: actions.SelectUnits,\nSelectUnitType: actions.SelectUnitType,\nselectAgenda: actions.selectAgenda,\nSelectAgendaFor: actions.SelectAgendaFor,\nSelectMembers: actions.SelectMembers,\n};\nconst connectedPerformAudits = connect(mapState, actionCreators)(PerformAudits);\nexport { connectedPerformAudits as PerformAudits };","/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/PerformMeetings/PerformMeetings.js",["673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  DatePicker,\n  Button,\n  Breadcrumb,\n  Card,\n  Checkbox,\n  Input,\n  Drawer,\n  Space,\n  Collapse,\n  Tabs,\n  Popconfirm,\n  Table,\n  Spin,\n  Pagination,\n  Modal\n} from \"antd\";\nimport {\n  HomeOutlined,\n  Loading3QuartersOutlined,\n  CalendarOutlined,\n  CheckCircleFilled,\n  PlusOutlined,\n  LockFilled,\n  TagFilled,\n  PlusCircleFilled,\n  EditFilled,\n  PlayCircleFilled,\n  DeleteFilled,\n  LoadingOutlined,\n  SyncOutlined,\n  FullscreenOutlined,\n  FullscreenExitOutlined,\n  CheckOutlined\n} from \"@ant-design/icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport moment from \"moment\";\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Panel } = Collapse;\nconst { TabPane } = Tabs;\nconst dateFormat = \"DD-MM-YYYY\";\nconst dateTimeFormat = \"DD-MM-YYYY  HH:mm\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nclass PerformMeetings extends Component {\n  formRef1 = React.createRef();\n  formRef = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      openAddRecommendations: false,\n      recommendationApiCall: false,\n      openEditRecommendations: false,\n      openViewRecommendations: false,\n      updateReminderEmailChecked: true,\n      activeSingleAddRecommendation: true,\n      meetingDetailsToggle: false,\n      updateCouncilDate: \"17-02-2021 10:00\",\n      currentMeetingData: [],\n      membersData: [],\n      unitType: [],\n      units: [],\n      currentUnits: \"\",\n      currentUnitType: \"\",\n      currentSheMeetingId: \"\",\n      currentSheMeetingType: \"\",\n      date1: \"\",\n      date2: \"\",\n      changeLocationType: false,\n\n      editRecommendations: {\n        sheRecommendations: [\n          // {\n          //   she_meeting_recommendation_id: \"1\",\n          //   she_meeting_recommendation_name: \"Recommendation1\",\n          //   she_meeting_recommendation_fpr_id: \"4\",\n          //   she_meeting_recommendation_targetdate: moment(\n          //     \"02-02-2021\",\n          //     dateFormat\n          //   ),\n          //   status: \"pending\",\n          // },\n          // {\n          //   she_meeting_recommendation_id: \"2\",\n          //   she_meeting_recommendation_name: \"Recommendation2\",\n          //   she_meeting_recommendation_fpr_id: \"9\",\n          //   she_meeting_recommendation_targetdate: moment(\n          //     \"12-12-2021\",\n          //     dateFormat\n          //   ),\n          //   status: \"completed\",\n          // },\n        ],\n      },\n      currentOffset: 0,\n      startDate: moment(),\n      SheMeetingAddfirststatus: false,\n      renderForm: false,\n      currentMeetingType: \"\",\n      FilterAction: false,\n      fCurrentUnits: \"\",\n      fCurrentUnitType: \"\",\n      schedulerMeetingSubTypeData: [],\n      openApproveMeeting: false\n    };\n    this.UpdatedRecommendationData = null;\n  }\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    {\n      currentUserRollId == 3\n        ? this.setState({\n            userRoleSubAdmin: true,\n          })\n        : this.setState({\n            userRoleSubAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        fCurrentUnits: user.unit_id,\n        fCurrentUnitType: user.unit_type,\n      },\n      this.ActionRoleBased\n    );\n    this.props.SelectUnitType();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let membersStatus = this.props.members.selectstatus;\n      let sheMeetingStatus = this.props.shemeeting.getstatus;\n      let sheRecommendationStatus = this.props.sherecommendations.getstatus;\n      let unitsStatus = this.props.units.status;\n      let unittypeStatus = this.props.unittype.status;\n      let schedulerMeetingSubTypeStatus =\n        this.props.schedulermeetingsubtype.status;\n\n      {\n        membersStatus == \"success\"\n          ? this.setState({ membersData: this.props.members.items.data })\n          : this.setState({ membersData: [] });\n      }\n      if (sheRecommendationStatus == \"request\") {\n        this.setState({ renderForm: false });\n      } else if (sheRecommendationStatus == \"success\") {\n        {\n          this.ActionSheRecommendation();\n        }\n      } else if (sheRecommendationStatus == \"failure\") {\n        {\n          this.setState({\n            renderForm: true,\n            currentRecommendationsData: [],\n            editRecommendations: [],\n          });\n        }\n      }\n      {\n        sheMeetingStatus == \"success\"\n          ? this.setState({\n              listMeeting: this.props.shemeeting.items.data,\n              totalCount: this.props.shemeeting.items.total_count,\n            })\n          : this.setState({\n              listMeeting: [],\n              totalCount: 0,\n            });\n      }\n\n      {\n        unittypeStatus == \"success\"\n          ? this.setState({\n              unitTypeData: this.props.unittype.items.data,\n            })\n          : this.setState({\n              unitTypeData: [],\n            });\n      }\n      {\n        unitsStatus == \"success\"\n          ? this.setState({\n              unitsData: this.props.units.items.data,\n            })\n          : this.setState({\n              unitsData: [],\n            });\n      }\n      {\n        schedulerMeetingSubTypeStatus == \"success\"\n          ? this.setState({\n              schedulerMeetingSubTypeData:\n                this.props.schedulermeetingsubtype.items.data,\n            })\n          : this.setState({\n              schedulerMeetingSubTypeData: [],\n            });\n      }\n    }\n  }\n\n  ActionRoleBased = () => {\n    const { userRoleSuperAdmin, currentOffset, currentUnitType, currentUnits } =\n      this.state;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.GetSheMeeting(args);\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n    this.props.SelectSchedulerMeetingSubType();\n  };\n\n  // ActionFilter = () => {\n  //   this.setState({ FilterAction: true });\n  //   const {\n  //     currentMeetingType,\n  //     currentOffset,\n  //     currentUnits,\n  //     currentUnitType,\n  //     date1,\n  //     date2,\n  //   } = this.state;\n  //   let args = `offset=${currentOffset}&unit_id=${currentUnits}&she_meeting_type=${currentMeetingType}&currentUnitType=${currentUnitType}&she_meeting_from_date=${date1}&she_meeting_to_date=${date2}`;\n  //   this.props.GetSheMeeting(args);\n  // };\n\n  getFilterParams = (taskFilters) => {\n    let filterParams = \"\";\n    for (let i in taskFilters) {\n      let item = taskFilters[i];\n      if (item && item.length > 0) {\n        if (filterParams != \"\") {\n          filterParams += \"&\";\n        }\n        filterParams += `${i}=${item.toString()}`;\n      }\n    }\n    return filterParams;\n  };\n\n  ActionFilter = (fieldsValue) => {\n    const {\n      currentMeetingType,\n      fCurrentUnits,\n      fCurrentUnitType,\n      date1,\n      date2,\n    } = this.state;\n    const value = {\n      she_meeting_fromdate: date1,\n      she_meeting_todate: date2,\n      she_meeting_type: currentMeetingType,\n      unit_type: fCurrentUnitType,\n      unit_id: fCurrentUnits,\n    };\n    //this.setState({ val: value });\n    let updatedValue = this.getFilterParams(value);\n    this.setState({ val: updatedValue, FilterAction: true });\n    this.filter();\n  };\n\n  filter = () => {\n    const { val, currentOffset, fCurrentUnits } = this.state;\n    let updatedValue =\n      val + `&offset=${currentOffset}&unit_id=${fCurrentUnits}`;\n    this.props.GetSheMeeting(updatedValue);\n  };\n\n  ActionFilterReset = () => {\n    this.formRef.current.resetFields();\n    const { currentOffset, currentUnits } = this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${user.unit_id}`;\n\n    this.props.GetSheMeeting(args);\n    this.setState({\n      FilterAction: false,\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n      date1: \"\",\n      date2: \"\",\n      currentMeetingType: \"\",\n      fCurrentUnits: user.unit_id,\n      fCurrentUnitType: user.unit_type,\n      changeLocationType: false,\n    });\n    this.formRef.current.setFieldsValue({ meetingtype: undefined });\n  };\n\n  FilterMeetingType = (value) => {\n    this.setState({ currentMeetingType: value });\n  };\n\n  pageOnChange = (pagenumber) => {\n    const {\n      currentUnits,\n      currentMeetingType,\n      FilterAction,\n      val,\n      fCurrentUnits,\n    } = this.state;\n    let x = pagenumber - 1;\n    let offset = x * 20;\n    var args;\n    if (FilterAction) {\n      args = val + `&offset=${offset}&unit_id=${fCurrentUnits}`;\n    } else {\n      args = `offset=${offset}&unit_id=${currentUnits}`;\n    }\n    this.props.GetSheMeeting(args);\n  };\n\n  ActionArrayDateTimeFormat = (value) => {\n    var newDate = [];\n    var newTime = [];\n    var formatDate = [];\n\n    let formattedArrayDateTime = [];\n    for (var j = 0; j < value.length; j++) {\n      var allDate = value[j].split(\" \");\n      newDate.push(allDate[0]);\n      newTime.push(allDate[1]);\n      let dateString = newDate[j].split(\"-\");\n      formatDate.push([dateString[2], dateString[1], dateString[0]].join(\"-\"));\n      formattedArrayDateTime.push([formatDate[j], newTime[j]].join(\" \"));\n    }\n\n    return formattedArrayDateTime;\n  };\n\n  ActionSheRecommendation = () => {\n    const { recommendationApiCall, openViewRecommendations } = this.state;\n    if (openViewRecommendations) {\n      let sherecommendationData = this.props.sherecommendations.items;\n      if (sherecommendationData != undefined) {\n        let sherecommendationDataItems = sherecommendationData.data;\n        if (sherecommendationDataItems != undefined) {\n          this.setState(\n            {\n              currentRecommendationsData: sherecommendationDataItems,\n            },\n            this.ActionViewSheRecommendation\n          );\n        }\n      }\n    }\n    if (recommendationApiCall) {\n      let sherecommendationData = this.props.sherecommendations.items;\n      if (sherecommendationData != undefined) {\n        let sherecommendationDataItems = sherecommendationData.data;\n        if (sherecommendationDataItems != undefined) {\n          this.setState(\n            {\n              recommendationData: sherecommendationDataItems,\n            },\n            this.ActionEditSheRecommendation\n          );\n        }\n      }\n    }\n  };\n\n  ActionViewSheRecommendation = () => {\n    const { currentRecommendationsData } = this.state;\n\n    let a = [];\n    for (var i = 0; i < currentRecommendationsData.length; i++) {\n      a.push(\n        currentRecommendationsData[i].she_meeting_recommendation_targetdate\n      );\n    }\n\n    let x_array = [];\n    for (var j = 0; j < a.length; j++) {\n      if (a[j].length != null || undefined) {\n        let dateString1 = a[j].split(\"-\");\n        var newDate1 = [dateString1[2], dateString1[1], dateString1[0]].join(\n          \"-\"\n        );\n        x_array.push(newDate1);\n      }\n    }\n\n    for (var j = 0; j < currentRecommendationsData.length; j++) {\n      currentRecommendationsData[j].she_meeting_recommendation_targetdate =\n        x_array[j];\n    }\n  };\n\n  ActionEditSheRecommendation = () => {\n    const { recommendationData, recommendationApiCallPrevious } = this.state;\n\n    let newRecommendationData = [];\n    if (recommendationApiCallPrevious) {\n      for (var i = 0; i < recommendationData.length; i++) {\n        if (recommendationData[i].she_meeting_recommendation_status == \"OPEN\") {\n          newRecommendationData.push(recommendationData[i]);\n        }\n      }\n    } else {\n      newRecommendationData = recommendationData;\n    }\n\n    let a = [];\n    for (var i = 0; i < newRecommendationData.length; i++) {\n      a.push(newRecommendationData[i].she_meeting_recommendation_targetdate);\n    }\n    let x_array = [];\n    for (var j = 0; j < a.length; j++) {\n      if (a[j].length != null || undefined) {\n        let dateString1 = a[j].split(\"-\");\n        var newDate1 = [dateString1[2], dateString1[1], dateString1[0]].join(\n          \"-\"\n        );\n        x_array.push(newDate1);\n      }\n    }\n\n    this.setState({ currentRecommendationsDate: x_array });\n\n    let x = [];\n    x.push({\n      sheRecommendations: newRecommendationData,\n    });\n    let arrayVal = x[0].sheRecommendations;\n\n    //Date Manipulation\n    let date_string = arrayVal.map((val) =>\n      moment(val.she_meeting_recommendation_targetdate, \"YYYY-MM-DD\")\n    );\n    for (var j = 0; j < arrayVal.length; j++) {\n      arrayVal[j].she_meeting_recommendation_targetdate = date_string[j];\n    }\n\n    this.setState({\n      editRecommendations: x[0],\n      renderForm: true,\n    });\n  };\n\n  StartMeeting = (id) => {\n    const { currentOffset, currentUnits } = this.state;\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.formRef.current.resetFields();\n    this.setState({\n      FilterAction: false,\n      currentUnitType: user.unit_type,\n      currentUnits: user.unit_id,\n    });\n    this.props.StartSheMeeting(id, args);\n  };\n\n  UnlockMeeting = (id) => {\n    const { currentOffset, currentUnits } = this.state;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.UnlockShemeeting(id, args);\n  }\n\n  ActionOpenAddRecommendations = () => {\n    const { currentUnits } = this.state;\n    let args = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(args);\n  };\n\n  OpenAddRecommendations = (record) => {\n    this.setState(\n      {\n        openAddRecommendations: true,\n        currentUnits: record.unit_id,\n        currentSheMeetingId: record.she_meeting_id,\n        previousSheMeetingId: record.previous_she_meeting_id,\n        currentMeetingData: record,\n        recommendationApiCall: true,\n        currentScheduleDate:moment(record.she_meeting_date).format(\"DD-MM-YYYY hh:mm:ss\"),\n        currentconductDate:moment(record.she_meeting_conduct_date).format(\"DD-MM-YYYY hh:mm:ss\"),\n      },\n      this.ActionOpenAddRecommendations\n    );\n  };\n\n  SaveAddRecommendations = (values) => {\n    const { currentUnits, currentSheMeetingId, currentOffset } = this.state;\n\n    let addRecommendations = values.addRecommendations;\n    //Date Changes\n    let date_string = addRecommendations.map((val) =>\n      val.she_meeting_recommendation_targetdate._d.toString()\n    );\n    let date_val = date_string.map((val) =>\n      moment(new Date(val.substr(0, 16)))\n    );\n    let formatted_date = date_val.map((val) => val.format(\"DD-MM-YYYY\"));\n\n    for (var i = 0; i < addRecommendations.length; i++) {\n      addRecommendations[i].she_meeting_recommendation_targetdate =\n        formatted_date[i];\n    }\n\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.AddSheRecommendationFirst(\n      currentUnits,\n      currentSheMeetingId,\n      values.addRecommendations,\n      args\n    );\n  };\n\n  CancleAddRecommendations = () => {\n    this.formRef1.current.resetFields();\n  };\n\n  CloseAddRecommendations = () => {\n    this.setState({\n      openAddRecommendations: false,\n    });\n  };\n\n  ActionOpenEditRecommendations = () => {\n    const { currentUnits } = this.state;\n    let args = `unit_id=${currentUnits}`;\n    this.props.SelectMembers(args);\n  };\n\n  OpenEditRecommendations = (record) => {\n    let args1 = `she_meeting_id=${record.she_meeting_id}`;\n    this.props.GetSheRecommendations(args1);\n\n    this.setState(\n      {\n        currentUnits: record.unit_id,\n        currentSheMeetingId: record.she_meeting_id,\n        previousSheMeetingId: record.previous_she_meeting_id,\n        currentMeetingData: record,\n        openEditRecommendations: true,\n        recommendationApiCall: true,\n        currentScheduleDate:moment(record.she_meeting_date).format(\"DD-MM-YYYY hh:mm:ss\"),\n        currentconductDate:moment(record.she_meeting_conduct_date).format(\"DD-MM-YYYY hh:mm:ss\"),\n      },\n      this.ActionOpenEditRecommendations\n    );\n  };\n  InitiateUpdateRecommendation = (key) => {\n    this.setState({\n      updateTargetDate: this.state.currentRecommendationsDate[key],\n    });\n    var getActiveSelector = document.querySelector(\".x-dynamic-form.active\");\n    if (getActiveSelector !== null) {\n      getActiveSelector.classList.remove(\"active\");\n    } else {\n    }\n    document\n      .getElementById(`x-recommendation-list${key}`)\n      .classList.add(\"active\");\n  };\n\n  UpdateTargetDate = (date, dateString) => {\n    this.setState({ updateTargetDate: dateString });\n  };\n\n  GetUpdatedRecommendationData = (changedValues, allValues) => {\n    this.UpdatedRecommendationData = allValues;\n  };\n\n  SaveEditRecommendations(myIndex, field) {\n    const {\n      updateTargetDate,\n      currentUnits,\n      currentSheMeetingId,\n      currentOffset,\n    } = this.state;\n    if (this.UpdatedRecommendationData != null) {\n      let x = this.UpdatedRecommendationData.sheRecommendations[myIndex];\n      document\n        .getElementById(`x-recommendation-list${myIndex}`)\n        .classList.remove(\"active\");\n      let args = `she_meeting_id=${currentSheMeetingId}`;\n      this.props.EditSheRecommendation(\n        currentUnits,\n        currentSheMeetingId,\n        x.she_meeting_recommendation_id,\n        x.she_meeting_recommendation_name,\n        x.she_meeting_recommendation_fpr_id,\n        updateTargetDate,\n        x.she_meeting_recommendation_status,\n        args\n      );\n    }\n    this.UpdatedRecommendationData = null;\n  }\n\n  InitiateDeleteRecommendation(myIndex, field) {\n    var getActiveSelector = document.querySelector(\".x-dynamic-form.active\");\n    if (getActiveSelector !== null) {\n      getActiveSelector.classList.remove(\"active\");\n    } else {\n    }\n    document\n      .getElementById(`x-recommendation-list${myIndex}`)\n      .classList.add(\"active\");\n  }\n\n  DeleteRecommendation(myIndex, field) {\n    const { currentSheMeetingId, editRecommendations } = this.state;\n    let id =\n      editRecommendations.sheRecommendations[myIndex]\n        .she_meeting_recommendation_id;\n    let args = `she_meeting_id=${currentSheMeetingId}`;\n    this.props.DeleteSheRecommendation(id, args);\n  }\n\n  CancelDeleteRecommendation() {}\n\n  ActiveSingleAddRecommendation = () => {\n    this.setState({\n      activeSingleAddRecommendation: !this.state.activeSingleAddRecommendation,\n    });\n  };\n\n  SubmitSingleAddRecommendations = (values) => {\n    const {\n      updateTargetDate,\n      currentUnits,\n      currentSheMeetingId,\n      currentOffset,\n    } = this.state;\n    let x = values.sheRecommendations[0];\n    this.setState({\n      active_single_add_recommendation:\n        !this.state.active_single_add_recommendation,\n    });\n    let args = `she_meeting_id=${currentSheMeetingId}`;\n    this.props.AddSheRecommendation(\n      currentUnits,\n      currentSheMeetingId,\n      x.recommendation,\n      x.FPR,\n      updateTargetDate,\n      args\n    );\n  };\n\n  CloseEditRecommendations = () => {\n    this.setState({\n      openEditRecommendations: false,\n      recommendationApiCall: false,\n      recommendationApiCallPrevious: false,\n    });\n    window.location.reload();\n  };\n  InitiateUpdateRecommendationPrevious = (key) => {\n    this.setState({\n      updateTargetDate: this.state.currentRecommendationsDate[key],\n    });\n    var getActiveSelector = document.querySelector(\".x-dynamic-form.active\");\n    if (getActiveSelector !== null) {\n      getActiveSelector.classList.remove(\"active\");\n    } else {\n    }\n    document\n      .getElementById(`x-recommendation-list-previous${key}`)\n      .classList.add(\"active\");\n  };\n  GetUpdatedRecommendationDataPrevious = (changedValues, allValues) => {\n    this.UpdatedRecommendationData = allValues;\n  };\n  SaveEditRecommendationsPrevious(myIndex, field) {\n    const {\n      updateTargetDate,\n      currentUnits,\n      previousSheMeetingId,\n      currentOffset,\n    } = this.state;\n    if (this.UpdatedRecommendationData != null) {\n      let x = this.UpdatedRecommendationData.sheRecommendations[myIndex];\n      document\n        .getElementById(`x-recommendation-list-previous${myIndex}`)\n        .classList.remove(\"active\");\n      let args = `she_meeting_id=${previousSheMeetingId}`;\n      this.props.EditSheRecommendation(\n        currentUnits,\n        previousSheMeetingId,\n        x.she_meeting_recommendation_id,\n        x.she_meeting_recommendation_name,\n        x.she_meeting_recommendation_fpr_id,\n        updateTargetDate,\n        x.she_meeting_recommendation_status,\n        args\n      );\n    }\n    this.UpdatedRecommendationData = null;\n  }\n  InitiateDeleteRecommendationPrevious(myIndex, field) {\n    var getActiveSelector = document.querySelector(\".x-dynamic-form.active\");\n    if (getActiveSelector !== null) {\n      getActiveSelector.classList.remove(\"active\");\n    } else {\n    }\n    document\n      .getElementById(`x-recommendation-list-previous${myIndex}`)\n      .classList.add(\"active\");\n  }\n\n  DeleteRecommendationPrevious(myIndex, field) {\n    const { previousSheMeetingId, editRecommendations } = this.state;\n    let id =\n      editRecommendations.sheRecommendations[myIndex]\n        .she_meeting_recommendation_id;\n    let args = `she_meeting_id=${previousSheMeetingId}`;\n    this.props.DeleteSheRecommendation(id, args);\n  }\n  InitiateCompleteRecommendationPrevious(myIndex, field) {\n    const { previousSheMeetingId, editRecommendations } = this.state;\n    let id =\n      editRecommendations.sheRecommendations[myIndex]\n        .she_meeting_recommendation_id;\n    let args = `she_meeting_id=${previousSheMeetingId}`;\n    this.props.CompleteSheRecommendation(id, args);\n  }\n  toggleMeetingRecommendations = (activeKey) => {\n    const { currentSheMeetingId, previousSheMeetingId } = this.state;\n    if (activeKey == 1) {\n      let args = `she_meeting_id=${currentSheMeetingId}`;\n      this.props.GetSheRecommendations(args);\n      this.setState({ recommendationApiCallPrevious: false });\n    } else {\n      let args = `she_meeting_id=${previousSheMeetingId}`;\n      this.props.GetSheRecommendations(args);\n      this.setState({ recommendationApiCallPrevious: true });\n    }\n  };\n  OpenViewRecommendations = (record) => {\n    let args = `she_meeting_id=${record.she_meeting_id}`;\n    this.props.GetSheRecommendations(args);\n    this.setState({\n      openViewRecommendations: true,\n      currentSheMeetingId: record.she_meeting_id,\n      previousSheMeetingId: record.previous_she_meeting_id,\n      currentMeetingData: record,\n      currentScheduleDate: moment(record.she_meeting_date).format(\"DD-MM-YYYY hh:mm:ss\"),\n      currentconductDate: moment(record.she_meeting_conduct_date).format(\"DD-MM-YYYY hh:mm:ss\"),\n      currentSubmittedDate: moment(record.she_meeting_submit_on).format(\"DD-MM-YYYY hh:mm:ss\"),\n    });\n  };\n  CloseViewRecommendations = () => {\n    this.setState({\n      openViewRecommendations: false,\n    });\n    window.location.reload();\n  };\n\n  OpenApproveMeeting = (record)=> {\n    this.setState({\n      openApproveMeeting: true,\n      currentSheMeetingId: record.she_meeting_id,\n    });\n  }\n\n  CloseApproveMeeting = () => {\n    this.setState({\n      openApproveMeeting: false,\n      \n    });\n  }\n\n  ActionApprove = (values) => {\n    const {currentSheMeetingId, currentUnits, currentOffset} = this.state;\n    let args = `unit_id=${currentUnits}&offset=${currentOffset}`\n    this.props.ApproveShemeeting(currentSheMeetingId, values.comments, args);\n    this.setState({\n      openApproveMeeting: false\n    });\n  }\n\n  MeetingDetailsToggle = () => {\n    this.setState({\n      meetingDetailsToggle: !this.state.meetingDetailsToggle,\n    });\n  };\n  HandleFPRSelect = (value) => {\n    this.setState({\n      currentFPR: value,\n    });\n  };\n  HandleTargetDate = (date, dateString) => {\n    this.setState({ currentTargetDate: dateString });\n  };\n\n  SubmitMeeting = () => {\n    const { currentSheMeetingId, currentOffset, currentUnits } = this.state;\n    let args = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.SubmitSheMeeting(currentSheMeetingId, args);\n  };\n\n  HandleLocationTypeChanges = (value) => {\n    //this.setState({ currentUnitType: value, currentUnits: \"\" });\n    this.setState({ fCurrentUnitType: value, changeLocationType: true });\n    this.props.SelectUnits(value);\n    this.formRef.current.setFieldsValue({ fcurrentUnitName: undefined });\n  };\n\n  HandleUnitsChanges = (value) => {\n    this.setState({\n      fCurrentUnits: value,\n    });\n  };\n\n  fromDateChanged = (date, dateString) => {\n    this.setState({ date1: dateString });\n  };\n  toDateChanged = (date, dateString) => {\n    this.setState({ date2: dateString });\n  };\n\n  render() {\n    const {\n      openAddRecommendations,\n      openEditRecommendations,\n      openViewRecommendations,\n      updateReminderEmailChecked,\n      activeSingleAddRecommendation,\n      meetingDetailsToggle,\n      currentMeetingData,\n      membersData,\n      currentRecommendationsData,\n      renderForm,\n      unitsData,\n      unitTypeData,\n      currentUnits,\n      currentUnitType,\n      userRoleSuperAdmin,\n      userRoleSubAdmin,\n      changeLocationType,\n      schedulerMeetingSubTypeData,\n      openApproveMeeting,\n      currentScheduleDate,\n      currentconductDate,\n      currentSubmittedDate\n    } = this.state;\n\n    const { shemeeting, sherecommendations, schedulermeetingsubtype } = this.props;\n\n    const columns1 = [\n      {\n        title: \"S.No\",\n        dataIndex: \"she_meeting_recommendation_id\",\n        key: \"she_meeting_recommendation_id\",\n        width: \"50px\",\n      },\n      {\n        title: \"Recommendations\",\n        dataIndex: \"she_meeting_recommendation_name\",\n        key: \"she_meeting_recommendation_name\",\n        width: \"250px\",\n      },\n      {\n        title: \"FPR\",\n        dataIndex: \"she_meeting_recommendation_fpr_name\",\n        key: \"she_meeting_recommendation_fpr_name\",\n        width: \"150px\",\n      },\n      {\n        title: \"Target Date\",\n        dataIndex: \"she_meeting_recommendation_targetdate\",\n        key: \"she_meeting_recommendation_targetdate\",\n        width: \"150px\",\n        render: (she_meeting_recommendation_targetdate) => {\n          return (\n            <p>\n              {moment(she_meeting_recommendation_targetdate).format(dateFormat)}\n            </p>\n          );\n        },\n      },\n      {\n        title: \"Status\",\n        dataIndex: \"she_meeting_recommendation_status\",\n        key: \"she_meeting_recommendation_status\",\n        width: \"100px\",\n        render: (text, record) =>\n          record.she_meeting_recommendation_status === \"OPEN\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-assined\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ) : record.she_meeting_recommendation_status === \"COMPLETED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-completed\">\n                <CheckCircleFilled />\n              </span>\n            </div>\n          ) : (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-due\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ),\n      },\n    ];\n\n    const columns = [\n      {\n        title: \"Location Type\t\",\n        dataIndex: \"unit_type\",\n        key: \"unit_type\",\n        width: \"250px\",\n      },\n      {\n        title: \"Unit\",\n        dataIndex: \"unit_name\",\n        key: \"unit_name\",\n        width: \"250px\",\n      },\n\n      {\n        title: \"Meeting Type\",\n        dataIndex: \"she_meeting_type\",\n        key: \"she_meeting_type\",\n        width: \"250px\",\n      },\n      {\n        title: \"Date and Time\",\n        dataIndex: \"she_meeting_date\",\n        key: \"she_meeting_date\",\n        width: \"200px\",\n        render: (she_meeting_date) => {\n          return <p>{moment(she_meeting_date).format(dateTimeFormat)}</p>;\n        },\n      },\n      {\n        title: \"Participants\",\n        dataIndex: \"she_meeting_members_details\",\n        key: \"she_meeting_members_details\",\n        render: (she_meeting_members_details) => (\n          <span>\n            {she_meeting_members_details.map((member) => {\n              return (\n                <span key={member.member_id} style={{ marginRight: \"15px\" }}>\n                  {member.member_name}\n                </span>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Status\",\n        dataIndex: \"status\",\n        key: \"status\",\n        width: \"100px\",\n        render: (text, record) =>\n          record.she_meeting_status === \"SCHEDULED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-yettostart\">\n                <CalendarOutlined />\n              </span>\n            </div>\n          ) : record.she_meeting_status === \"CONDUCTED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-assined\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ) : record.she_meeting_status === \"APPROVED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-approved\">\n              <CheckOutlined />\n              </span>\n            </div>\n          ) : (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-completed\">\n                <CheckCircleFilled />\n              </span>\n            </div>\n          ),\n      },\n      {\n        title: \"Actions\",\n        dataIndex: \"actions\",\n        key: \"actions\",\n        width: \"200px\",\n        render: (text, record) =>\n          record.she_meeting_status === \"SCHEDULED\" ? (\n            <div className=\"text-center\">\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"ant-btn-no-bg x-button-secondary-no-bg only-icon float-left\"\n                disabled={this.props.shemeeting.startloading}\n                onClick={() => {\n                  this.StartMeeting(record.she_meeting_id);\n                }}\n              >\n                <PlayCircleFilled />\n              </Button>\n            </div>\n          ) : record.she_meeting_status === \"CONDUCTED\" ? (\n            record.recommendations_add_edit_status === \"ADD\" ? (\n              <div className=\"text-center\">\n                <Button\n                  type=\"primary\"\n                  size=\"small\"\n                  className=\"icon-with-text ant-btn-no-bg  ant-btn-primary-no-bg\"\n                  onClick={() => {\n                    this.OpenAddRecommendations(record);\n                  }}\n                >\n                  <PlusCircleFilled />\n                  MOM\n                </Button>\n              </div>\n            ) : (\n              <div className=\"text-center\">\n                <Button\n                  type=\"primary\"\n                  size=\"small\"\n                  className=\"icon-with-text ant-btn-no-bg  ant-btn-primary-no-bg\"\n                  onClick={() => {\n                    this.OpenEditRecommendations(record);\n                  }}\n                >\n                  <EditFilled />\n                  MOM\n                </Button>\n              </div>\n            )\n          ) : record.she_meeting_status === \"SUBMITTED\" ? (\n            <div className=\"text-center\">\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                  this.OpenViewRecommendations(record);\n                }}\n                className=\"ant-btn-no-bg x-button-success-no-bg icon-with-text\"\n              >\n                <TagFilled />\n                MOM\n              </Button>\n              {userRoleSuperAdmin ? \n              (\n                <Button\n                type=\"primary\"\n                size=\"small\"\n                onClick={() => {\n                  this.OpenApproveMeeting(record);\n                }}\n                className=\"ant-btn-no-bg x-button-success-no-bg icon-with-text\"\n              >\n                <CheckOutlined />\n                Meeting\n              </Button>\n              )\n              :\n              null}\n              \n            </div>\n          ) : record.she_meeting_status === \"APPROVED\" ? (\n            <div className=\"text-center\">\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"ant-btn-no-bg x-button-approve-no-bg icon-with-text\"\n                \n              >\n                Approved\n              </Button>\n            </div>\n          ) : record.she_meeting_status === \"LOCKED\" ? (\n            <div className=\"text-center\">\n              <Button\n                type=\"primary\"\n                size=\"small\"\n                className=\"only-icon ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                danger\n                onClick={() => {\n                  this.UnlockMeeting(record.she_meeting_id);\n                }}\n              >\n                <LockFilled />\n              </Button>\n            </div>\n          ) : \n      null},\n    ];\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-she-meeting\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Perform Meetings</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/managementdashboard\">\n                <Breadcrumb.Item>\n                  <span>SHE Management</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>Perform Meetings</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row x-row mt-4\">\n            <div className=\"text-left x-form-card col-md-12 px-0\">\n              <Card\n                title=\"List of Meetings\"\n                bordered={false}\n                className=\"x-card-no-padding\"\n              >\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"x-table-filters\">\n                    <Form\n                      layout=\"vertical\"\n                      autoComplete=\"off\"\n                      ref={this.formRef}\n                      className=\"w-100\"\n                      size=\"large\"\n                      onFinish={this.ActionFilter}\n                    >\n                      <div className=\"x-controls-section\">\n                        {userRoleSuperAdmin ? (\n                          <div className=\"x-controls-section x-mr-1\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <div className=\"x-controls\">\n                                <Form.Item name=\"funit_type\">\n                                  <Select\n                                    placeholder=\"Location Type\"\n                                    onChange={this.HandleLocationTypeChanges}\n                                  >\n                                    {unitTypeData &&\n                                      unitTypeData.map((unittype, index) => (\n                                        <option value={unittype} key={index}>\n                                          {unittype}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <div className=\"x-controls\">\n                                <Form.Item\n                                  name=\"fcurrentUnitName\"\n                                  rules={\n                                    changeLocationType\n                                      ? [\n                                          {\n                                            required: true,\n                                            message: \"Please input Unit!\",\n                                          },\n                                        ]\n                                      : null\n                                  }\n                                >\n                                  <Select\n                                    placeholder=\"Select Unit\"\n                                    onChange={this.HandleUnitsChanges}\n                                    disabled={\n                                      !userRoleSuperAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </div>\n                        ) : null}\n\n                        {userRoleSubAdmin ? (\n                          <div className=\"x-controls-section\">\n                            <div className=\"controls\" style={{ width: 170 }}>\n                              <div className=\"x-controls\">\n                                <Form.Item name=\"fcurrentUnitName\">\n                                  <Select\n                                    placeholder=\"Select Unit\"\n                                    onChange={this.HandleUnitsChanges}\n                                    disabled={\n                                      !userRoleSubAdmin ||\n                                      this.props.units.prodloading\n                                    }\n                                    loading={this.props.units.prodloading}\n                                  >\n                                    {unitsData &&\n                                      unitsData.map((unit) => (\n                                        <option\n                                          value={unit.unit_id}\n                                          key={unit.unit_id}\n                                        >\n                                          {unit.unit_name}\n                                        </option>\n                                      ))}\n                                  </Select>\n                                </Form.Item>\n                              </div>\n                            </div>\n                          </div>\n                        ) : null}\n\n                        <div className=\"controls\" style={{ width: 250 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item  name=\"fcurrentMeetingType\">\n                              <Select\n                                  placeholder=\"Meeting Type\"\n                                  onChange={this.FilterMeetingType}\n                                  loading={schedulermeetingsubtype.loading}\n                                  size=\"large\"\n                                >\n                                  {schedulerMeetingSubTypeData &&\n                                    schedulerMeetingSubTypeData.map(\n                                      (val, index) => (\n                                        <option key={index} value={val}>\n                                          {val}\n                                        </option>\n                                      )\n                                    )}\n                                </Select>\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"she_meeting_fromdate\">\n                              <DatePicker\n                                onChange={this.fromDateChanged}\n                                placeholder=\"From Date\"\n                                format={dateFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"controls\" style={{ width: 130 }}>\n                          <div className=\"x-controls\">\n                            <Form.Item name=\"she_meeting_todate\">\n                              <DatePicker\n                                onChange={this.toDateChanged}\n                                placeholder=\"To Date\"\n                                format={dateFormat}\n                                size=\"large\"\n                              />\n                            </Form.Item>\n                          </div>\n                        </div>\n                        <div className=\"control\">\n                          <div className=\"x-controls x-btn-flex\">\n                            <Button\n                              type=\"primary\"\n                              size=\"small\"\n                              htmlType=\"submit\"\n                              disabled={shemeeting.getloading}\n                            >\n                              Filter\n                            </Button>\n                            {shemeeting.getloading ? (\n                              <div className=\"x-ant-icon\">\n                                <SyncOutlined spin />\n                              </div>\n                            ) : (\n                              \"\"\n                            )}\n                            <Button\n                              type=\"link\"\n                              htmlType=\"reset\"\n                              danger\n                              onClick={this.ActionFilterReset}\n                            >\n                              Reset\n                            </Button>\n                          </div>\n                        </div>                        \n                      </div>\n                    </Form>\n                  </div>\n                </div>\n                <div className=\"row col-lg-12 col-xl-12 px-0\">\n                  <div className=\"table-responsive\">\n                    {shemeeting.getloading || shemeeting.startloading ||\n                    shemeeting.approveloading || shemeeting.unlockloading\n                    ? (\n                      <span>\n                        <Spin indicator={antIcon} />\n                      </span>\n                    ) : (\n                      <Table\n                        dataSource={this.state.listMeeting}\n                        columns={columns}\n                        pagination={false}\n                      />\n                    )}\n                    <Pagination\n                      total={this.state.totalCount}\n                      onChange={this.pageOnChange}\n                      defaultCurrent={1}\n                      defaultPageSize={20}\n                    />\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n          <Modal title=\"Approve Meeting\" id=\"approve-modal\" visible={openApproveMeeting} \n          onOk={this.CloseApproveMeeting} onCancel={this.CloseApproveMeeting} footer={null}>\n          <div className=\"col-md-12\">\n              <div className=\"\">\n                    <Form\n                      layout=\"vertical\"\n                      autoComplete=\"off\"\n                      ref={this.formApprove}\n                      className=\"w-100\"\n                      size=\"large\"\n                      onFinish={this.ActionApprove}\n                    >\n                      {userRoleSuperAdmin ? \n                      <div>\n                      <div className=\"x-controls-section align-items-end\">\n                        <div className=\"controls\" style={{ width:500 }}>\n                          <Form.Item\n                            label=\"Comments\"\n                            name=\"comments\"\n                            rules={[\n                              {\n                                required: true,\n                                message: \"Please input Comments!\",\n                              },\n                            ]}\n                          >\n                            <TextArea\n                              rows={3}\n                              placeholder=\"Comments\"\n                            ></TextArea>\n                          </Form.Item>\n                        </div>\n                        <div className=\"controls\" style={{ width: 200 }}>\n                          <Form.Item>\n                            <div className=\"x-btn-flex\">\n                              \n                              <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  className=\"float-right\"\n                                  disabled={\n                                    this.props.shemeeting.approvedloading\n                                  }\n                                >\n                                  Approve\n                                </Button>\n                              {this.props.shemeeting\n                                .approveloading ? (\n                                <div className=\"x-ant-icon\">\n                                  <SyncOutlined spin />\n                                </div>\n                              ) : (\n                                \"\"\n                              )}\n                            </div>\n                          </Form.Item>\n                        </div>\n                      </div>\n                    </div>\n                      : \n                      null}\n                      </Form>\n                    </div>\n              </div>\n      </Modal>\n          <Drawer\n            title=\"Add SHE Meeting Recommendations\"\n            placement=\"right\"\n            onClose={this.CloseAddRecommendations}\n            visible={openAddRecommendations}\n          >\n            <div className=\"row x-meeting-details\">\n              <div\n                className={\n                  meetingDetailsToggle ? \"col-lg-9 px-0\" : \"col-lg-12 px-0\"\n                }\n              >\n                <Button\n                  type=\"primary\"\n                  onClick={this.MeetingDetailsToggle}\n                  size=\"small\"\n                  className=\"x-button-secondary x-toggle-meeting\"\n                >\n                  {meetingDetailsToggle ? (\n                    <FullscreenOutlined />\n                  ) : (\n                    <FullscreenExitOutlined />\n                  )}\n                </Button>\n                <Tabs\n                  defaultActiveKey=\"1\"\n                  onChange={this.toggleMeetingRecommendations}\n                >\n                  <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n                    <Form\n                      name=\"add_dynamic_recommendations\"\n                      autoComplete=\"off\"\n                      onFinish={this.SaveAddRecommendations}\n                      className=\"col-md-12\"\n                      layout=\"vertical\"\n                      size=\"large\"\n                      ref={this.formRef1}\n                    >\n                      <div className=\"x-dynamic-container\">\n                        <Form.List name=\"addRecommendations\">\n                          {(fields, { add, remove }) => (\n                            <>\n                              <Form.Item>\n                                <Button\n                                  type=\"dashed\"\n                                  style={{\n                                    width: \"auto\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                  }}\n                                  onClick={() => add()}\n                                  block\n                                  icon={<PlusOutlined />}\n                                >\n                                  Add Recommendations\n                                </Button>\n                              </Form.Item>\n                              <div className=\"x-dynamic-form-container\">\n                                <div\n                                  className=\"x-controls-section x-dynamic-label\"\n                                  style={{ height: 50 }}\n                                >\n                                  <div\n                                    className=\"controls\"\n                                    style={\n                                      meetingDetailsToggle\n                                        ? { minWidth: 300, width: 300 }\n                                        : { minWidth: 700, width: 700 }\n                                    }\n                                  >\n                                    <Form.Item label=\"Recommendations\"></Form.Item>\n                                  </div>\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 400, width: 400 }}\n                                  >\n                                    <Form.Item label=\"FPR\"></Form.Item>\n                                  </div>\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 160, width: 160 }}\n                                  >\n                                    <Form.Item label=\"Target Date\"></Form.Item>\n                                  </div>\n                                  <div\n                                    className=\"controls\"\n                                    style={{ minWidth: 100, width: 100 }}\n                                  >\n                                    <Form.Item label=\"Actions\"></Form.Item>\n                                  </div>\n                                </div>\n                                {fields.map((field) => (\n                                  <Space\n                                    key={field.key}\n                                    style={{ display: \"flex\" }}\n                                    align=\"baseline\"\n                                    className=\"x-dynamic-form x-dynamic-form-visible-controls mb-3\"\n                                  >\n                                    <Form.Item\n                                      {...field}\n                                      name={[\n                                        field.name,\n                                        \"she_meeting_recommendation_name\",\n                                      ]}\n                                      fieldKey={[\n                                        field.fieldKey,\n                                        \"she_meeting_recommendation_name\",\n                                      ]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Missing Recommendation\",\n                                        },\n                                      ]}\n                                      style={\n                                        meetingDetailsToggle\n                                          ? { width: 300 }\n                                          : { width: 700 }\n                                      }\n                                    >\n                                      <TextArea\n                                        rows={1}\n                                        placeholder=\"Recommendation\"\n                                      ></TextArea>\n                                    </Form.Item>\n\n                                    <Form.Item\n                                      {...field}\n                                      name={[\n                                        field.name,\n                                        \"she_meeting_recommendation_fpr_id\",\n                                      ]}\n                                      fieldKey={[\n                                        field.fieldKey,\n                                        \"she_meeting_recommendation_fpr_id\",\n                                      ]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Please input Member!\",\n                                        },\n                                      ]}\n                                      style={{ width: 400 }}\n                                    >\n                                      <Select\n                                        placeholder=\"Select Member\"\n                                        onChange={this.HandleFPRSelect}\n                                      >\n                                        {membersData &&\n                                          membersData.map((members, index) => (\n                                            <option\n                                              key={members.member_id}\n                                              value={members.member_id}\n                                            >\n                                              {members.member_name}\n                                            </option>\n                                          ))}\n                                      </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                      {...field}\n                                      name={[\n                                        field.name,\n                                        \"she_meeting_recommendation_targetdate\",\n                                      ]}\n                                      fieldKey={[\n                                        field.fieldKey,\n                                        \"she_meeting_recommendation_targetdate\",\n                                      ]}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: \"Missing Target Date\",\n                                        },\n                                      ]}\n                                      style={{ width: 160 }}\n                                    >\n                                      <DatePicker\n                                        format={dateFormat}\n                                        selected={this.state.startDate}\n                                        placeholder=\"Target Date\"\n                                        onChange={this.HandleTargetDate}\n                                      />\n                                    </Form.Item>\n                                    <div\n                                      style={{\n                                        width: 100,\n                                        paddingTop: 5,\n                                        paddingBottom: 5,\n                                        display: 'inline-flex', \n                                        justifyContent: 'center',\n                                        alignItems: 'center',\n                                      }}\n                                    >\n                                      <Button\n                                        type=\"primary\"\n                                        danger\n                                        size=\"small\"\n                                        className=\"mr-2 only-icon ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                                        onClick={() => remove(field.name)}\n                                      >\n                                        <DeleteFilled />\n                                      </Button>\n                                    </div>\n                                  </Space>\n                                ))}\n                              </div>\n                            </>\n                          )}\n                        </Form.List>\n                      </div>\n                      <Form.Item>\n                        <div className=\"x-recommendation-btn\">\n                          <Button\n                            type=\"link\"\n                            className=\"float-right\"\n                            danger\n                            onClick={this.CancleAddRecommendations}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            className=\"float-right mt-4\"\n                            disabled={\n                              this.props.sherecommendations.addfirstloading\n                            }\n                          >\n                            Save All\n                          </Button>\n                          <div className=\"x-loading-icon\">\n                            {this.props.sherecommendations.addfirstloading ? (\n                              <SyncOutlined spin />\n                            ) : null}\n                          </div>\n                        </div>\n                      </Form.Item>\n                    </Form>\n                  </TabPane>\n                  <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n                    {!renderForm ? (\n                      <Spin indicator={antIcon} />\n                    ) : (\n                      <Form\n                        name=\"dynamic_recommendations_previous\"\n                        autoComplete=\"off\"\n                        className=\"col-md-12\"\n                        layout=\"vertical\"\n                        size=\"large\"\n                        initialValues={this.state.editRecommendations}\n                        onValuesChange={(changedValues, allValues) => {\n                          this.GetUpdatedRecommendationDataPrevious(\n                            changedValues,\n                            allValues\n                          );\n                        }}\n                      >\n                        <div className=\"x-dynamic-container\">\n                          <Form.List name=\"sheRecommendations\">\n                            {(fields, { add, remove }) => (\n                              <>\n                                <div\n                                  className=\"x-dynamic-form-container\"\n                                  id=\"x-dynamic-form-container1\"\n                                >\n                                  <div\n                                    className=\"x-controls-section x-dynamic-label\"\n                                    style={{ height: 50 }}\n                                  >\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 70, width: 70 }}\n                                    >\n                                      <Form.Item label=\"S.No\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={\n                                        meetingDetailsToggle\n                                          ? { minWidth: 300, width: 300 }\n                                          : { minWidth: 500, width: 500 }\n                                      }\n                                    >\n                                      <Form.Item label=\"Recommendations\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 320, width: 320 }}\n                                    >\n                                      <Form.Item label=\"FPR\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 170, width: 170 }}\n                                    >\n                                      <Form.Item label=\"Target Date\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 120, width: 120 }}\n                                    >\n                                      <Form.Item label=\"Status\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 180, width: 180 }}\n                                    >\n                                      <Form.Item label=\"Actions\"></Form.Item>\n                                    </div>\n                                  </div>\n                                  {fields.map((field, index, record) => (\n                                    <Space\n                                      key={field.key}\n                                      value={field.value}\n                                      style={{ display: \"flex\" }}\n                                      align=\"baseline\"\n                                      className=\"x-dynamic-form\"\n                                      id={`x-recommendation-list-previous${index}`}\n                                    >\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_id\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_id\",\n                                        ]}\n                                        style={{ width: 70 }}\n                                      >\n                                        <Input placeholder=\"S.No\" />\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_name\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_name\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Recommendation\",\n                                          },\n                                        ]}\n                                        style={\n                                          meetingDetailsToggle\n                                            ? { minWidth: 300 }\n                                            : { minWidth: 500 }\n                                        }\n                                      >\n                                        <TextArea\n                                          rows={1}\n                                          placeholder=\"Recommendation\"\n                                        ></TextArea>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_fpr_id\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_fpr_id\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Please input Member!\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 320 }}\n                                      >\n                                        <Select placeholder=\"Select Member\">\n                                          {membersData &&\n                                            membersData.map(\n                                              (members, index) => (\n                                                <option\n                                                  key={members.member_id}\n                                                  value={members.member_id}\n                                                >\n                                                  {members.member_name}\n                                                </option>\n                                              )\n                                            )}\n                                        </Select>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_targetdate\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_targetdate\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Target Date\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 175 }}\n                                      >\n                                        <DatePicker\n                                          format={dateFormat}\n                                          onChange={this.UpdateTargetDate}\n                                          placeholder=\"Target Date\"\n                                        />\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_status\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_status\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Please input Status!\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 120 }}\n                                      >\n                                        <Select\n                                          placeholder=\"Select FPR\"\n                                          className=\"pointer-events-none\"\n                                        >\n                                          <Option value=\"OPEN\">Open</Option>\n                                          <Option value=\"COMPLETED\">\n                                            Completed\n                                          </Option>\n                                        </Select>\n                                      </Form.Item>\n                                      <div\n                                        className=\"x-action-btns\"\n                                        style={{\n                                          width: 170,\n                                          paddingTop: 7,\n                                          paddingBottom: 7,\n                                        }}\n                                      >\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 x-initiate-edit-btn only-icon  ant-btn-no-bg ant-btn-primary-no-bg\"\n                                          onClick={() =>\n                                            this.InitiateUpdateRecommendationPrevious(\n                                              field.key\n                                            )\n                                          }\n                                        >\n                                          <EditFilled />\n                                        </Button>\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 x-edit-btn icon-with-text\"\n                                          onClick={(form) => {\n                                            this.SaveEditRecommendationsPrevious(\n                                              index,\n                                              field\n                                            );\n                                          }}\n                                        >\n                                          Save\n                                        </Button>\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 icon-with-text\"\n                                          onClick={(form) =>\n                                            this.InitiateCompleteRecommendationPrevious(\n                                              index,\n                                              field\n                                            )\n                                          }\n                                        >\n                                          Complete\n                                        </Button>\n                                        <Popconfirm\n                                          title=\"Are you sure to delete this Meeting?\"\n                                          placement=\"topRight\"\n                                          onConfirm={(form) =>\n                                            this.DeleteRecommendationPrevious(\n                                              index,\n                                              field\n                                            )\n                                          }\n                                          onCancel={\n                                            this.CancelDeleteRecommendation\n                                          }\n                                          okText=\"Yes\"\n                                          cancelText=\"No\"\n                                        >\n                                          <Button\n                                            type=\"primary\"\n                                            danger\n                                            size=\"small\"\n                                            className=\"mr-2 only-icon ant-btn-no-bg ant-btn-dangerous-no-bg  ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                                            onClick={(form) =>\n                                              this.InitiateDeleteRecommendationPrevious(\n                                                index,\n                                                field\n                                              )\n                                            }\n                                          >\n                                            <DeleteFilled />\n                                          </Button>\n                                        </Popconfirm>\n                                        <div className=\"x-loading-icon\">\n                                          {sherecommendations.editloading ? (\n                                            <SyncOutlined spin />\n                                          ) : (\n                                            \"\"\n                                          )}\n                                          {sherecommendations.deleteloading ? (\n                                            <SyncOutlined spin />\n                                          ) : (\n                                            \"\"\n                                          )}\n                                        </div>\n                                      </div>\n                                    </Space>\n                                  ))}\n                                </div>\n                              </>\n                            )}\n                          </Form.List>\n                        </div>\n                      </Form>\n                    )}\n                  </TabPane>\n                </Tabs>\n              </div>\n              <div\n                className={\n                  meetingDetailsToggle\n                    ? \"col-lg-3 px-0\"\n                    : \"col-lg-3 px-0 d-none\"\n                }\n              >\n                <div className=\"x-meeting-data x-panel-1\">\n                  <div className=\"x-panel-1-header with-btn\">\n                    <div>Meeting Details</div>\n                    <div>\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        className=\"ant-btn-secondary float-right\"\n                        size=\"large\"\n                        disabled\n                      >\n                        Submit\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"x-panel-1-body\">\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Location Type</div>\n\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.unit_type}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Unit</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.unit_name}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Schedule Date</div>\n                      <div className=\"x-section-content\">\n                      {currentScheduleDate !== \"Invalid date\" ? currentScheduleDate : \"\"}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Conduct Date</div>\n                      <div className=\"x-section-content\">\n                      {currentconductDate !== \"Invalid date\" ? currentconductDate : \"\"}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Agenda</div>\n                      <div className=\"x-section-content\">\n                        <ul className=\"x-list-items\">\n                          {currentMeetingData.she_meeting_agenda_details &&\n                            currentMeetingData.she_meeting_agenda_details.map(\n                              (agenda, index) => (\n                                <li id={agenda.agenda_id}>\n                                  {agenda.agenda_name}\n                                </li>\n                              )\n                            )}\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Participants</div>\n                      <div className=\"x-section-content\">\n                        <ul className=\"x-list-items\">\n                          {currentMeetingData.she_meeting_members_details &&\n                            currentMeetingData.she_meeting_members_details.map(\n                              (members, index) => (\n                                <li id={members.member_id}>\n                                  {members.member_name}\n                                </li>\n                              )\n                            )}\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Reminder Email</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.mrm_reminder_days == null ? (\n                          \"Not Set\"\n                        ) : (\n                          <span>\n                            {currentMeetingData.mrm_reminder_days == 0 ? (\n                              \"Not Set\"\n                            ) : (\n                              <span>\n                                {currentMeetingData.mrm_reminder_days == 1\n                                  ? `${currentMeetingData.mrm_reminder_days} day before`\n                                  : `${currentMeetingData.mrm_reminder_days} days before`}\n                              </span>\n                            )}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Drawer>\n          <Drawer\n            title=\"Edit SHE Meeting Recommendations\"\n            placement=\"right\"\n            onClose={this.CloseEditRecommendations}\n            visible={openEditRecommendations}\n          >\n            <div className=\"row x-meeting-details\">\n              <div\n                className={\n                  meetingDetailsToggle ? \"col-lg-9 px-0\" : \"col-lg-12 px-0\"\n                }\n              >\n                <Button\n                  type=\"primary\"\n                  onClick={this.MeetingDetailsToggle}\n                  size=\"small\"\n                  className=\"x-button-secondary x-toggle-meeting\"\n                >\n                  {meetingDetailsToggle ? (\n                    <FullscreenOutlined />\n                  ) : (\n                    <FullscreenExitOutlined />\n                  )}\n                </Button>\n                <Tabs\n                  defaultActiveKey=\"1\"\n                  onChange={this.toggleMeetingRecommendations}\n                >\n                  <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n                    {!renderForm ? (\n                      <Spin indicator={antIcon} />\n                    ) : (\n                      <Form\n                        name=\"dynamic_recommendations\"\n                        autoComplete=\"off\"\n                        className=\"col-md-12\"\n                        layout=\"vertical\"\n                        size=\"large\"\n                        initialValues={this.state.editRecommendations}\n                        onValuesChange={(changedValues, allValues) => {\n                          this.GetUpdatedRecommendationData(\n                            changedValues,\n                            allValues\n                          );\n                        }}\n                      >\n                        <div className=\"x-dynamic-container\">\n                          <Form.List name=\"sheRecommendations\">\n                            {(fields, { add, remove }) => (\n                              <>\n                                <div\n                                  className=\"x-dynamic-form-container\"\n                                  id=\"x-dynamic-form-container\"\n                                >\n                                  <div\n                                    className=\"x-controls-section x-dynamic-label\"\n                                    style={{ height: 50 }}\n                                  >\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 70, width: 70 }}\n                                    >\n                                      <Form.Item label=\"S.No\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={\n                                        meetingDetailsToggle\n                                          ? { minWidth: 300, width: 300 }\n                                          : { minWidth: 700, width: 700 }\n                                      }\n                                    >\n                                      <Form.Item label=\"Recommendations\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 200, width: 200 }}\n                                    >\n                                      <Form.Item label=\"FPR\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 165, width: 165 }}\n                                    >\n                                      <Form.Item label=\"Target Date\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 120, width: 120 }}\n                                    >\n                                      <Form.Item label=\"Status\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 100, width: 100 }}\n                                    >\n                                      <Form.Item label=\"Actions\"></Form.Item>\n                                    </div>\n                                  </div>\n                                  {fields.map((field, index, record) => (\n                                    <Space\n                                      key={field.key}\n                                      value={field.value}\n                                      style={{ display: \"flex\" }}\n                                      align=\"baseline\"\n                                      className=\"x-dynamic-form\"\n                                      id={`x-recommendation-list${index}`}\n                                    >\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_id\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_id\",\n                                        ]}\n                                        style={{ width: 70 }}\n                                      >\n                                        <Input placeholder=\"S.No\" />\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_name\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_name\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Recommendation\",\n                                          },\n                                        ]}\n                                        style={\n                                          meetingDetailsToggle\n                                            ? { minWidth: 300 }\n                                            : { minWidth: 700 }\n                                        }\n                                      >\n                                        <TextArea\n                                          rows={1}\n                                          placeholder=\"Recommendation\"\n                                        ></TextArea>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_fpr_id\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_fpr_id\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Please input Member!\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 200 }}\n                                      >\n                                        <Select placeholder=\"Select Member\">\n                                          {membersData &&\n                                            membersData.map(\n                                              (members, index) => (\n                                                <option\n                                                  key={members.member_id}\n                                                  value={members.member_id}\n                                                >\n                                                  {members.member_name}\n                                                </option>\n                                              )\n                                            )}\n                                        </Select>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_targetdate\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_targetdate\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Target Date\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 175 }}\n                                      >\n                                        <DatePicker\n                                          format={dateFormat}\n                                          onChange={this.UpdateTargetDate}\n                                          placeholder=\"Target Date\"\n                                        />\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_status\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_status\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Please input Status!\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 120 }}\n                                      >\n                                        <Select\n                                          placeholder=\"Select FPR\"\n                                          className=\"pointer-events-none\"\n                                        >\n                                          <Option value=\"open\">Open</Option>\n                                          <Option value=\"completed\">\n                                            Completed\n                                          </Option>\n                                          <Option value=\"pending\">\n                                            Pending\n                                          </Option>\n                                        </Select>\n                                      </Form.Item>\n                                      <div\n                                        className=\"x-action-btns\"\n                                        style={{\n                                          width: 100,\n                                          paddingTop: 7,\n                                          paddingBottom: 7,\n                                        }}\n                                      >\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 x-initiate-edit-btn only-icon  ant-btn-no-bg ant-btn-primary-no-bg\"\n                                          onClick={() =>\n                                            this.InitiateUpdateRecommendation(\n                                              field.key\n                                            )\n                                          }\n                                        >\n                                          <EditFilled />\n                                        </Button>\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 x-edit-btn icon-with-text\"\n                                          onClick={(form) => {\n                                            this.SaveEditRecommendations(\n                                              index,\n                                              field\n                                            );\n                                          }}\n                                        >\n                                          Save\n                                        </Button>\n                                        <Popconfirm\n                                          title=\"Are you sure to delete this Meeting?\"\n                                          placement=\"topRight\"\n                                          onConfirm={(form) =>\n                                            this.DeleteRecommendation(\n                                              index,\n                                              field\n                                            )\n                                          }\n                                          onCancel={\n                                            this.CancelDeleteRecommendation\n                                          }\n                                          okText=\"Yes\"\n                                          cancelText=\"No\"\n                                        >\n                                          <Button\n                                            type=\"primary\"\n                                            danger\n                                            size=\"small\"\n                                            className=\"mr-2 only-icon ant-btn-no-bg ant-btn-dangerous-no-bg  ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                                            onClick={(form) =>\n                                              this.InitiateDeleteRecommendation(\n                                                index,\n                                                field\n                                              )\n                                            }\n                                          >\n                                            <DeleteFilled />\n                                          </Button>\n                                        </Popconfirm>\n                                        <div className=\"x-loading-icon\">\n                                          {sherecommendations.editloading ? (\n                                            <SyncOutlined spin />\n                                          ) : (\n                                            \"\"\n                                          )}\n                                          {sherecommendations.deleteloading ? (\n                                            <SyncOutlined spin />\n                                          ) : (\n                                            \"\"\n                                          )}\n                                        </div>\n                                      </div>\n                                    </Space>\n                                  ))}\n                                </div>\n                              </>\n                            )}\n                          </Form.List>\n                        </div>\n                      </Form>\n                    )}\n\n                    <div className=\"mt-4\">\n                      <Form\n                        name=\"dynamic_recommendations_singleItem\"\n                        autoComplete=\"off\"\n                        onFinish={this.SubmitSingleAddRecommendations}\n                        className=\"col-md-12\"\n                        layout=\"vertical\"\n                        size=\"large\"\n                      >\n                        <div className=\"x-dynamic-container\">\n                          <Form.List name=\"sheRecommendations\">\n                            {(fields, { add, remove }) => (\n                              <>\n                                <Form.Item>\n                                  <Button\n                                    type=\"dashed\"\n                                    disabled={!activeSingleAddRecommendation}\n                                    style={{\n                                      width: \"auto\",\n                                      display: \"flex\",\n                                      alignItems: \"center\",\n                                    }}\n                                    onClick={() => {\n                                      add();\n                                      this.ActiveSingleAddRecommendation();\n                                    }}\n                                    block\n                                    icon={<PlusOutlined />}\n                                  >\n                                    Add Recommendations\n                                  </Button>\n                                </Form.Item>\n                                <div\n                                  className=\"x-dynamic-form-container\"\n                                  style={{ minHeight: \"200px\" }}\n                                >\n                                  <div\n                                    className=\"x-controls-section x-dynamic-label\"\n                                    style={{ height: 50 }}\n                                  >\n                                    <div\n                                      className=\"controls\"\n                                      style={\n                                        meetingDetailsToggle\n                                          ? { minWidth: 500, width: 500 }\n                                          : { minWidth: 750, width: 750 }\n                                      }\n                                    >\n                                      <Form.Item label=\"Recommendations\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 300, width: 300 }}\n                                    >\n                                      <Form.Item label=\"FPR\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 150, width: 150 }}\n                                    >\n                                      <Form.Item label=\"Target Date\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 150, width: 150 }}\n                                    >\n                                      <Form.Item label=\"Actions\"></Form.Item>\n                                    </div>\n                                  </div>\n                                  {fields.map((field, index) => (\n                                    <Space\n                                      key={field.key}\n                                      style={{ display: \"flex\" }}\n                                      align=\"baseline\"\n                                      className=\"x-dynamic-form x-dynamic-form-visible-controls\"\n                                      id={`x-add-recommendation-list-${index}`}\n                                    >\n                                      <Form.Item\n                                        {...field}\n                                        name={[field.name, \"recommendation\"]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"recommendation\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Recommendation\",\n                                          },\n                                        ]}\n                                        style={\n                                          meetingDetailsToggle\n                                            ? { minWidth: 500 }\n                                            : { minWidth: 750 }\n                                        }\n                                      >\n                                        <TextArea\n                                          rows={1}\n                                          placeholder=\"Recommendation\"\n                                        ></TextArea>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[field.name, \"FPR\"]}\n                                        fieldKey={[field.fieldKey, \"FPR\"]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Please input Member!\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 300 }}\n                                      >\n                                        <Select placeholder=\"Select Member\">\n                                          {membersData &&\n                                            membersData.map(\n                                              (members, index) => (\n                                                <option\n                                                  key={members.member_id}\n                                                  value={members.member_id}\n                                                >\n                                                  {members.member_name}\n                                                </option>\n                                              )\n                                            )}\n                                        </Select>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[field.name, \"targetdate\"]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"targetdate\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Target Date\",\n                                          },\n                                        ]}\n                                        style={{\n                                          minWidth: 150,\n                                          marginRight: \"15px\",\n                                        }}\n                                      >\n                                        <DatePicker\n                                          format={dateFormat}\n                                          placeholder=\"Target Date\"\n                                          onChange={this.UpdateTargetDate}\n                                        />\n                                      </Form.Item>\n                                      <div\n                                        className=\"x-action-btns\"\n                                        style={{\n                                          width: 150,\n                                          paddingTop: 5,\n                                          paddingBottom: 5,\n                                        }}\n                                      >\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 only-icon icon-with-text\"\n                                          htmlType=\"submit\"\n                                        >\n                                          Save\n                                        </Button>\n\n                                        <Button\n                                          type=\"primary\"\n                                          danger\n                                          size=\"small\"\n                                          className=\"mr-2 only-icon   ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                                          onClick={() => {\n                                            remove(field.name);\n                                            this.ActiveSingleAddRecommendation();\n                                          }}\n                                        >\n                                          <DeleteFilled />\n                                        </Button>\n                                        {sherecommendations.addloading ? (\n                                          <SyncOutlined spin />\n                                        ) : (\n                                          \"\"\n                                        )}\n                                      </div>\n                                    </Space>\n                                  ))}\n                                </div>\n                              </>\n                            )}\n                          </Form.List>\n                        </div>\n                      </Form>\n                    </div>\n                  </TabPane>\n                  <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n                    {!renderForm ? (\n                      <Spin indicator={antIcon} />\n                    ) : (\n                      <Form\n                        name=\"dynamic_recommendations_previous\"\n                        autoComplete=\"off\"\n                        className=\"col-md-12\"\n                        layout=\"vertical\"\n                        size=\"large\"\n                        initialValues={this.state.editRecommendations}\n                        onValuesChange={(changedValues, allValues) => {\n                          this.GetUpdatedRecommendationDataPrevious(\n                            changedValues,\n                            allValues\n                          );\n                        }}\n                      >\n                        <div className=\"x-dynamic-container\">\n                          <Form.List name=\"sheRecommendations\">\n                            {(fields, { add, remove }) => (\n                              <>\n                                <div\n                                  className=\"x-dynamic-form-container\"\n                                  id=\"x-dynamic-form-container1\"\n                                >\n                                  <div\n                                    className=\"x-controls-section x-dynamic-label\"\n                                    style={{ height: 50 }}\n                                  >\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 70, width: 70 }}\n                                    >\n                                      <Form.Item label=\"S.No\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={\n                                        meetingDetailsToggle\n                                          ? { minWidth: 300, width: 300 }\n                                          : { minWidth: 500, width: 500 }\n                                      }\n                                    >\n                                      <Form.Item label=\"Recommendations\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 300, width: 300 }}\n                                    >\n                                      <Form.Item label=\"FPR\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 165, width: 165 }}\n                                    >\n                                      <Form.Item label=\"Target Date\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 120, width: 120 }}\n                                    >\n                                      <Form.Item label=\"Status\"></Form.Item>\n                                    </div>\n                                    <div\n                                      className=\"controls\"\n                                      style={{ minWidth: 180, width: 180 }}\n                                    >\n                                      <Form.Item label=\"Actions\"></Form.Item>\n                                    </div>\n                                  </div>\n                                  {fields.map((field, index, record) => (\n                                    <Space\n                                      key={field.key}\n                                      value={field.value}\n                                      style={{ display: \"flex\" }}\n                                      align=\"baseline\"\n                                      className=\"x-dynamic-form\"\n                                      id={`x-recommendation-list-previous${index}`}\n                                    >\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_id\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_id\",\n                                        ]}\n                                        style={{ width: 70 }}\n                                      >\n                                        <Input placeholder=\"S.No\" />\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_name\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_name\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Recommendation\",\n                                          },\n                                        ]}\n                                        style={\n                                          meetingDetailsToggle\n                                            ? { minWidth: 300 }\n                                            : { minWidth: 500 }\n                                        }\n                                      >\n                                        <TextArea\n                                          rows={1}\n                                          placeholder=\"Recommendation\"\n                                        ></TextArea>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_fpr_id\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_fpr_id\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Please input Member!\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 300 }}\n                                      >\n                                        <Select placeholder=\"Select Member\">\n                                          {membersData &&\n                                            membersData.map(\n                                              (members, index) => (\n                                                <option\n                                                  key={members.member_id}\n                                                  value={members.member_id}\n                                                >\n                                                  {members.member_name}\n                                                </option>\n                                              )\n                                            )}\n                                        </Select>\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_targetdate\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_targetdate\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Missing Target Date\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 175 }}\n                                      >\n                                        <DatePicker\n                                          format={dateFormat}\n                                          onChange={this.UpdateTargetDate}\n                                          placeholder=\"Target Date\"\n                                        />\n                                      </Form.Item>\n                                      <Form.Item\n                                        {...field}\n                                        name={[\n                                          field.name,\n                                          \"she_meeting_recommendation_status\",\n                                        ]}\n                                        fieldKey={[\n                                          field.fieldKey,\n                                          \"she_meeting_recommendation_status\",\n                                        ]}\n                                        rules={[\n                                          {\n                                            required: true,\n                                            message: \"Please input Status!\",\n                                          },\n                                        ]}\n                                        style={{ minWidth: 120 }}\n                                      >\n                                        <Select\n                                          placeholder=\"Select FPR\"\n                                          className=\"pointer-events-none\"\n                                        >\n                                          <Option value=\"OPEN\">Open</Option>\n                                          <Option value=\"COMPLETED\">\n                                            Completed\n                                          </Option>\n                                        </Select>\n                                      </Form.Item>\n                                      <div\n                                        className=\"x-action-btns\"\n                                        style={{\n                                          width: 170,\n                                          paddingTop: 7,\n                                          paddingBottom: 7,\n                                        }}\n                                      >\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 x-initiate-edit-btn only-icon  ant-btn-no-bg ant-btn-primary-no-bg\"\n                                          onClick={() =>\n                                            this.InitiateUpdateRecommendationPrevious(\n                                              field.key\n                                            )\n                                          }\n                                        >\n                                          <EditFilled />\n                                        </Button>\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 x-edit-btn icon-with-text\"\n                                          onClick={(form) => {\n                                            this.SaveEditRecommendationsPrevious(\n                                              index,\n                                              field\n                                            );\n                                          }}\n                                        >\n                                          Save\n                                        </Button>\n                                        <Button\n                                          type=\"primary\"\n                                          size=\"small\"\n                                          className=\"mr-2 icon-with-text\"\n                                          onClick={(form) =>\n                                            this.InitiateCompleteRecommendationPrevious(\n                                              index,\n                                              field\n                                            )\n                                          }\n                                        >\n                                          Complete\n                                        </Button>\n                                        <Popconfirm\n                                          title=\"Are you sure to delete this Meeting?\"\n                                          placement=\"topRight\"\n                                          onConfirm={(form) =>\n                                            this.DeleteRecommendationPrevious(\n                                              index,\n                                              field\n                                            )\n                                          }\n                                          onCancel={\n                                            this.CancelDeleteRecommendation\n                                          }\n                                          okText=\"Yes\"\n                                          cancelText=\"No\"\n                                        >\n                                          <Button\n                                            type=\"primary\"\n                                            danger\n                                            size=\"small\"\n                                            className=\"mr-2 only-icon ant-btn-no-bg ant-btn-dangerous-no-bg  ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                                            onClick={(form) =>\n                                              this.InitiateDeleteRecommendationPrevious(\n                                                index,\n                                                field\n                                              )\n                                            }\n                                          >\n                                            <DeleteFilled />\n                                          </Button>\n                                        </Popconfirm>\n                                        <div className=\"x-loading-icon\">\n                                          {sherecommendations.editloading ? (\n                                            <SyncOutlined spin />\n                                          ) : (\n                                            \"\"\n                                          )}\n                                          {sherecommendations.deleteloading ? (\n                                            <SyncOutlined spin />\n                                          ) : (\n                                            \"\"\n                                          )}\n                                        </div>\n                                      </div>\n                                    </Space>\n                                  ))}\n                                </div>\n                              </>\n                            )}\n                          </Form.List>\n                        </div>\n                      </Form>\n                    )}\n                  </TabPane>\n                </Tabs>\n              </div>\n              <div\n                className={\n                  meetingDetailsToggle\n                    ? \"col-lg-3 px-0\"\n                    : \"col-lg-3 px-0 d-none\"\n                }\n              >\n                <div className=\"x-meeting-data x-panel-1\">\n                  <div className=\"x-panel-1-header with-btn\">\n                    <div>Meeting Details</div>\n                    <div>\n                      <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        size=\"large\"\n                        className=\"ant-btn-secondary float-right\"\n                        onClick={this.SubmitMeeting}\n                      >\n                        Submit\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"x-panel-1-body\">\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Location Type</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.unit_type}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Unit</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.unit_name}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Schedule Date</div>\n                      <div className=\"x-section-content\">\n                      {currentScheduleDate !== \"Invalid date\" ? currentScheduleDate : \"\"}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Conduct Date</div>\n                      <div className=\"x-section-content\">\n                      {currentconductDate !== \"Invalid date\" ? currentconductDate : \"\"}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Agenda</div>\n                      <div className=\"x-section-content\">\n                        <ul className=\"x-list-items\">\n                          {currentMeetingData.she_meeting_agenda_details &&\n                            currentMeetingData.she_meeting_agenda_details.map(\n                              (agenda, index) => (\n                                <li id={agenda.agenda_id}>\n                                  {agenda.agenda_name}\n                                </li>\n                              )\n                            )}\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Participants</div>\n                      <div className=\"x-section-content\">\n                        <ul className=\"x-list-items\">\n                          {currentMeetingData.she_meeting_members_details &&\n                            currentMeetingData.she_meeting_members_details.map(\n                              (members, index) => (\n                                <li id={members.member_id}>\n                                  {members.member_name}\n                                </li>\n                              )\n                            )}\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Reminder Email</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.mrm_reminder_days == null ? (\n                          \"Not Set\"\n                        ) : (\n                          <span>\n                            {currentMeetingData.mrm_reminder_days == 0 ? (\n                              \"Not Set\"\n                            ) : (\n                              <span>\n                                {currentMeetingData.mrm_reminder_days == 1\n                                  ? `${currentMeetingData.mrm_reminder_days} day before`\n                                  : `${currentMeetingData.mrm_reminder_days} days before`}\n                              </span>\n                            )}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row x-meeting-details\"></div>\n          </Drawer>\n          <Drawer\n            title=\"View SHE Meeting Recommendations\"\n            placement=\"right\"\n            onClose={this.CloseViewRecommendations}\n            visible={openViewRecommendations}\n          >\n            <div className=\"row x-meeting-details\">\n              \n              \n              <div className=\"row col-md-12\">\n              <div\n                className={\n                  meetingDetailsToggle ? \"col-lg-9 px-0\" : \"col-lg-12 px-0\"\n                }\n              >\n                <Button\n                  type=\"primary\"\n                  onClick={this.MeetingDetailsToggle}\n                  size=\"small\"\n                  className=\"x-button-secondary x-toggle-meeting\"\n                >\n                  {meetingDetailsToggle ? (\n                    <FullscreenOutlined />\n                  ) : (\n                    <FullscreenExitOutlined />\n                  )}\n                </Button>\n                <Tabs\n                  defaultActiveKey=\"1\"\n                  onChange={this.toggleMeetingRecommendations}\n                >\n                  <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">\n                    <div className=\"table-responsive\">\n                      <Table\n                        dataSource={currentRecommendationsData}\n                        columns={columns1}\n                        //rowKey={currentRecommendationsData.she_meeting_recommendation_id}\n                      />\n                    </div>\n                  </TabPane>\n                  <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">\n                    <div className=\"table-responsive\">\n                      <Table\n                        dataSource={currentRecommendationsData}\n                        columns={columns1}\n                        //rowKey={currentRecommendationsData.she_meeting_recommendation_id}\n                      />\n                      \n                    </div>\n                    \n                  </TabPane>\n                </Tabs>\n              </div>\n              <div\n                className={\n                  meetingDetailsToggle\n                    ? \"col-lg-3 px-0\"\n                    : \"col-lg-3 px-0 d-none\"\n                }\n              >\n                <div className=\"x-meeting-data x-panel-1\">\n                  <div className=\"x-panel-1-header with-btn\">\n                    <div>Meeting Details</div>\n                    <div className=\"x-button-secondary-no-bg\">\n                      {currentSubmittedDate !== \"Invalid date\" ? currentSubmittedDate : \"\"}\n                    </div>\n                  </div>\n                  <div className=\"x-panel-1-body\">\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Location Type</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.unit_type}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Unit</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.unit_name}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Schedule Date</div>\n                      <div className=\"x-section-content\">\n                        {currentScheduleDate !== \"Invalid date\" ? currentScheduleDate : \"\"}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Conduct Date</div>\n                      <div className=\"x-section-content\">\n                        {currentconductDate !== \"Invalid date\" ? currentconductDate : \"\"}\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Agenda</div>\n                      <div className=\"x-section-content\">\n                        <ul className=\"x-list-items\">\n                          {currentMeetingData.she_meeting_agenda_details &&\n                            currentMeetingData.she_meeting_agenda_details.map(\n                              (agenda, index) => (\n                                <li id={agenda.agenda_id}>\n                                  {agenda.agenda_name}\n                                </li>\n                              )\n                            )}\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Participants</div>\n                      <div className=\"x-section-content\">\n                        <ul className=\"x-list-items\">\n                          {currentMeetingData.she_meeting_members_details &&\n                            currentMeetingData.she_meeting_members_details.map(\n                              (members, index) => (\n                                <li id={members.member_id}>\n                                  {members.member_name}\n                                </li>\n                              )\n                            )}\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"x-section\">\n                      <div className=\"x-section-title\">Reminder Email</div>\n                      <div className=\"x-section-content\">\n                        {currentMeetingData.mrm_reminder_days == null ? (\n                          \"Not Set\"\n                        ) : (\n                          <span>\n                            {currentMeetingData.mrm_reminder_days == 0 ? (\n                              \"Not Set\"\n                            ) : (\n                              <span>\n                                {currentMeetingData.mrm_reminder_days == 1\n                                  ? `${currentMeetingData.mrm_reminder_days} day before`\n                                  : `${currentMeetingData.mrm_reminder_days} days before`}\n                              </span>\n                            )}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            </div>\n          </Drawer>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const {\n    members,\n    unittype,\n    units,\n    agendafor,\n    agenda,\n    shemeeting,\n    sherecommendations,\n    schedulermeetingsubtype\n  } = state;\n  return {\n    members,\n    unittype,\n    units,\n    agendafor,\n    agenda,\n    shemeeting,\n    sherecommendations,\n    schedulermeetingsubtype\n  };\n}\nconst actionCreators = {\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n  selectAgenda: actions.selectAgenda,\n  SelectAgendaFor: actions.SelectAgendaFor,\n  SelectMembers: actions.SelectMembers,\n  GetSheMeeting: actions.GetSheMeeting,\n  StartSheMeeting: actions.StartSheMeeting,\n  ApproveShemeeting: actions.ApproveShemeeting,\n  UnlockShemeeting: actions.UnlockShemeeting,\n  GetSheRecommendations: actions.GetSheRecommendations,\n  AddSheRecommendationFirst: actions.AddSheRecommendationFirst,\n  EditSheRecommendation: actions.EditSheRecommendation,\n  AddSheRecommendation: actions.AddSheRecommendation,\n  DeleteSheRecommendation: actions.DeleteSheRecommendation,\n  CompleteSheRecommendation: actions.CompleteSheRecommendation,\n  SubmitSheMeeting: actions.SubmitSheMeeting,\n  SelectSchedulerMeetingSubType: actions.SelectSchedulerMeetingSubType,\n};\nconst connectedPerformMeetings = connect(\n  mapState,\n  actionCreators\n)(PerformMeetings);\nexport { connectedPerformMeetings as PerformMeetings };\n","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/selectaudit.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/audits.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/Audit/AuditList-UI/AuditList.js",["720","721","722","723"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Form,\n  Select,\n  Button,\n  Drawer,\n  Tabs,\n} from \"antd\";\nimport {\n  EditFilled,\n  DeleteFilled,\n  FileDoneOutlined,\n  FileTextOutlined,\n  ProfileOutlined\n} from \"@ant-design/icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nconst { Option } = Select;\nconst { TabPane } = Tabs;\n\nclass AuditList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openEditAudits: false,\n      openEditChecklist: false,\n    };\n  }\n  componentDidMount() {}\n  OpenEditAudits = () => {\n    this.setState({openEditAudits: true});\n  }\n  CloseEditAudits = () => {\n    this.setState({openEditAudits: false});\n  }\n  OpenEditChecklist = () => {\n    this.setState({openEditChecklist: true});\n  }\n  CloseEditChecklist = () => {\n    this.setState({openEditChecklist: false});\n  }\n  render() {\n    const {openEditAudits, openEditChecklist} = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"table-responsive\">\n          <table className=\"table table-hover\">\n            <thead>\n              <tr>\n                <th style={{ minWidth: 400 }}>Category Name</th>\n                <th style={{ minWidth: 400 }}>Audits</th>\n                <th className=\"text-center\" style={{ width: 200 }}>\n                  Action\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Management System</td>\n                <td>SHE Management</td>\n                <td className=\"text-center x-div-flex\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.openEditRecommendations}\n                  >\n                    <FontAwesomeIcon icon=\"upload\" />\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.OpenEditAudits}\n                  >\n                    <EditFilled />\n                  </Button>\n\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                    danger\n                  >\n                    <DeleteFilled />\n                  </Button>\n                </td>\n              </tr>\n              <tr>\n                <td>Safety Management</td>\n                <td>Fire & Life Safety</td>\n                <td className=\"text-center x-div-flex\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.openEditRecommendations}\n                  >\n                    <FontAwesomeIcon icon=\"upload\" />\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.openEditAttachment}\n                  >\n                    <EditFilled />\n                  </Button>\n\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                    danger\n                  >\n                    <DeleteFilled />\n                  </Button>\n                </td>\n              </tr>\n              <tr>\n                <td>Environment Management</td>\n                <td>Waste Management</td>\n                <td className=\"text-center x-div-flex\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.OpenEditChecklist}\n                  >\n                    <FontAwesomeIcon icon=\"file-import\" />\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\" ant-btn-no-bg x-button-secondary-no-bg only-icon float-left\"\n                  >\n                    \n                    <ProfileOutlined />\n                  </Button>\n\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.openEditAttachment}\n                  >\n                    <EditFilled />\n                  </Button>\n\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                    danger\n                  >\n                    <DeleteFilled />\n                  </Button>\n                </td>\n              </tr>\n              <tr>\n                <td>Health Management</td>\n                <td>Occupational Health</td>\n                <td className=\"text-center x-div-flex\">\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"icon-with-text ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.openEditRecommendations}\n                  >\n                    <FontAwesomeIcon icon=\"file-import\" />\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\" ant-btn-no-bg x-button-secondary-no-bg only-icon float-left\"\n                  >\n                    <ProfileOutlined />\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"mr-2 only-icon float-left ant-btn-no-bg ant-btn-primary-no-bg\"\n                    onClick={this.openEditAttachment}\n                  >\n                    <EditFilled />\n                  </Button>\n\n                  <Button\n                    type=\"primary\"\n                    size=\"small\"\n                    className=\"only-icon float-left ant-btn-no-bg ant-btn-dangerous-no-bg\"\n                    danger\n                  >\n                    <DeleteFilled />\n                  </Button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <Drawer\n    title=\"Edit Audits\"\n    placement=\"right\"\n    onClose={this.CloseEditAudits}\n    visible={openEditAudits}\n    >\n      <div className=\"row\">123</div>\n    </Drawer>\n    <Drawer\n    title=\"Edit Checklist\"\n    placement=\"right\"\n    onClose={this.CloseEditChecklist}\n    visible={openEditChecklist}\n    >\n      <div className=\"row\">\n        <div className=\"col-md-12 px-0 x-list-lable-value-container\">\n        <div className=\"x-list-lable-value\">\n          <div className=\"x-list-lable\">Category Name :</div>\n          <div className=\"x-list-value\">Management System\t</div>\n        </div>\n        <div className=\"x-list-lable-value\">\n          <div className=\"x-list-lable\">Audit :</div>\n          <div className=\"x-list-value\">SHE Management</div>\n        </div>\n        </div>\n        <div className=\"col-md-12 px-0\">\n        <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Current Meeting Recommendations\" key=\"1\">123</TabPane>\n        <TabPane tab=\"Previous Meeting Recommendations\" key=\"2\">890</TabPane>\n          </Tabs>\n        </div>\n\n      </div>\n    </Drawer>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {}\nconst actionCreators = {};\nconst connectedAuditList = connect(mapState, actionCreators)(AuditList);\nexport { connectedAuditList as AuditList };\n",["724","725"],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/shemeeting.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/needsexpectations.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/sherecommendations.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/auditsid.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/Management/ManagementDashboard/ManagementDashboard.js",["726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  DatePicker,\n  Button,\n  Breadcrumb,\n  Card,\n  Progress,\n  Spin,\n  Table,\n} from \"antd\";\n\nimport {\n  HomeOutlined,\n  HourglassFilled,\n  ProfileFilled,\n  CheckCircleFilled,\n  ScheduleFilled,\n  Loading3QuartersOutlined,\n  SyncOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Bar,\n  BarChart,\n} from \"recharts\";\nimport moment from \"moment\";\nimport { faMonument } from \"@fortawesome/free-solid-svg-icons\";\nconst { Option } = Select;\nconst monthFormat = \"MM-YYYY\";\nconst dateFormat = \"DD-MM-YYYY\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass ManagementDashboard extends Component {\n  formRef = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheMeetingRecommendationData: [],\n      meetingActions: [],\n      mrmMonthlyScore: [],\n      mrmMTD: [],\n      mrmYTD: [],\n      currentData: [],\n      mtdData: [],\n      ytdData: [],\n      currentMeetingType: \"\",\n      currentUnitType: \"\",\n      date: \"\",\n      mtdDates: [],\n      currentUnits: \"\",\n      currentUnitName: \"\",\n      args1: \"\",\n      args2: \"\",\n      args3: \"\",\n      dates: \"\",\n      sheMeetingArr: [],\n    };\n  }\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let current_user_roll_id = user.role_id;\n    let currentUnitId = user.unit_id;\n    var today = new Date();\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    var yyyy = today.getFullYear();\n    today = mm + \"-\" + yyyy;\n    let meeting_type = \"Management Review Meeting\";\n    let argss = `filter_month=01-${today}&she_meeting_type=${meeting_type}&unit_id=${currentUnitId}`;\n    let year = moment().format(\"YYYY\");\n    let arg = `filter_year=${year}&she_meeting_type=${meeting_type}&unit_id=${currentUnitId}`;\n    let arg6 = `filter_month=01-${today}&she_meeting_type=${meeting_type}&unit_id=${currentUnitId}`;\n\n    {\n      current_user_roll_id == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        currentUnitName: user.unit_name,\n        date: today,\n        currentMeetingType: \"Management Review Meeting\",\n        args1: argss,\n        args2: arg,\n        args3: arg6,\n      },\n      this.ActionRoleBased\n    );\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let sheRecommendationStatus1 = this.props.sherecommendations.getstatus;\n      let sheRecommendationStatus = this.props.sherecommendations.getstatus;\n      let meetingActionStatus = this.props.sheaction.getactionsstatus;\n      let meetingStatus1 = this.props.dashboard.getstatus;\n      let monthlyScoreStatus = this.props.monthlyscore.getmonthlyscorestatus;\n      let monthlyStatus = this.props.shemeeting.getmonthstatus;\n      let unittypeStatus = this.props.unittype.status;\n      let unitsStatus = this.props.units.status;\n\n      // if (sheRecommendationStatus == \"success\") {\n      //   {\n      //     this.ActionSheMeetingRecommendation();\n      //   }\n      // }\n\n      {\n        sheRecommendationStatus == \"success\"\n          ? this.setState({\n              sheMeetingRecommendationData:\n                this.props.sherecommendations.items.data,\n            })\n          : this.setState({ sheMeetingRecommendationData: [] });\n      }\n      {\n        meetingActionStatus == \"success\"\n          ? this.setState({ meetingActions: this.props.sheaction.items })\n          : this.setState({ meetingActions: [] });\n      }\n      {\n        monthlyScoreStatus == \"success\"\n          ? this.setState({ mrmMonthlyScore: this.props.monthlyscore.items })\n          : this.setState({ mrmMonthlyScore: [] });\n      }\n\n      if (monthlyStatus == \"success\") {\n        this.setState(\n          { mrmMTD: this.props.shemeeting.items.data },\n          this.ActionData\n        );\n      }\n      if (meetingStatus1 == \"success\") {\n        this.setState(\n          { mrmYTD: this.props.dashboard.items.data },\n          this.ActionDatas\n        );\n      }\n      {\n        unittypeStatus == \"success\"\n          ? this.setState({\n              unitTypeData: this.props.unittype.items.data,\n            })\n          : this.setState({\n              unitTypeData: [],\n            });\n      }\n      {\n        unitsStatus == \"success\"\n          ? this.setState({\n              unitsData: this.props.units.items.data,\n            })\n          : this.setState({\n              unitsData: [],\n            });\n      }\n    }\n  }\n  ActionRoleBased = () => {\n    const {\n      userRoleSuperAdmin,\n      currentUnits,\n      currentMeetingType,\n      currentUnitType,\n      args1,\n      args2,\n      args3,\n    } = this.state;\n    let args = `unit_id=${currentUnits}&she_meeting_type=${currentMeetingType}`;\n    this.props.GetSheRecommendations(args);\n    this.props.GetSheMeetingActions(args);\n    this.props.GetSheMeetingMonth(args1);\n    this.props.GetSheMeetingYear(args2);\n    this.props.GetSheMeetingMonthlyScore(args3);\n    this.props.SelectUnitType();\n    this.props.SelectUnits(currentUnitType);\n  };\n  ActionStatusFilter = (status) => {\n    const {\n      currentUnits,\n      currentMeetingType,\n    } = this.state;\n    if (status == \"ALL\") {\n      let args = `unit_id=${currentUnits}&she_meeting_type=${currentMeetingType}`;\n      this.props.GetSheRecommendations(args);\n    } else {\n      let args = `unit_id=${currentUnits}&she_meeting_type=${currentMeetingType}&she_meeting_recommendation_status=${status}`;\n      this.props.GetSheRecommendations(args);\n    }\n  };\n\n  dateChange = (date, dateString) => {\n    const { currentMeetingType, currentUnits } = this.state;\n    this.setState({ date: dateString });\n    let args = `filter_month=01-${dateString}&she_meeting_type=${currentMeetingType}&unit_id=${currentUnits}`;\n    let arg = `filter_year=2021&she_meeting_type=${currentMeetingType}&unit_id=${currentUnits}`;\n    this.props.GetSheMeetingMonth(args);\n    this.props.GetSheMeetingYear(arg);\n    this.props.GetSheMeetingMonthlyScore(args);\n  };\n\n  ActionData = () => {\n    const { mrmMTD } = this.state;\n    if (mrmMTD != undefined) {\n      const arr = Object.values(mrmMTD);\n\n      const date = Object.keys(mrmMTD);\n      let x = date;\n      let formatdate = [];\n      for (var i = 0; i < x.length; i++) {\n        let dateString = x[i].split(\"-\");\n        formatdate.push(dateString[2]);\n      }\n      this.setState({ mtdDates: formatdate });\n      this.setState({ sheMeetingArr: arr });\n      const newarr = arr.map((a) => ({ ...a, date: formatdate }));\n      newarr.forEach((a) => {\n        delete a.she_meetings;\n      });\n      this.setState({ mtdData: newarr });\n    }\n  };\n\n  ActionDatas = () => {\n    const { mrmYTD } = this.state;\n    if (mrmYTD != undefined) {\n      const arr = Object.values(mrmYTD);\n      const date = Object.keys(mrmYTD);\n      let x = date;\n      let formatdate = [];\n      for (var i = 0; i < x.length; i++) {\n        let dateString = x[i].split(\"-\");\n        formatdate.push(dateString[1]);\n      }\n      const newarr = arr.map((a) => ({ ...a, month: formatdate }));\n      newarr.forEach((a) => {\n        delete a.she_meetings;\n      });\n      this.setState({ ytdData: newarr });\n    }\n  };\n\n  SheCouncilMeeting = (value) => {\n    let exactValue = value.trim();\n    const { currentUnits, date } = this.state;\n    this.setState({ currentMeetingType: value });\n    var btns = document.querySelectorAll(\".x-button\");\n    for (var i = 0; i < btns.length; i++) {\n      btns[i].classList.remove(\"active\");\n    }\n\n    if (value == \"Management Review Meeting\") {\n      document.getElementsByClassName(\"x-button\")[0].classList.add(\"active\");\n    } else {\n      document.getElementsByClassName(\"x-button\")[1].classList.add(\"active\");\n    }\n\n    if (value == \"Management Review Meeting\") {\n      let arg = `she_meeting_type=${value}&unit_id=${currentUnits}`;\n      let arg5 = `filter_month=01-${date}&she_meeting_type=${value}&unit_id=${currentUnits}`;\n      let year = moment().format(\"YYYY\");\n      let arg3 = `filter_year=${year}&she_meeting_type=${value}&unit_id=${currentUnits}`;\n      this.props.GetSheMeetingMonth(arg5);\n      this.props.GetSheMeetingYear(arg3);\n      this.props.GetSheMeetingActions(arg);\n      this.props.GetSheMeetingMonthlyScore(arg5);\n      this.props.GetSheRecommendations(arg);\n    } else {\n      let argss = `filter_month=01-${date}&she_meeting_type=${value}&unit_id=${currentUnits}`;\n      this.props.GetSheMeetingMonth(argss);\n      this.props.GetSheMeetingMonthlyScore(argss);\n      let year = moment().format(\"YYYY\");\n      let arg = `filter_year=${year}&she_meeting_type=${value}&unit_id=${currentUnits}`;\n      this.props.GetSheMeetingYear(arg);\n      let args = `she_meeting_type=${value}&unit_id=${currentUnits}`;\n      this.props.GetSheMeetingActions(args);\n      this.props.GetSheRecommendations(args);\n    }\n  };\n\n  HandleLocationTypeChange = (value) => {\n    this.setState({ currentUnitType: value, currentUnits: \"\" });\n    this.props.SelectUnits(value);\n    this.formRef.current.setFieldsValue({ currentUnitName: undefined });\n  };\n  HandleUnitsChange = (value) => {\n    const { currentMeetingType, date } = this.state;\n    this.setState({\n      currentUnits: value,\n    });\n    let argss = `filter_month=01-${date}&she_meeting_type=${currentMeetingType}&unit_id=${value}`;\n    this.props.GetSheMeetingMonth(argss);\n    this.props.GetSheMeetingMonthlyScore(argss);\n    let year = moment().format(\"YYYY\");\n    let arg = `filter_year=${year}&she_meeting_type=${currentMeetingType}&unit_id=${value}`;\n    this.props.GetSheMeetingYear(arg);\n    let args = `she_meeting_type=${currentMeetingType}&unit_id=${value}`;\n    this.props.GetSheMeetingActions(args);\n    this.props.GetSheRecommendations(args);\n  };\n\n  render() {\n    const {\n      userRoleSuperAdmin,\n      sheMeetingRecommendationData,\n      meetingActions,\n      mrmMonthlyScore,\n      mtdData,\n      ytdData,\n      mtdDates,\n      unitTypeData,\n      unitsData,\n      sheMeetingArr,\n      listMeetingRecommendation,\n    } = this.state;\n\n    const { sherecommendations, shemeeting, dashboard, sheaction } = this.props;\n    const columns = [\n      {\n        title: \"Recommendations Description\t\",\n        dataIndex: \"she_meeting_recommendation_name\",\n        key: \"she_meeting_recommendation_name\",\n      },\n      {\n        title: \"Target Date\",\n        dataIndex: \"she_meeting_recommendation_targetdate\",\n        key: \"she_meeting_recommendation_targetdate\",\n        width: \"150px\",\n        render: (she_meeting_recommendation_targetdate) => {\n          return (\n            <p>\n              {moment(she_meeting_recommendation_targetdate).format(dateFormat)}\n            </p>\n          );\n        },\n      },\n      {\n        title: \"Status\",\n        dataIndex: \"she_meeting_recommendation_status\",\n        key: \"she_meeting_recommendation_status\",\n        width: \"150px\",\n        render: (text, record) =>\n          record.she_meeting_recommendation_status === \"OPEN\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-assined\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ) : record.she_meeting_recommendation_status === \"COMPLETED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-completed\">\n                <CheckCircleFilled />\n              </span>\n            </div>\n          ) : (\n            <div className=\"x-status-icon\">\n              <span className=\"x-filter-icon x-status-icon-due\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ),\n      },\n    ];\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-dashboard x-she-meeting\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>Dashboard</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n\n              <Breadcrumb.Item>Management Dashboard</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n\n          <div className=\"row x-dashboard-row mb-0\">\n            <div className=\"x-meeting-filter\">\n              <div className=\"x-meeting-filter-inner\">\n                <div\n                  className=\"x-button active\"\n                  onClick={(e) =>\n                    this.SheCouncilMeeting(\"Management Review Meeting\")\n                  }\n                >\n                  MRM\n                </div>\n                <div\n                  className=\"x-button\"\n                  onClick={(e) => this.SheCouncilMeeting(\"Council Meeting\")}\n                >\n                  SHE Council Meeting\n                </div>\n              </div>\n            </div>\n          </div>\n          <Form\n            layout=\"vertical\"\n            autoComplete=\"off\"\n            className=\"w-100\"\n            size=\"large\"\n            ref={this.formRef}\n          >\n            <div className=\"row text-left x-dashboard-row mb-0\">\n              <div className=\"x-control-filter  col-sm-12 col-md-12 px-0\">\n                <div className=\"x-control-filter-in x-controls-section\">\n                  {userRoleSuperAdmin ? (\n                    <>\n                    <div className=\"controls\" style={{ width: 180 }}>\n                      <div className=\"x-controls\">\n                        <Form.Item\n                          label=\"Location Type\"\n                          name=\"currentUnitType\"\n                          rules={[\n                            {\n                              required: true,\n                              message: \"Please input Location Type!\",\n                            },\n                          ]}\n                        >\n                          <Select\n                            onChange={this.HandleLocationTypeChange}\n                            disabled={!userRoleSuperAdmin}\n                            defaultValue=\"PLANT\"\n                          >\n                            {unitTypeData &&\n                              unitTypeData.map((unittype, index) => (\n                                <option value={unittype} key={index}>\n                                  {unittype}\n                                </option>\n                              ))}\n                          </Select>\n                        </Form.Item>\n                      </div>\n                      </div>\n                      <div className=\"controls\" style={{ width: 180 }}>\n                      <div className=\"x-controls\">\n                        <Form.Item\n                          label=\"Select Unit\"\n                          name=\"currentUnitName\"\n                          rules={[\n                            {\n                              required: true,\n                              message: \"Please input Unit!\",\n                            },\n                          ]}\n                        >\n                          <Select\n                            onChange={this.HandleUnitsChange}\n                            defaultValue=\"Perundurai\"\n                            disabled={\n                              !userRoleSuperAdmin ||\n                              this.props.units.prodloading\n                            }\n                            loading={this.props.units.prodloading}\n                          >\n                            {unitsData &&\n                              unitsData.map((unit, index) => (\n                                <option value={unit.unit_id} key={unit.unit_id}>\n                                  {unit.unit_name}\n                                </option>\n                              ))}\n                          </Select>\n                        </Form.Item>\n                      </div>\n                      </div>\n                    </>\n                  ) : null}\n                  <div className=\"controls\" style={{ width: 130 }}>\n                  <div className=\"x-controls\" >\n                    <DatePicker\n                      defaultValue={moment()}\n                      format={monthFormat}\n                      size=\"large\"\n                      picker=\"month\"\n                      onChange={this.dateChange}\n                    />\n                  </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Form>\n          <div className=\"row x-dashboard-row\"></div>\n          <div\n            className={\n              userRoleSuperAdmin\n                ? \"row text-left x-dashboard-row x-dashboard-chart d-none\"\n                : \"row text-left x-dashboard-row x-dashboard-chart d-none\"\n            }\n          >\n            <div className=\"col-lg-12 col-xl-3  px-0\">\n              <div className=\"x-panel\">\n                <div className=\"x-panel-body\">\n                  <div className=\"x-score\">\n                    <div className=\"x-score-title\">Monthly score</div>\n                    <div className=\"x-score-value\">\n                      <Progress\n                        type=\"circle\"\n                        percent={mrmMonthlyScore.she_meeting_monthly_score}\n                        status=\"done\"\n                        format={(percent) => `${percent} %`}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-12 col-xl-5 x-left\">\n              <div className=\"site-card-border-less-wrapper text-left\">\n                <Card title=\"MTD\" bordered={false}>\n                  {mtdDates.map((date) => (\n                    <div className=\"row col-lg-12 col-xl-12 px-0 x-mtd-container x-tilldate-container\">\n                      <div className=\"x-entity\">\n                        <span>{date}</span>\n                      </div>\n                    </div>\n                  ))}\n                </Card>\n              </div>\n            </div>\n            <div className=\"col-md-12 col-xl-4 x-right\">\n              <div className=\"site-card-border-less-wrapper text-left\">\n                <Card title=\"YTD\" bordered={false}>\n                  <div className=\"row col-lg-12 col-xl-12 px-0 x-ytd-container x-tilldate-container\">\n                    <div className=\"x-entity\">\n                      <span className=\"x-meeting-done\">Apr</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"x-meeting-schedule\">May</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"x-meeting-schedule\">Jun</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"x-meeting-schedule\">Jul</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"x-meeting-schedule\">Aug</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"\">Sep</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"\">Oct</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"\">Nov</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"\">Dec</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"\">Jan</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"\">Feb</span>\n                    </div>\n                    <div className=\"x-entity\">\n                      <span className=\"\">Mar</span>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n          </div>\n\n          <div\n            className={\n              userRoleSuperAdmin\n                ? \"row text-left x-dashboard-row x-dashboard-chart\"\n                : \"row text-left x-dashboard-row x-dashboard-chart\"\n            }\n          >\n            {!mrmMonthlyScore ? null : (\n              <div className=\"col-lg-12 col-xl-3  px-0\">\n                <div className=\"x-panel\">\n                  <div className=\"x-panel-body\">\n                    <div className=\"x-score\">\n                      <div className=\"x-score-title\">Monthly score</div>\n                      <div className=\"x-score-value\">\n                        {/* <Progress type=\"circle\" percent={10} status=\"exception\" format={percent => `${percent} %`} />\n                <Progress type=\"circle\" percent={100} status=\"done\" format={percent => `${percent} %`} /> */}\n                        <Progress\n                          type=\"circle\"\n                          percent={parseFloat(\n                            mrmMonthlyScore.she_meeting_monthly_score\n                          ).toFixed(2)}\n                          status=\"\"\n                          format={(percent) => `${percent} %`}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            {shemeeting.getmonthlystatus == \"request\" ? (\n              <div>\n                <Spin indicator={antIcon} />\n              </div>\n            ) : (\n              <div className=\"col-md-12 col-xl-5 x-left\">\n                <div className=\"site-card-border-less-wrapper text-left\">\n                  <Card title=\"MTD\" bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <div\n                        className=\"x-chart-wrapper\"\n                        style={{ width: \"100%\", height: 225 }}\n                      >\n                        <ResponsiveContainer>\n                          <BarChart data={mtdData}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"date\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend />\n                            <Bar dataKey=\"count\" fill=\"#73b4ff\" />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n                  </Card>\n                </div>\n              </div>\n            )}\n            {dashboard.getstatus == \"request\" ? (\n              <div>\n                <Spin indicator={antIcon} />\n              </div>\n            ) : (\n              <div className=\"col-md-12 col-xl-4 x-right\">\n                <div className=\"site-card-border-less-wrapper text-left\">\n                  <Card title=\"YTD\" bordered={false}>\n                    <div className=\"row col-lg-12 col-xl-12 px-0\">\n                      <div\n                        className=\"x-chart-wrapper\"\n                        style={{ width: \"100%\", height: 225 }}\n                      >\n                        <ResponsiveContainer>\n                          <BarChart data={ytdData}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"month\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Legend />\n                            <Bar dataKey=\"count\" fill=\"#ffcb80\" />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n                  </Card>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {sheaction.getactionsstatus == \"request\" ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <div className=\"row text-left x-action-status-count x-dashboard-row\">\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status x-status-total\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Total Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.total_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <ProfileFilled />\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status  x-status-assigned\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Assigned Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.assigned_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <ScheduleFilled />\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status  x-status-completed\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Completed Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.completed_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <CheckCircleFilled />\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status x-status-due\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Over Due Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.overdue_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <Loading3QuartersOutlined />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"row  x-dashboard-row text-left\">\n            <div className=\"col-md-12   px-0\">\n              <div className=\"site-card-border-less-wrapper text-left\">\n                <Card\n                  title=\"MOM Action Review \"\n                  bordered={false}\n                  className=\" x-card-no-padding\"\n                >\n                  <div className=\"row col-lg-12 col-xl-12 px-0\">\n                    <div className=\"x-filters-section\">\n                      <ul>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"OPEN\")}\n                        >\n                          <span className=\"x-filter-icon x-status-icon-assined\">\n                            <Loading3QuartersOutlined />\n                          </span>\n                          <span className=\"x-filter-text x-filter-text-assined\">\n                            Assigned\n                          </span>\n                        </li>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"COMPLETED\")}\n                        >\n                          <span className=\"x-filter-icon x-status-icon-completed\">\n                            <CheckCircleFilled />\n                          </span>\n                          <span className=\"x-filter-text x-filter-text-completed\">\n                            Completed\n                          </span>\n                        </li>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"OVERDUE\")}\n                        >\n                          <span className=\"x-filter-icon x-status-icon-due\">\n                            <Loading3QuartersOutlined />\n                          </span>\n                          <span className=\"x-filter-text x-filter-text-due\">\n                            Over Due\n                          </span>\n                        </li>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"ALL\")}\n                        >\n                          <span className=\"x-filter-icon\">\n                            <SyncOutlined />\n                          </span>\n                          <span className=\"x-filter-text\">Reset</span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n\n                  <div className=\"row col-lg-12 col-xl-12 px-0\">\n                    <div className=\"table-responsive\">\n                      {sherecommendations.getloading ? (\n                        <div>\n                          <Spin indicator={antIcon} />\n                        </div>\n                      ) : (\n                        <div>\n                          <Table\n                            dataSource={sheMeetingRecommendationData}\n                            columns={columns}\n                            rowKey={sheMeetingRecommendationData.she_meeting_id}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const {\n    sherecommendations,\n    shemeeting,\n    dashboard,\n    sheaction,\n    monthlyscore,\n    unittype,\n    units,\n  } = state;\n  return {\n    sherecommendations,\n    shemeeting,\n    dashboard,\n    sheaction,\n    monthlyscore,\n    unittype,\n    units,\n  };\n}\nconst actionCreators = {\n  GetSheRecommendations: actions.GetSheRecommendations,\n  GetSheMeetingActions: actions.GetSheMeetingActions,\n  GetSheMeetingMonthlyScore: actions.GetSheMeetingMonthlyScore,\n  GetSheMeetingMonth: actions.GetSheMeetingMonth,\n  GetSheMeetingYear: actions.GetSheMeetingYear,\n  SelectUnits: actions.SelectUnits,\n  SelectUnitType: actions.SelectUnitType,\n};\nconst connectedManagementDashboard = connect(\n  mapState,\n  actionCreators\n)(ManagementDashboard);\nexport { connectedManagementDashboard as ManagementDashboard };\n","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/needsexpectation.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/dashboard.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/rrraa.js",["757","758"],"import { constants } from \"../constants\";\n\nexport function rrraa(state = {}, action) {\n  switch (action.type) {\n    case constants.GET_RRRAA_REQUEST:\n      return {\n        getloading: true,\n        no_data: \"\",\n        getstatus: \"request\",\n      };\n    case constants.GET_RRRAA_SUCCESS:\n      return {\n        ...state,\n        items: action.rrraa,\n        getloading: false,\n        getstatus: \"success\",\n      };\n    case constants.GET_RRRAA_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        getstatus: \"failure\",\n      };\n    case constants.ADD_RRRAA_REQUEST:\n      return {\n        completeloading: true,\n        no_data: \"\",\n        completestatus: \"request\",\n      };\n    case constants.ADD_RRRAA_SUCCESS:\n      return {\n        ...state,\n        items: action.items,\n        completeloading: false,\n        completestatus: \"success\",\n      };\n    case constants.ADD_RRRAA_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        completestatus: \"failure\",\n      };\n    case constants.EDIT_RRRAA_REQUEST:\n      return {\n        editloading: true,\n        no_data: \"\",\n        editloading: \"request\",\n      };\n    case constants.EDIT_RRRAA_SUCCESS:\n      return {\n        ...state,\n        items: action.items,\n        editloading: false,\n        editloading: \"success\",\n      };\n    case constants.EDIT_RRRAA_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        editloading: \"failure\",\n      };\n    case constants.RRRAA_STATUS_REQUEST:\n      return {\n        getloading: true,\n        no_data: \"\",\n        getstatus: \"request\",\n      };\n    case constants.RRRAA_STATUS_SUCCESS:\n      return {\n        ...state,\n        items: action.items,\n        getloading: false,\n        getstatus: \"success\",\n      };\n    case constants.RRRAA_STATUS_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        getstatus: \"failure\",\n      };\n\n      case constants.DELETE_RRRAA_REQUEST:\n      return {\n        deleteloading: true,\n        no_data: \"\",\n        deletestatus: \"request\",\n      };\n    case constants.DELETE_RRRAA_SUCCESS:\n      return {\n        items: state.items,\n        deleteloading: false,\n        deletestatus: \"success\",\n      };\n    case constants.DELETE_RRRAA_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        deletestatus: \"failure\",\n      };\n\n    default:\n      return state;\n  }\n}\n","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/monthlyscore.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/sheaction.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/scheduler.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulertype.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulermeetingsubtype.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulerfrequency.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/riskopportunities.js",["759","760"],"import { constants } from \"../constants\";\n\nexport function riskopportunities(state = {}, action) {\n  switch (action.type) {\n    case constants.GET_RISK_OPPORTUNITIES_REQUEST:\n      return {\n        getloading: true,\n        no_data: \"\",\n        getstatus: \"request\",\n      };\n    case constants.GET_RISK_OPPORTUNITIES_SUCCESS:\n      return {\n        ...state,\n        items: action.riskopportunities,\n        getloading: false,\n        getstatus: \"success\",\n      };\n    case constants.GET_RISK_OPPORTUNITIES_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        getstatus: \"failure\",\n      };\n    case constants.ADD_RISK_OPPORTUNITIES_REQUEST:\n      return {\n        completeloading: true,\n        no_data: \"\",\n        completestatus: \"request\",\n      };\n    case constants.ADD_RISK_OPPORTUNITIES_SUCCESS:\n      return {\n        ...state,\n        items: action.items,\n        completeloading: false,\n        completestatus: \"success\",\n      };\n    case constants.ADD_RISK_OPPORTUNITIES_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        completestatus: \"failure\",\n      };\n    case constants.EDIT_RISK_OPPORTUNITIES_REQUEST:\n      return {\n        editloading: true,\n        no_data: \"\",\n        editloading: \"request\",\n      };\n    case constants.EDIT_RISK_OPPORTUNITIES_SUCCESS:\n      return {\n        ...state,\n        items: action.items,\n        editloading: false,\n        editloading: \"success\",\n      };\n    case constants.EDIT_RISK_OPPORTUNITIES_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        editloading: \"failure\",\n      };\n    case constants.DELETE_RISK_OPPORTUNITIES_REQUEST:\n      return {\n        deleteloading: true,\n        no_data: \"\",\n        deletestatus: \"request\",\n      };\n    case constants.DELETE_RISK_OPPORTUNITIES_SUCCESS:\n      return {\n        items: state.items,\n        deleteloading: false,\n        deletestatus: \"success\",\n      };\n    case constants.DELETE_RISK_OPPORTUNITIES_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        deletestatus: \"failure\",\n      };\n    case constants.RISK_OPPORTUNITIES_STATUS_REQUEST:\n      return {\n        deleteloading: true,\n        no_data: \"\",\n        deletestatus: \"request\",\n      };\n    case constants.RISK_OPPORTUNITIES_STATUS_SUCCESS:\n      return {\n        items: state.items,\n        deleteloading: false,\n        deletestatus: \"success\",\n      };\n    case constants.RISK_OPPORTUNITIES_STATUS_FAILURE:\n      return {\n        error: action.error,\n        no_data: \"No Data available\",\n        deletestatus: \"failure\",\n      };\n    default:\n      return state;\n  }\n}\n","/home/est-dell-1/kirthika/Marico-SHE/src/reducers/complianceobligations.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulermtd.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulerdays.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/selectaudittype.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/schedulerfrequencyrepeaton.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/authentication.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/reducers/departments.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/MYTask/MYTask/index.js",[],"/home/est-dell-1/kirthika/Marico-SHE/src/container/MYTask/MYTask/MyTask.js",["761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../../actions/actions\";\nimport {\n  Form,\n  Select,\n  DatePicker,\n  Breadcrumb,\n  Card,\n  Spin,\n  Table,\n  Button,\n  Drawer,\n  Input,\n} from \"antd\";\nimport {\n  HomeOutlined,\n  Loading3QuartersOutlined,\n  ProfileFilled,\n  CheckCircleFilled,\n  ScheduleFilled,\n  LoadingOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport moment from \"moment\";\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst dateFormat = \"DD-MM-YYYY\";\nconst dateTimeFormat = \"DD-MM-YYYY  HH:mm\";\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\nclass MyTask extends Component {\n  formFilter = React.createRef();\n  formRef = React.createRef();\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheMeetingRecommendationData: [],\n      meetingActions: [],\n      currentUnits: \"\",\n      currentUnitType: \"\",\n      currentUserId: \"\",\n      openRecommendationDetailView: false,\n      recommendationData: [],\n      meetingData: [],\n      disabledButton: false,\n      currentOffset: 0,\n      schedulerMeetingSubTypeData: [],\n    };\n  }\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let currentUserRollId = user.role_id;\n    {\n      currentUserRollId == 2\n        ? this.setState({\n            userRoleSuperAdmin: true,\n          })\n        : this.setState({\n            userRoleSuperAdmin: false,\n          });\n    }\n    this.setState(\n      {\n        currentUnits: user.unit_id,\n        currentUnitType: user.unit_type,\n        currentUserId: user.member_id,\n      },\n      this.ActionRoleBased\n    );\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let sheRecommendationStatus = this.props.sherecommendations.getstatus;\n      let sheMeetingStatus = this.props.shemeeting.getstatus;\n      let sheMeetingActionsStatus = this.props.sheaction.getactionsstatus;\n      let schedulerMeetingSubTypeStatus =\n        this.props.schedulermeetingsubtype.status;\n\n      {\n        sheRecommendationStatus == \"success\"\n          ? this.setState({\n              sheMeetingRecommendationData:\n                this.props.sherecommendations.items.data,\n            })\n          : this.setState({ sheMeetingRecommendationData: [] });\n      }\n\n      {\n        sheMeetingActionsStatus == \"success\"\n          ? this.setState({ meetingActions: this.props.sheaction.items })\n          : this.setState({ meetingActions: [] });\n      }\n\n      {\n        sheMeetingStatus == \"success\"\n          ? this.setState({\n              meetingData: this.props.shemeeting.items.data,\n            })\n          : this.setState({ meetingData: [] });\n      }\n      {\n        schedulerMeetingSubTypeStatus == \"success\"\n          ? this.setState({\n              schedulerMeetingSubTypeData:\n                this.props.schedulermeetingsubtype.items.data,\n            })\n          : this.setState({\n              schedulerMeetingSubTypeData: [],\n            });\n      }\n    }\n  }\n\n  ActionRoleBased = () => {\n    const { userRoleSuperAdmin, currentUserId, currentUnits } = this.state;\n    let args = `she_meeting_recommendation_fpr_id=${currentUserId}&unit_id=${currentUnits}`;\n    this.props.GetSheRecommendations(args);\n    this.props.GetSheMeetingActions(args);\n    this.props.SelectSchedulerMeetingSubType();\n  };\n\n  ActionStatusFilter = (status) => {\n    const { currentUserId } = this.state;\n    if (status == \"ALL\") {\n      let args = `she_meeting_recommendation_fpr_id=${currentUserId}`;\n      this.props.GetSheRecommendations(args);\n    } else {\n      let args = `she_meeting_recommendation_fpr_id=${currentUserId}&she_meeting_recommendation_status=${status}`;\n      this.props.GetSheRecommendations(args);\n    }\n  };\n\n  OpenRecommendationDetailView = (record) => {\n    this.setState({\n      openRecommendationDetailView: true,\n      recommendationData: record,\n      currentSheMeetingId: record.she_meeting_id,\n      currentRecommendationId: record.she_meeting_recommendation_id,\n      currentRecommendationStatus: record.she_meeting_recommendation_status,\n    });\n    let offset = 0;\n    let args = `she_meeting_id=${record.she_meeting_id}&offset=${offset}`;\n    this.props.GetSheMeeting(args);\n  };\n\n  CloseRecommendationDetailView = () => {\n    this.setState({\n      openRecommendationDetailView: false,\n    });\n    window.location.reload();\n  };\n\n  ActionRecommendation = (values) => {\n    const {\n      currentRecommendationId,\n      currentSheMeetingId,\n      currentUnits,\n      currentOffset,\n    } = this.state;\n    let args1 = `offset=${currentOffset}&unit_id=${currentUnits}`;\n    this.props.CompleteSheRecommendation(currentRecommendationId, args1);\n    let args = `she_meeting_id=${currentSheMeetingId}&offset=${currentOffset}`;\n    this.props.GetSheMeeting(args);\n    this.setState({ disabledButton: true });\n  };\n\n  resetForm = () => {\n    this.formRef.current.resetFields();\n  };\n\n  HandleDate = (date, datestring) => {\n    this.setState({ currentTargetDate: datestring });\n  };\n\n  HandleMeetingType = (value) => {\n    this.setState({ currentMeetingType: value });\n  };\n\n  getFilterParams = (taskFilters) => {\n    let filterParams = \"\";\n    for (let i in taskFilters) {\n      let item = taskFilters[i];\n      if (item && item.length > 0) {\n        if (filterParams != \"\") {\n          filterParams += \"&\";\n        }\n        filterParams += `${i}=${item.toString()}`;\n      }\n    }\n    return filterParams;\n  };\n\n  ActionFilter = (fieldsValue) => {\n    const { currentMeetingType, currentTargetDate } = this.state;\n    const value = {\n      she_meeting_type: currentMeetingType,\n      she_meeting_recommendation_targetdate: currentTargetDate,\n    };\n    let updatedValue = this.getFilterParams(value);\n    this.setState({ val: updatedValue, FilterAction: true });\n    this.filter();\n  };\n\n  filter = () => {\n    const { val, currentUserId, currentUnits } = this.state;\n    let updatedValue =\n      val +\n      `&she_meeting_recommendation_fpr_id=${currentUserId}&unit_id=${currentUnits}`;\n    this.props.GetSheRecommendations(updatedValue);\n  };\n\n  ActionFilterReset = () => {\n    this.formFilter.current.resetFields();\n    const { currentUserId, currentUnits } = this.state;\n    let args = `she_meeting_recommendation_fpr_id=${currentUserId}&unit_id=${currentUnits}`;\n    this.props.GetSheRecommendations(args);\n  };\n\n  render() {\n    const {\n      meetingActions,\n      openRecommendationDetailView,\n      recommendationData,\n      meetingData,\n      userRoleSuperAdmin,\n      sheMeetingRecommendationData,\n      disabledButton,\n      currentRecommendationStatus,\n      schedulerMeetingSubTypeData,\n    } = this.state;\n    const {\n      sherecommendations,\n      shemeeting,\n      sheaction,\n      schedulermeetingsubtype,\n    } = this.props;\n    const columns = [\n      {\n        title: \"Recommendations Description\t\",\n        dataIndex: \"she_meeting_recommendation_name\",\n        key: \"she_meeting_recommendation_name\",\n      },\n      {\n        title: \"Target Date\",\n        dataIndex: \"she_meeting_recommendation_targetdate\",\n        key: \"she_meeting_recommendation_targetdate\",\n        width: \"150px\",\n        render: (she_meeting_recommendation_targetdate) => {\n          return (\n            <p>\n              {moment(she_meeting_recommendation_targetdate).format(dateFormat)}\n            </p>\n          );\n        },\n      },\n      {\n        title: \"Status\",\n        dataIndex: \"she_meeting_recommendation_status\",\n        key: \"she_meeting_recommendation_status\",\n        width: \"150px\",\n        render: (text, record) =>\n          record.she_meeting_recommendation_status === \"OPEN\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-assined\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ) : record.she_meeting_recommendation_status === \"COMPLETED\" ? (\n            <div className=\"x-status-icon\">\n              <span className=\"x-status-icon-completed\">\n                <CheckCircleFilled />\n              </span>\n            </div>\n          ) : (\n            <div className=\"x-status-icon\">\n              <span className=\"x-filter-icon x-status-icon-due\">\n                <Loading3QuartersOutlined />\n              </span>\n            </div>\n          ),\n      },\n    ];\n    const columns1 = [\n      {\n        title: \"Location Type\t\",\n        dataIndex: \"unit_type\",\n        key: \"unit_type\",\n        width: \"250px\",\n      },\n      {\n        title: \"Unit\",\n        dataIndex: \"unit_name\",\n        key: \"unit_name\",\n        width: \"250px\",\n      },\n\n      {\n        title: \"Meeting Type\",\n        dataIndex: \"she_meeting_type\",\n        key: \"she_meeting_type\",\n        width: \"250px\",\n      },\n      {\n        title: \"Date and Time\",\n        dataIndex: \"she_meeting_date\",\n        key: \"she_meeting_date\",\n        width: \"200px\",\n        render: (she_meeting_date) => {\n          return <p>{moment(she_meeting_date).format(dateTimeFormat)}</p>;\n        },\n      },\n      {\n        title: \"Agenda\",\n        dataIndex: \"she_meeting_agenda_details\",\n        key: \"she_meeting_agenda_details\",\n        render: (she_meeting_agenda_details) => (\n          <span>\n            {she_meeting_agenda_details.map((agenda) => {\n              return (\n                <span key={agenda.agenda_id} style={{ marginRight: \"15px\" }}>\n                  {agenda.agenda_name}\n                </span>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Participants\",\n        dataIndex: \"she_meeting_members_details\",\n        key: \"she_meeting_members_details\",\n        render: (she_meeting_members_details) => (\n          <span>\n            {she_meeting_members_details.map((member) => {\n              return (\n                <span key={member.member_id} style={{ marginRight: \"15px\" }}>\n                  {member.member_name}\n                </span>\n              );\n            })}\n          </span>\n        ),\n      },\n      {\n        title: \"Status\",\n        dataIndex: \"she_meeting_status\",\n        key: \"she_meeting_status\",\n        width: \"200px\",\n      },\n    ];\n    return (\n      <React.Fragment>\n        <div className=\"x-page-container x-dashboard\">\n          <div className=\"row\">\n            <div className=\"x-page-title\">\n              <h1>My Task</h1>\n            </div>\n          </div>\n          <div className=\"row x-breadcrumb\">\n            <Breadcrumb>\n              <Link to=\"/dashboard\">\n                <Breadcrumb.Item>\n                  <HomeOutlined />\n                </Breadcrumb.Item>\n              </Link>\n              <Link to=\"/managementdashboard\">\n                <Breadcrumb.Item>\n                  <span>SHE Management</span>\n                </Breadcrumb.Item>\n              </Link>\n              <Breadcrumb.Item>My Task</Breadcrumb.Item>\n            </Breadcrumb>\n          </div>\n          <div className=\"row text-left x-dashboard-row mb-0\">\n            <div className=\"x-control-filter col-md-12 px-0\">\n              <div className=\"x-control-filter-in\">\n                <div className=\"x-table-filters\">\n                  <Form\n                    layout=\"vertical\"\n                    autoComplete=\"off\"\n                    ref={this.formFilter}\n                    className=\"w-100\"\n                    size=\"large\"\n                    onFinish={this.ActionFilter}\n                  >\n                    <div className=\"x-controls-section\">\n                      <div className=\"x-controls\" style={{ width: 200 }}>\n                        <Form.Item name=\"meeting_type\">\n                          <Select\n                            placeholder=\"Meeting Type\"\n                            onChange={this.HandleMeetingType}\n                            loading={schedulermeetingsubtype.loading}\n                            size=\"large\"\n                          >\n                            {schedulerMeetingSubTypeData &&\n                              schedulerMeetingSubTypeData.map((val, index) => (\n                                <option key={index} value={val}>\n                                  {val}\n                                </option>\n                              ))}\n                          </Select>\n                        </Form.Item>\n                      </div>\n                      <div className=\"x-controls\">\n                        <Form.Item name=\"target_Date\">\n                          <DatePicker\n                            format={dateFormat}\n                            size=\"large\"\n                            placeholder=\"Target Date\"\n                            onChange={this.HandleDate}\n                          />\n                        </Form.Item>\n                      </div>\n                      <div className=\"controls\" style={{ width: 200 }}>\n                        <Form.Item>\n                          <div className=\"x-btn-flex\">\n                            <Button\n                              type=\"primary\"\n                              htmlType=\"submit\"\n                              className=\"float-right\"\n                            >\n                              Filter\n                            </Button>\n                            <Button\n                              type=\"link\"\n                              htmlType=\"reset\"\n                              className=\"float-right\"\n                              danger\n                              onClick={this.ActionFilterReset}\n                            >\n                              Reset\n                            </Button>\n                          </div>\n                        </Form.Item>\n                      </div>\n                    </div>\n                  </Form>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row x-dashboard-row\"></div>\n          {sheaction.getactionsstatus == \"request\" ? (\n            <div>\n              <Spin indicator={antIcon} />\n            </div>\n          ) : (\n            <div className=\"row text-left x-action-status-count x-dashboard-row\">\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status x-status-total\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Total Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.total_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <ProfileFilled />\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status  x-status-assigned\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Assigned Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.assigned_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <ScheduleFilled />\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status  x-status-completed\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Completed Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.completed_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <CheckCircleFilled />\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-lg-6 col-xl-3 px-0\">\n                <div className=\"x-box-status x-status-due\">\n                  <div className=\"x-text\">\n                    <div className=\"x-label\">Over Due Action</div>\n                    <div className=\"x-value\">\n                      {meetingActions.overdue_actions}\n                    </div>\n                  </div>\n                  <div className=\"x-icon\">\n                    <Loading3QuartersOutlined />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"row  x-dashboard-row text-left\">\n            <div className=\"col-md-12   px-0\">\n              <div className=\"site-card-border-less-wrapper text-left\">\n                <Card\n                  title=\"MOM Action Review\"\n                  bordered={false}\n                  className=\"x-card-no-padding\"\n                >\n                  <div className=\"row col-lg-12 col-xl-12 px-0\">\n                    <div className=\"x-filters-section\">\n                      <ul>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"OPEN\")}\n                        >\n                          <span className=\"x-filter-icon x-status-icon-assined\">\n                            <Loading3QuartersOutlined />\n                          </span>\n                          <span className=\"x-filter-text  x-filter-text-assined\">\n                            Assigned\n                          </span>\n                        </li>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"COMPLETED\")}\n                        >\n                          <span className=\"x-filter-icon x-status-icon-completed\">\n                            <CheckCircleFilled />\n                          </span>\n                          <span className=\"x-filter-text x-filter-text-completed\">\n                            Completed\n                          </span>\n                        </li>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"OVERDUE\")}\n                        >\n                          <span className=\"x-filter-icon x-status-icon-due\">\n                            <Loading3QuartersOutlined />\n                          </span>\n                          <span className=\"x-filter-text x-filter-text-due\">\n                            Over Due\n                          </span>\n                        </li>\n                        <li\n                          className=\"x-status-icon\"\n                          onClick={() => this.ActionStatusFilter(\"ALL\")}\n                        >\n                          <span className=\"x-filter-icon\">\n                            <SyncOutlined />\n                          </span>\n                          <span className=\"x-filter-text\">Reset</span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"row col-lg-12 col-xl-12 px-0\">\n                    <div className=\"table-responsive\">\n                      {sherecommendations.getloading ? (\n                        <div>\n                          <Spin indicator={antIcon} />\n                        </div>\n                      ) : (\n                        <div>\n                          {sherecommendations.items != undefined ? (\n                            <Table\n                              onRow={(record, rowIndex) => {\n                                return {\n                                  onClick: (e) => {\n                                    this.OpenRecommendationDetailView(record);\n                                  },\n                                };\n                              }}\n                              dataSource={sheMeetingRecommendationData}\n                              columns={columns}\n                              rowKey={\n                                sheMeetingRecommendationData.she_meeting_id\n                              }\n                            />\n                          ) : null}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n          </div>\n          <Drawer\n            title=\"Recommendations Detail View\"\n            placement=\"right\"\n            onClose={this.CloseRecommendationDetailView}\n            visible={openRecommendationDetailView}\n          >\n            <div className=\"row x-meeting-details\">\n              <div className=\"col-md-12 px-0\">\n                {shemeeting.getloading ? (\n                  <div>\n                    <Spin indicator={antIcon} />\n                  </div>\n                ) : (\n                  <div>\n                    <Table dataSource={meetingData} columns={columns1} />\n                  </div>\n                )}\n              </div>\n\n              <div\n                className={\n                  currentRecommendationStatus == \"COMPLETED\"\n                    ? \"d-none col-md-12 px-0\"\n                    : \"col-md-12 px-0\"\n                }\n              >\n                <div className=\"mt-4\">\n                  <Button\n                    type=\"primary\"\n                    disabled={\n                      this.props.sherecommendations.completeloading ||\n                      disabledButton\n                    }\n                    onClick={this.ActionRecommendation}\n                  >\n                    Complete\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Drawer>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nfunction mapState(state) {\n  const {\n    sherecommendations,\n    shemeeting,\n    sheaction,\n    schedulertype,\n    schedulermeetingsubtype,\n  } = state;\n  return {\n    sherecommendations,\n    shemeeting,\n    sheaction,\n    schedulertype,\n    schedulermeetingsubtype,\n  };\n}\nconst actionCreators = {\n  GetSheRecommendations: actions.GetSheRecommendations,\n  GetSheMeetingActions: actions.GetSheMeetingActions,\n  GetSheMeeting: actions.GetSheMeeting,\n  CompleteSheRecommendation: actions.CompleteSheRecommendation,\n  ApproveShemeeting: actions.ApproveShemeeting,\n  SelectSchedulerMeetingSubType: actions.SelectSchedulerMeetingSubType,\n};\nconst connectedMyTask = connect(mapState, actionCreators)(MyTask);\nexport { connectedMyTask as MyTask };\n",{"ruleId":"781","severity":1,"message":"782","line":4,"column":13,"nodeType":"783","messageId":"784","endLine":4,"endColumn":26},{"ruleId":"785","replacedBy":"786"},{"ruleId":"787","replacedBy":"788"},{"ruleId":"781","severity":1,"message":"789","line":4,"column":41,"nodeType":"783","messageId":"784","endLine":4,"endColumn":47},{"ruleId":"781","severity":1,"message":"790","line":41,"column":10,"nodeType":"783","messageId":"784","endLine":41,"endColumn":17},{"ruleId":"781","severity":1,"message":"791","line":41,"column":19,"nodeType":"783","messageId":"784","endLine":41,"endColumn":29},{"ruleId":"792","severity":1,"message":"793","line":49,"column":1,"nodeType":"783","endLine":49,"endColumn":10,"suggestions":"794"},{"ruleId":"795","severity":1,"message":"796","line":79,"column":9,"nodeType":"797","endLine":79,"endColumn":47},{"ruleId":"795","severity":1,"message":"796","line":87,"column":9,"nodeType":"797","endLine":87,"endColumn":47},{"ruleId":"795","severity":1,"message":"796","line":95,"column":9,"nodeType":"797","endLine":95,"endColumn":47},{"ruleId":"795","severity":1,"message":"796","line":153,"column":9,"nodeType":"797","endLine":153,"endColumn":21},{"ruleId":"795","severity":1,"message":"796","line":159,"column":9,"nodeType":"797","endLine":159,"endColumn":21},{"ruleId":"795","severity":1,"message":"798","line":420,"column":11,"nodeType":"797","endLine":421,"endColumn":33},{"ruleId":"795","severity":1,"message":"798","line":437,"column":15,"nodeType":"797","endLine":438,"endColumn":37},{"ruleId":"795","severity":1,"message":"798","line":454,"column":15,"nodeType":"797","endLine":455,"endColumn":37},{"ruleId":"792","severity":1,"message":"799","line":78,"column":6,"nodeType":"800","endLine":78,"endColumn":8,"suggestions":"801"},{"ruleId":"792","severity":1,"message":"802","line":95,"column":6,"nodeType":"800","endLine":95,"endColumn":8,"suggestions":"803"},{"ruleId":"785","replacedBy":"804"},{"ruleId":"787","replacedBy":"805"},{"ruleId":"806","severity":1,"message":"807","line":1483,"column":14,"nodeType":"808","messageId":"809","endLine":1483,"endColumn":16},{"ruleId":"806","severity":1,"message":"807","line":1484,"column":24,"nodeType":"808","messageId":"809","endLine":1484,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":1492,"column":24,"nodeType":"808","messageId":"809","endLine":1492,"endColumn":26},{"ruleId":"781","severity":1,"message":"810","line":240,"column":30,"nodeType":"783","messageId":"784","endLine":240,"endColumn":48},{"ruleId":"781","severity":1,"message":"811","line":1,"column":17,"nodeType":"783","messageId":"784","endLine":1,"endColumn":26},{"ruleId":"781","severity":1,"message":"812","line":32,"column":9,"nodeType":"783","messageId":"784","endLine":32,"endColumn":15},{"ruleId":"813","severity":1,"message":"814","line":75,"column":5,"nodeType":"815","messageId":"816","endLine":83,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":76,"column":25,"nodeType":"808","messageId":"809","endLine":76,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":84,"column":5,"nodeType":"815","messageId":"816","endLine":92,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":85,"column":25,"nodeType":"808","messageId":"809","endLine":85,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":117,"column":7,"nodeType":"815","messageId":"816","endLine":127,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":118,"column":22,"nodeType":"808","messageId":"809","endLine":118,"endColumn":24},{"ruleId":"813","severity":1,"message":"814","line":129,"column":7,"nodeType":"815","messageId":"816","endLine":137,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":130,"column":33,"nodeType":"808","messageId":"809","endLine":130,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":138,"column":7,"nodeType":"815","messageId":"816","endLine":146,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":139,"column":23,"nodeType":"808","messageId":"809","endLine":139,"endColumn":25},{"ruleId":"813","severity":1,"message":"814","line":147,"column":7,"nodeType":"815","messageId":"816","endLine":155,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":148,"column":24,"nodeType":"808","messageId":"809","endLine":148,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":156,"column":7,"nodeType":"815","messageId":"816","endLine":164,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":157,"column":21,"nodeType":"808","messageId":"809","endLine":157,"endColumn":23},{"ruleId":"781","severity":1,"message":"817","line":360,"column":13,"nodeType":"783","messageId":"784","endLine":360,"endColumn":26},{"ruleId":"806","severity":1,"message":"818","line":365,"column":26,"nodeType":"808","messageId":"809","endLine":365,"endColumn":28},{"ruleId":"781","severity":1,"message":"819","line":455,"column":7,"nodeType":"783","messageId":"784","endLine":455,"endColumn":22},{"ruleId":"781","severity":1,"message":"820","line":456,"column":7,"nodeType":"783","messageId":"784","endLine":456,"endColumn":19},{"ruleId":"781","severity":1,"message":"821","line":460,"column":50,"nodeType":"783","messageId":"784","endLine":460,"endColumn":55},{"ruleId":"806","severity":1,"message":"807","line":1046,"column":39,"nodeType":"808","messageId":"809","endLine":1046,"endColumn":41},{"ruleId":"781","severity":1,"message":"822","line":27,"column":9,"nodeType":"783","messageId":"784","endLine":27,"endColumn":17},{"ruleId":"781","severity":1,"message":"812","line":28,"column":9,"nodeType":"783","messageId":"784","endLine":28,"endColumn":15},{"ruleId":"813","severity":1,"message":"814","line":54,"column":5,"nodeType":"815","messageId":"816","endLine":62,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":55,"column":25,"nodeType":"808","messageId":"809","endLine":55,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":79,"column":7,"nodeType":"815","messageId":"816","endLine":86,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":80,"column":33,"nodeType":"808","messageId":"809","endLine":80,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":88,"column":7,"nodeType":"815","messageId":"816","endLine":92,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":89,"column":33,"nodeType":"808","messageId":"809","endLine":89,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":94,"column":7,"nodeType":"815","messageId":"816","endLine":100,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":95,"column":26,"nodeType":"808","messageId":"809","endLine":95,"endColumn":28},{"ruleId":"813","severity":1,"message":"814","line":101,"column":7,"nodeType":"815","messageId":"816","endLine":109,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":102,"column":29,"nodeType":"808","messageId":"809","endLine":102,"endColumn":31},{"ruleId":"781","severity":1,"message":"823","line":114,"column":13,"nodeType":"783","messageId":"784","endLine":114,"endColumn":31},{"ruleId":"806","severity":1,"message":"807","line":123,"column":16,"nodeType":"808","messageId":"809","endLine":123,"endColumn":18},{"ruleId":"806","severity":1,"message":"818","line":183,"column":26,"nodeType":"808","messageId":"809","endLine":183,"endColumn":28},{"ruleId":"781","severity":1,"message":"824","line":222,"column":7,"nodeType":"783","messageId":"784","endLine":222,"endColumn":25},{"ruleId":"781","severity":1,"message":"823","line":224,"column":7,"nodeType":"783","messageId":"784","endLine":224,"endColumn":25},{"ruleId":"806","severity":1,"message":"807","line":437,"column":39,"nodeType":"808","messageId":"809","endLine":437,"endColumn":41},{"ruleId":"806","severity":1,"message":"818","line":561,"column":53,"nodeType":"808","messageId":"809","endLine":561,"endColumn":55},{"ruleId":"806","severity":1,"message":"807","line":604,"column":59,"nodeType":"808","messageId":"809","endLine":604,"endColumn":61},{"ruleId":"781","severity":1,"message":"825","line":17,"column":3,"nodeType":"783","messageId":"784","endLine":17,"endColumn":15},{"ruleId":"781","severity":1,"message":"826","line":29,"column":3,"nodeType":"783","messageId":"784","endLine":29,"endColumn":13},{"ruleId":"813","severity":1,"message":"814","line":183,"column":5,"nodeType":"815","messageId":"816","endLine":191,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":184,"column":28,"nodeType":"808","messageId":"809","endLine":184,"endColumn":30},{"ruleId":"806","severity":1,"message":"807","line":215,"column":26,"nodeType":"808","messageId":"809","endLine":215,"endColumn":28},{"ruleId":"806","severity":1,"message":"807","line":220,"column":25,"nodeType":"808","messageId":"809","endLine":220,"endColumn":27},{"ruleId":"806","severity":1,"message":"807","line":225,"column":27,"nodeType":"808","messageId":"809","endLine":225,"endColumn":29},{"ruleId":"806","severity":1,"message":"807","line":230,"column":24,"nodeType":"808","messageId":"809","endLine":230,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":235,"column":34,"nodeType":"808","messageId":"809","endLine":235,"endColumn":36},{"ruleId":"806","severity":1,"message":"807","line":240,"column":44,"nodeType":"808","messageId":"809","endLine":240,"endColumn":46},{"ruleId":"806","severity":1,"message":"807","line":245,"column":38,"nodeType":"808","messageId":"809","endLine":245,"endColumn":40},{"ruleId":"813","severity":1,"message":"814","line":293,"column":5,"nodeType":"815","messageId":"816","endLine":301,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":294,"column":27,"nodeType":"808","messageId":"809","endLine":294,"endColumn":29},{"ruleId":"806","severity":1,"message":"807","line":381,"column":29,"nodeType":"808","messageId":"809","endLine":381,"endColumn":31},{"ruleId":"806","severity":1,"message":"807","line":384,"column":34,"nodeType":"808","messageId":"809","endLine":384,"endColumn":36},{"ruleId":"806","severity":1,"message":"807","line":416,"column":38,"nodeType":"808","messageId":"809","endLine":416,"endColumn":40},{"ruleId":"806","severity":1,"message":"807","line":419,"column":34,"nodeType":"808","messageId":"809","endLine":419,"endColumn":36},{"ruleId":"781","severity":1,"message":"810","line":500,"column":35,"nodeType":"783","messageId":"784","endLine":500,"endColumn":53},{"ruleId":"781","severity":1,"message":"827","line":553,"column":13,"nodeType":"783","messageId":"784","endLine":553,"endColumn":20},{"ruleId":"781","severity":1,"message":"828","line":553,"column":22,"nodeType":"783","messageId":"784","endLine":553,"endColumn":28},{"ruleId":"806","severity":1,"message":"807","line":1417,"column":67,"nodeType":"808","messageId":"809","endLine":1417,"endColumn":69},{"ruleId":"806","severity":1,"message":"807","line":1421,"column":71,"nodeType":"808","messageId":"809","endLine":1421,"endColumn":73},{"ruleId":"806","severity":1,"message":"807","line":2009,"column":67,"nodeType":"808","messageId":"809","endLine":2009,"endColumn":69},{"ruleId":"806","severity":1,"message":"807","line":2013,"column":71,"nodeType":"808","messageId":"809","endLine":2013,"endColumn":73},{"ruleId":"806","severity":1,"message":"807","line":2257,"column":67,"nodeType":"808","messageId":"809","endLine":2257,"endColumn":69},{"ruleId":"806","severity":1,"message":"807","line":2261,"column":71,"nodeType":"808","messageId":"809","endLine":2261,"endColumn":73},{"ruleId":"781","severity":1,"message":"811","line":1,"column":17,"nodeType":"783","messageId":"784","endLine":1,"endColumn":26},{"ruleId":"781","severity":1,"message":"829","line":7,"column":3,"nodeType":"783","messageId":"784","endLine":7,"endColumn":13},{"ruleId":"781","severity":1,"message":"830","line":9,"column":3,"nodeType":"783","messageId":"784","endLine":9,"endColumn":7},{"ruleId":"781","severity":1,"message":"831","line":10,"column":3,"nodeType":"783","messageId":"784","endLine":10,"endColumn":13},{"ruleId":"781","severity":1,"message":"832","line":12,"column":3,"nodeType":"783","messageId":"784","endLine":12,"endColumn":8},{"ruleId":"781","severity":1,"message":"833","line":13,"column":3,"nodeType":"783","messageId":"784","endLine":13,"endColumn":11},{"ruleId":"781","severity":1,"message":"834","line":14,"column":3,"nodeType":"783","messageId":"784","endLine":14,"endColumn":9},{"ruleId":"781","severity":1,"message":"835","line":18,"column":10,"nodeType":"783","messageId":"784","endLine":18,"endColumn":22},{"ruleId":"781","severity":1,"message":"812","line":19,"column":9,"nodeType":"783","messageId":"784","endLine":19,"endColumn":15},{"ruleId":"781","severity":1,"message":"822","line":20,"column":9,"nodeType":"783","messageId":"784","endLine":20,"endColumn":17},{"ruleId":"836","severity":1,"message":"837","line":49,"column":27,"nodeType":"838","messageId":"839","endLine":49,"endColumn":28,"suggestions":"840"},{"ruleId":"781","severity":1,"message":"841","line":57,"column":13,"nodeType":"783","messageId":"784","endLine":57,"endColumn":23},{"ruleId":"781","severity":1,"message":"842","line":59,"column":9,"nodeType":"783","messageId":"784","endLine":59,"endColumn":18},{"ruleId":"781","severity":1,"message":"811","line":1,"column":17,"nodeType":"783","messageId":"784","endLine":1,"endColumn":26},{"ruleId":"781","severity":1,"message":"843","line":11,"column":3,"nodeType":"783","messageId":"784","endLine":11,"endColumn":9},{"ruleId":"781","severity":1,"message":"844","line":15,"column":3,"nodeType":"783","messageId":"784","endLine":15,"endColumn":10},{"ruleId":"781","severity":1,"message":"845","line":23,"column":3,"nodeType":"783","messageId":"784","endLine":23,"endColumn":17},{"ruleId":"781","severity":1,"message":"812","line":34,"column":9,"nodeType":"783","messageId":"784","endLine":34,"endColumn":15},{"ruleId":"781","severity":1,"message":"846","line":37,"column":7,"nodeType":"783","messageId":"784","endLine":37,"endColumn":22},{"ruleId":"781","severity":1,"message":"817","line":70,"column":13,"nodeType":"783","messageId":"784","endLine":70,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":73,"column":5,"nodeType":"815","messageId":"816","endLine":81,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":74,"column":25,"nodeType":"808","messageId":"809","endLine":74,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":82,"column":5,"nodeType":"815","messageId":"816","endLine":90,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":83,"column":25,"nodeType":"808","messageId":"809","endLine":83,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":112,"column":7,"nodeType":"815","messageId":"816","endLine":122,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":113,"column":33,"nodeType":"808","messageId":"809","endLine":113,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":123,"column":7,"nodeType":"815","messageId":"816","endLine":131,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":124,"column":23,"nodeType":"808","messageId":"809","endLine":124,"endColumn":25},{"ruleId":"813","severity":1,"message":"814","line":132,"column":7,"nodeType":"815","messageId":"816","endLine":140,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":133,"column":24,"nodeType":"808","messageId":"809","endLine":133,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":141,"column":7,"nodeType":"815","messageId":"816","endLine":149,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":142,"column":21,"nodeType":"808","messageId":"809","endLine":142,"endColumn":23},{"ruleId":"781","severity":1,"message":"817","line":313,"column":13,"nodeType":"783","messageId":"784","endLine":313,"endColumn":26},{"ruleId":"806","severity":1,"message":"818","line":318,"column":26,"nodeType":"808","messageId":"809","endLine":318,"endColumn":28},{"ruleId":"781","severity":1,"message":"847","line":403,"column":7,"nodeType":"783","messageId":"784","endLine":403,"endColumn":11},{"ruleId":"781","severity":1,"message":"819","line":408,"column":7,"nodeType":"783","messageId":"784","endLine":408,"endColumn":22},{"ruleId":"781","severity":1,"message":"820","line":409,"column":7,"nodeType":"783","messageId":"784","endLine":409,"endColumn":19},{"ruleId":"781","severity":1,"message":"821","line":413,"column":32,"nodeType":"783","messageId":"784","endLine":413,"endColumn":37},{"ruleId":"806","severity":1,"message":"807","line":1001,"column":40,"nodeType":"808","messageId":"809","endLine":1001,"endColumn":42},{"ruleId":"781","severity":1,"message":"811","line":1,"column":17,"nodeType":"783","messageId":"784","endLine":1,"endColumn":26},{"ruleId":"781","severity":1,"message":"843","line":14,"column":3,"nodeType":"783","messageId":"784","endLine":14,"endColumn":9},{"ruleId":"781","severity":1,"message":"844","line":15,"column":3,"nodeType":"783","messageId":"784","endLine":15,"endColumn":10},{"ruleId":"781","severity":1,"message":"845","line":23,"column":3,"nodeType":"783","messageId":"784","endLine":23,"endColumn":17},{"ruleId":"781","severity":1,"message":"812","line":34,"column":9,"nodeType":"783","messageId":"784","endLine":34,"endColumn":15},{"ruleId":"781","severity":1,"message":"817","line":69,"column":13,"nodeType":"783","messageId":"784","endLine":69,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":72,"column":5,"nodeType":"815","messageId":"816","endLine":80,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":73,"column":25,"nodeType":"808","messageId":"809","endLine":73,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":81,"column":5,"nodeType":"815","messageId":"816","endLine":89,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":82,"column":25,"nodeType":"808","messageId":"809","endLine":82,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":112,"column":7,"nodeType":"815","messageId":"816","endLine":123,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":113,"column":37,"nodeType":"808","messageId":"809","endLine":113,"endColumn":39},{"ruleId":"813","severity":1,"message":"814","line":124,"column":7,"nodeType":"815","messageId":"816","endLine":132,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":125,"column":23,"nodeType":"808","messageId":"809","endLine":125,"endColumn":25},{"ruleId":"813","severity":1,"message":"814","line":133,"column":7,"nodeType":"815","messageId":"816","endLine":141,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":134,"column":24,"nodeType":"808","messageId":"809","endLine":134,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":142,"column":7,"nodeType":"815","messageId":"816","endLine":150,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":143,"column":21,"nodeType":"808","messageId":"809","endLine":143,"endColumn":23},{"ruleId":"781","severity":1,"message":"817","line":341,"column":13,"nodeType":"783","messageId":"784","endLine":341,"endColumn":26},{"ruleId":"806","severity":1,"message":"818","line":346,"column":26,"nodeType":"808","messageId":"809","endLine":346,"endColumn":28},{"ruleId":"781","severity":1,"message":"819","line":434,"column":7,"nodeType":"783","messageId":"784","endLine":434,"endColumn":22},{"ruleId":"781","severity":1,"message":"820","line":435,"column":7,"nodeType":"783","messageId":"784","endLine":435,"endColumn":19},{"ruleId":"806","severity":1,"message":"807","line":995,"column":54,"nodeType":"808","messageId":"809","endLine":995,"endColumn":56},{"ruleId":"806","severity":1,"message":"807","line":1030,"column":44,"nodeType":"808","messageId":"809","endLine":1030,"endColumn":46},{"ruleId":"781","severity":1,"message":"811","line":1,"column":17,"nodeType":"783","messageId":"784","endLine":1,"endColumn":26},{"ruleId":"781","severity":1,"message":"843","line":11,"column":3,"nodeType":"783","messageId":"784","endLine":11,"endColumn":9},{"ruleId":"781","severity":1,"message":"844","line":12,"column":3,"nodeType":"783","messageId":"784","endLine":12,"endColumn":10},{"ruleId":"781","severity":1,"message":"845","line":23,"column":3,"nodeType":"783","messageId":"784","endLine":23,"endColumn":17},{"ruleId":"781","severity":1,"message":"812","line":34,"column":9,"nodeType":"783","messageId":"784","endLine":34,"endColumn":15},{"ruleId":"781","severity":1,"message":"817","line":69,"column":13,"nodeType":"783","messageId":"784","endLine":69,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":72,"column":5,"nodeType":"815","messageId":"816","endLine":80,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":73,"column":25,"nodeType":"808","messageId":"809","endLine":73,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":81,"column":5,"nodeType":"815","messageId":"816","endLine":89,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":82,"column":25,"nodeType":"808","messageId":"809","endLine":82,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":110,"column":7,"nodeType":"815","messageId":"816","endLine":120,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":111,"column":21,"nodeType":"808","messageId":"809","endLine":111,"endColumn":23},{"ruleId":"813","severity":1,"message":"814","line":121,"column":7,"nodeType":"815","messageId":"816","endLine":129,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":122,"column":23,"nodeType":"808","messageId":"809","endLine":122,"endColumn":25},{"ruleId":"813","severity":1,"message":"814","line":130,"column":7,"nodeType":"815","messageId":"816","endLine":138,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":131,"column":24,"nodeType":"808","messageId":"809","endLine":131,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":139,"column":7,"nodeType":"815","messageId":"816","endLine":147,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":140,"column":21,"nodeType":"808","messageId":"809","endLine":140,"endColumn":23},{"ruleId":"781","severity":1,"message":"817","line":306,"column":13,"nodeType":"783","messageId":"784","endLine":306,"endColumn":26},{"ruleId":"806","severity":1,"message":"818","line":311,"column":26,"nodeType":"808","messageId":"809","endLine":311,"endColumn":28},{"ruleId":"781","severity":1,"message":"819","line":400,"column":7,"nodeType":"783","messageId":"784","endLine":400,"endColumn":22},{"ruleId":"781","severity":1,"message":"820","line":401,"column":7,"nodeType":"783","messageId":"784","endLine":401,"endColumn":19},{"ruleId":"806","severity":1,"message":"807","line":987,"column":28,"nodeType":"808","messageId":"809","endLine":987,"endColumn":30},{"ruleId":"781","severity":1,"message":"822","line":35,"column":9,"nodeType":"783","messageId":"784","endLine":35,"endColumn":17},{"ruleId":"781","severity":1,"message":"848","line":38,"column":9,"nodeType":"783","messageId":"784","endLine":38,"endColumn":16},{"ruleId":"813","severity":1,"message":"814","line":96,"column":5,"nodeType":"815","messageId":"816","endLine":104,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":97,"column":25,"nodeType":"808","messageId":"809","endLine":97,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":105,"column":5,"nodeType":"815","messageId":"816","endLine":113,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":106,"column":25,"nodeType":"808","messageId":"809","endLine":106,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":146,"column":7,"nodeType":"815","messageId":"816","endLine":156,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":147,"column":25,"nodeType":"808","messageId":"809","endLine":147,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":157,"column":7,"nodeType":"815","messageId":"816","endLine":165,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":158,"column":24,"nodeType":"808","messageId":"809","endLine":158,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":166,"column":7,"nodeType":"815","messageId":"816","endLine":174,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":167,"column":21,"nodeType":"808","messageId":"809","endLine":167,"endColumn":23},{"ruleId":"813","severity":1,"message":"814","line":175,"column":7,"nodeType":"815","messageId":"816","endLine":183,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":176,"column":23,"nodeType":"808","messageId":"809","endLine":176,"endColumn":25},{"ruleId":"813","severity":1,"message":"814","line":184,"column":7,"nodeType":"815","messageId":"816","endLine":192,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":185,"column":25,"nodeType":"808","messageId":"809","endLine":185,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":193,"column":7,"nodeType":"815","messageId":"816","endLine":201,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":194,"column":22,"nodeType":"808","messageId":"809","endLine":194,"endColumn":24},{"ruleId":"813","severity":1,"message":"814","line":202,"column":7,"nodeType":"815","messageId":"816","endLine":210,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":203,"column":29,"nodeType":"808","messageId":"809","endLine":203,"endColumn":31},{"ruleId":"813","severity":1,"message":"814","line":212,"column":7,"nodeType":"815","messageId":"816","endLine":221,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":213,"column":39,"nodeType":"808","messageId":"809","endLine":213,"endColumn":41},{"ruleId":"813","severity":1,"message":"814","line":223,"column":7,"nodeType":"815","messageId":"816","endLine":231,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":224,"column":34,"nodeType":"808","messageId":"809","endLine":224,"endColumn":36},{"ruleId":"813","severity":1,"message":"814","line":233,"column":7,"nodeType":"815","messageId":"816","endLine":241,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":234,"column":29,"nodeType":"808","messageId":"809","endLine":234,"endColumn":31},{"ruleId":"813","severity":1,"message":"814","line":243,"column":7,"nodeType":"815","messageId":"816","endLine":252,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":244,"column":42,"nodeType":"808","messageId":"809","endLine":244,"endColumn":44},{"ruleId":"813","severity":1,"message":"814","line":254,"column":7,"nodeType":"815","messageId":"816","endLine":260,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":255,"column":31,"nodeType":"808","messageId":"809","endLine":255,"endColumn":33},{"ruleId":"813","severity":1,"message":"814","line":262,"column":7,"nodeType":"815","messageId":"816","endLine":266,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":263,"column":27,"nodeType":"808","messageId":"809","endLine":263,"endColumn":29},{"ruleId":"781","severity":1,"message":"849","line":292,"column":7,"nodeType":"783","messageId":"784","endLine":292,"endColumn":27},{"ruleId":"806","severity":1,"message":"818","line":319,"column":26,"nodeType":"808","messageId":"809","endLine":319,"endColumn":28},{"ruleId":"806","severity":1,"message":"807","line":383,"column":24,"nodeType":"808","messageId":"809","endLine":383,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":386,"column":24,"nodeType":"808","messageId":"809","endLine":386,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":389,"column":24,"nodeType":"808","messageId":"809","endLine":389,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":392,"column":24,"nodeType":"808","messageId":"809","endLine":392,"endColumn":26},{"ruleId":"781","severity":1,"message":"850","line":400,"column":13,"nodeType":"783","messageId":"784","endLine":400,"endColumn":30},{"ruleId":"806","severity":1,"message":"818","line":442,"column":42,"nodeType":"808","messageId":"809","endLine":442,"endColumn":44},{"ruleId":"806","severity":1,"message":"807","line":466,"column":42,"nodeType":"808","messageId":"809","endLine":466,"endColumn":44},{"ruleId":"806","severity":1,"message":"818","line":474,"column":35,"nodeType":"808","messageId":"809","endLine":474,"endColumn":37},{"ruleId":"806","severity":1,"message":"807","line":533,"column":20,"nodeType":"808","messageId":"809","endLine":533,"endColumn":22},{"ruleId":"806","severity":1,"message":"807","line":548,"column":35,"nodeType":"808","messageId":"809","endLine":548,"endColumn":37},{"ruleId":"781","severity":1,"message":"850","line":616,"column":13,"nodeType":"783","messageId":"784","endLine":616,"endColumn":30},{"ruleId":"806","severity":1,"message":"807","line":642,"column":23,"nodeType":"808","messageId":"809","endLine":642,"endColumn":25},{"ruleId":"806","severity":1,"message":"807","line":703,"column":19,"nodeType":"808","messageId":"809","endLine":703,"endColumn":21},{"ruleId":"806","severity":1,"message":"807","line":705,"column":26,"nodeType":"808","messageId":"809","endLine":705,"endColumn":28},{"ruleId":"806","severity":1,"message":"807","line":707,"column":26,"nodeType":"808","messageId":"809","endLine":707,"endColumn":28},{"ruleId":"806","severity":1,"message":"807","line":733,"column":24,"nodeType":"808","messageId":"809","endLine":733,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":736,"column":24,"nodeType":"808","messageId":"809","endLine":736,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":739,"column":24,"nodeType":"808","messageId":"809","endLine":739,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":742,"column":24,"nodeType":"808","messageId":"809","endLine":742,"endColumn":26},{"ruleId":"806","severity":1,"message":"807","line":799,"column":40,"nodeType":"808","messageId":"809","endLine":799,"endColumn":42},{"ruleId":"806","severity":1,"message":"807","line":804,"column":36,"nodeType":"808","messageId":"809","endLine":804,"endColumn":38},{"ruleId":"806","severity":1,"message":"807","line":819,"column":35,"nodeType":"808","messageId":"809","endLine":819,"endColumn":37},{"ruleId":"781","severity":1,"message":"851","line":936,"column":7,"nodeType":"783","messageId":"784","endLine":936,"endColumn":20},{"ruleId":"781","severity":1,"message":"819","line":938,"column":7,"nodeType":"783","messageId":"784","endLine":938,"endColumn":22},{"ruleId":"781","severity":1,"message":"820","line":939,"column":7,"nodeType":"783","messageId":"784","endLine":939,"endColumn":19},{"ruleId":"781","severity":1,"message":"852","line":945,"column":7,"nodeType":"783","messageId":"784","endLine":945,"endColumn":16},{"ruleId":"781","severity":1,"message":"853","line":959,"column":7,"nodeType":"783","messageId":"784","endLine":959,"endColumn":42},{"ruleId":"806","severity":1,"message":"807","line":991,"column":41,"nodeType":"808","messageId":"809","endLine":991,"endColumn":43},{"ruleId":"806","severity":1,"message":"807","line":1172,"column":42,"nodeType":"808","messageId":"809","endLine":1172,"endColumn":44},{"ruleId":"806","severity":1,"message":"807","line":1210,"column":42,"nodeType":"808","messageId":"809","endLine":1210,"endColumn":44},{"ruleId":"806","severity":1,"message":"807","line":1276,"column":42,"nodeType":"808","messageId":"809","endLine":1276,"endColumn":44},{"ruleId":"806","severity":1,"message":"807","line":1530,"column":47,"nodeType":"808","messageId":"809","endLine":1530,"endColumn":49},{"ruleId":"806","severity":1,"message":"807","line":1540,"column":56,"nodeType":"808","messageId":"809","endLine":1540,"endColumn":58},{"ruleId":"806","severity":1,"message":"807","line":1567,"column":47,"nodeType":"808","messageId":"809","endLine":1567,"endColumn":49},{"ruleId":"806","severity":1,"message":"807","line":1576,"column":54,"nodeType":"808","messageId":"809","endLine":1576,"endColumn":56},{"ruleId":"806","severity":1,"message":"807","line":1593,"column":47,"nodeType":"808","messageId":"809","endLine":1593,"endColumn":49},{"ruleId":"806","severity":1,"message":"807","line":1603,"column":56,"nodeType":"808","messageId":"809","endLine":1603,"endColumn":58},{"ruleId":"806","severity":1,"message":"807","line":1631,"column":56,"nodeType":"808","messageId":"809","endLine":1631,"endColumn":58},{"ruleId":"806","severity":1,"message":"807","line":1640,"column":63,"nodeType":"808","messageId":"809","endLine":1640,"endColumn":65},{"ruleId":"806","severity":1,"message":"807","line":1688,"column":56,"nodeType":"808","messageId":"809","endLine":1688,"endColumn":58},{"ruleId":"806","severity":1,"message":"807","line":1698,"column":65,"nodeType":"808","messageId":"809","endLine":1698,"endColumn":67},{"ruleId":"806","severity":1,"message":"807","line":1726,"column":65,"nodeType":"808","messageId":"809","endLine":1726,"endColumn":67},{"ruleId":"806","severity":1,"message":"807","line":1827,"column":51,"nodeType":"808","messageId":"809","endLine":1827,"endColumn":53},{"ruleId":"806","severity":1,"message":"807","line":1832,"column":58,"nodeType":"808","messageId":"809","endLine":1832,"endColumn":60},{"ruleId":"806","severity":1,"message":"807","line":1891,"column":42,"nodeType":"808","messageId":"809","endLine":1891,"endColumn":44},{"ruleId":"806","severity":1,"message":"807","line":2358,"column":35,"nodeType":"808","messageId":"809","endLine":2358,"endColumn":37},{"ruleId":"806","severity":1,"message":"807","line":2368,"column":44,"nodeType":"808","messageId":"809","endLine":2368,"endColumn":46},{"ruleId":"806","severity":1,"message":"807","line":2390,"column":35,"nodeType":"808","messageId":"809","endLine":2390,"endColumn":37},{"ruleId":"806","severity":1,"message":"807","line":2399,"column":42,"nodeType":"808","messageId":"809","endLine":2399,"endColumn":44},{"ruleId":"806","severity":1,"message":"807","line":2416,"column":35,"nodeType":"808","messageId":"809","endLine":2416,"endColumn":37},{"ruleId":"806","severity":1,"message":"807","line":2423,"column":44,"nodeType":"808","messageId":"809","endLine":2423,"endColumn":46},{"ruleId":"806","severity":1,"message":"807","line":2450,"column":44,"nodeType":"808","messageId":"809","endLine":2450,"endColumn":46},{"ruleId":"806","severity":1,"message":"807","line":2459,"column":51,"nodeType":"808","messageId":"809","endLine":2459,"endColumn":53},{"ruleId":"806","severity":1,"message":"807","line":2505,"column":44,"nodeType":"808","messageId":"809","endLine":2505,"endColumn":46},{"ruleId":"806","severity":1,"message":"807","line":2515,"column":53,"nodeType":"808","messageId":"809","endLine":2515,"endColumn":55},{"ruleId":"806","severity":1,"message":"807","line":2541,"column":53,"nodeType":"808","messageId":"809","endLine":2541,"endColumn":55},{"ruleId":"806","severity":1,"message":"807","line":2638,"column":39,"nodeType":"808","messageId":"809","endLine":2638,"endColumn":41},{"ruleId":"806","severity":1,"message":"807","line":2643,"column":46,"nodeType":"808","messageId":"809","endLine":2643,"endColumn":48},{"ruleId":"781","severity":1,"message":"829","line":8,"column":3,"nodeType":"783","messageId":"784","endLine":8,"endColumn":13},{"ruleId":"781","severity":1,"message":"830","line":11,"column":3,"nodeType":"783","messageId":"784","endLine":11,"endColumn":7},{"ruleId":"781","severity":1,"message":"854","line":12,"column":3,"nodeType":"783","messageId":"784","endLine":12,"endColumn":11},{"ruleId":"781","severity":1,"message":"855","line":14,"column":3,"nodeType":"783","messageId":"784","endLine":14,"endColumn":8},{"ruleId":"781","severity":1,"message":"856","line":15,"column":3,"nodeType":"783","messageId":"784","endLine":15,"endColumn":7},{"ruleId":"781","severity":1,"message":"857","line":19,"column":3,"nodeType":"783","messageId":"784","endLine":19,"endColumn":27},{"ruleId":"781","severity":1,"message":"858","line":20,"column":3,"nodeType":"783","messageId":"784","endLine":20,"endColumn":16},{"ruleId":"781","severity":1,"message":"859","line":21,"column":3,"nodeType":"783","messageId":"784","endLine":21,"endColumn":20},{"ruleId":"781","severity":1,"message":"860","line":22,"column":3,"nodeType":"783","messageId":"784","endLine":22,"endColumn":17},{"ruleId":"781","severity":1,"message":"861","line":23,"column":3,"nodeType":"783","messageId":"784","endLine":23,"endColumn":19},{"ruleId":"781","severity":1,"message":"862","line":25,"column":3,"nodeType":"783","messageId":"784","endLine":25,"endColumn":15},{"ruleId":"781","severity":1,"message":"812","line":28,"column":9,"nodeType":"783","messageId":"784","endLine":28,"endColumn":15},{"ruleId":"781","severity":1,"message":"863","line":29,"column":7,"nodeType":"783","messageId":"784","endLine":29,"endColumn":17},{"ruleId":"781","severity":1,"message":"864","line":30,"column":7,"nodeType":"783","messageId":"784","endLine":30,"endColumn":14},{"ruleId":"813","severity":1,"message":"814","line":48,"column":5,"nodeType":"815","messageId":"816","endLine":56,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":49,"column":25,"nodeType":"808","messageId":"809","endLine":49,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":57,"column":5,"nodeType":"815","messageId":"816","endLine":65,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":58,"column":25,"nodeType":"808","messageId":"809","endLine":58,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":93,"column":7,"nodeType":"815","messageId":"816","endLine":97,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":94,"column":24,"nodeType":"808","messageId":"809","endLine":94,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":99,"column":7,"nodeType":"815","messageId":"816","endLine":103,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":100,"column":21,"nodeType":"808","messageId":"809","endLine":100,"endColumn":23},{"ruleId":"813","severity":1,"message":"814","line":104,"column":7,"nodeType":"815","messageId":"816","endLine":115,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":105,"column":28,"nodeType":"808","messageId":"809","endLine":105,"endColumn":30},{"ruleId":"806","severity":1,"message":"818","line":124,"column":26,"nodeType":"808","messageId":"809","endLine":124,"endColumn":28},{"ruleId":"806","severity":1,"message":"818","line":126,"column":16,"nodeType":"808","messageId":"809","endLine":126,"endColumn":18},{"ruleId":"806","severity":1,"message":"818","line":137,"column":26,"nodeType":"808","messageId":"809","endLine":137,"endColumn":28},{"ruleId":"806","severity":1,"message":"818","line":139,"column":16,"nodeType":"808","messageId":"809","endLine":139,"endColumn":18},{"ruleId":"806","severity":1,"message":"818","line":150,"column":26,"nodeType":"808","messageId":"809","endLine":150,"endColumn":28},{"ruleId":"806","severity":1,"message":"818","line":152,"column":16,"nodeType":"808","messageId":"809","endLine":152,"endColumn":18},{"ruleId":"781","severity":1,"message":"819","line":236,"column":7,"nodeType":"783","messageId":"784","endLine":236,"endColumn":22},{"ruleId":"781","severity":1,"message":"820","line":237,"column":7,"nodeType":"783","messageId":"784","endLine":237,"endColumn":19},{"ruleId":"781","severity":1,"message":"865","line":241,"column":7,"nodeType":"783","messageId":"784","endLine":241,"endColumn":12},{"ruleId":"781","severity":1,"message":"866","line":242,"column":7,"nodeType":"783","messageId":"784","endLine":242,"endColumn":13},{"ruleId":"781","severity":1,"message":"867","line":243,"column":7,"nodeType":"783","messageId":"784","endLine":243,"endColumn":21},{"ruleId":"781","severity":1,"message":"868","line":244,"column":7,"nodeType":"783","messageId":"784","endLine":244,"endColumn":12},{"ruleId":"781","severity":1,"message":"869","line":246,"column":13,"nodeType":"783","messageId":"784","endLine":246,"endColumn":25},{"ruleId":"781","severity":1,"message":"870","line":2,"column":10,"nodeType":"783","messageId":"784","endLine":2,"endColumn":14},{"ruleId":"781","severity":1,"message":"871","line":4,"column":10,"nodeType":"783","messageId":"784","endLine":4,"endColumn":14},{"ruleId":"781","severity":1,"message":"829","line":4,"column":24,"nodeType":"783","messageId":"784","endLine":4,"endColumn":34},{"ruleId":"781","severity":1,"message":"872","line":4,"column":36,"nodeType":"783","messageId":"784","endLine":4,"endColumn":42},{"ruleId":"781","severity":1,"message":"831","line":4,"column":44,"nodeType":"783","messageId":"784","endLine":4,"endColumn":54},{"ruleId":"781","severity":1,"message":"830","line":4,"column":56,"nodeType":"783","messageId":"784","endLine":4,"endColumn":60},{"ruleId":"781","severity":1,"message":"854","line":4,"column":62,"nodeType":"783","messageId":"784","endLine":4,"endColumn":70},{"ruleId":"781","severity":1,"message":"812","line":6,"column":9,"nodeType":"783","messageId":"784","endLine":6,"endColumn":15},{"ruleId":"781","severity":1,"message":"856","line":14,"column":3,"nodeType":"783","messageId":"784","endLine":14,"endColumn":7},{"ruleId":"781","severity":1,"message":"833","line":15,"column":3,"nodeType":"783","messageId":"784","endLine":15,"endColumn":11},{"ruleId":"781","severity":1,"message":"862","line":18,"column":41,"nodeType":"783","messageId":"784","endLine":18,"endColumn":53},{"ruleId":"781","severity":1,"message":"848","line":24,"column":9,"nodeType":"783","messageId":"784","endLine":24,"endColumn":16},{"ruleId":"781","severity":1,"message":"864","line":25,"column":7,"nodeType":"783","messageId":"784","endLine":25,"endColumn":14},{"ruleId":"806","severity":1,"message":"807","line":40,"column":24,"nodeType":"808","messageId":"809","endLine":40,"endColumn":26},{"ruleId":"781","severity":1,"message":"871","line":4,"column":10,"nodeType":"783","messageId":"784","endLine":4,"endColumn":14},{"ruleId":"781","severity":1,"message":"829","line":4,"column":24,"nodeType":"783","messageId":"784","endLine":4,"endColumn":34},{"ruleId":"781","severity":1,"message":"872","line":4,"column":36,"nodeType":"783","messageId":"784","endLine":4,"endColumn":42},{"ruleId":"781","severity":1,"message":"830","line":4,"column":56,"nodeType":"783","messageId":"784","endLine":4,"endColumn":60},{"ruleId":"781","severity":1,"message":"854","line":4,"column":62,"nodeType":"783","messageId":"784","endLine":4,"endColumn":70},{"ruleId":"781","severity":1,"message":"873","line":5,"column":24,"nodeType":"783","messageId":"784","endLine":5,"endColumn":39},{"ruleId":"781","severity":1,"message":"858","line":5,"column":41,"nodeType":"783","messageId":"784","endLine":5,"endColumn":54},{"ruleId":"781","severity":1,"message":"859","line":5,"column":56,"nodeType":"783","messageId":"784","endLine":5,"endColumn":73},{"ruleId":"781","severity":1,"message":"860","line":5,"column":75,"nodeType":"783","messageId":"784","endLine":5,"endColumn":89},{"ruleId":"781","severity":1,"message":"857","line":5,"column":91,"nodeType":"783","messageId":"784","endLine":5,"endColumn":115},{"ruleId":"781","severity":1,"message":"812","line":7,"column":9,"nodeType":"783","messageId":"784","endLine":7,"endColumn":15},{"ruleId":"781","severity":1,"message":"830","line":10,"column":3,"nodeType":"783","messageId":"784","endLine":10,"endColumn":7},{"ruleId":"781","severity":1,"message":"874","line":19,"column":3,"nodeType":"783","messageId":"784","endLine":19,"endColumn":16},{"ruleId":"781","severity":1,"message":"875","line":21,"column":3,"nodeType":"783","messageId":"784","endLine":21,"endColumn":18},{"ruleId":"813","severity":1,"message":"814","line":62,"column":7,"nodeType":"815","messageId":"816","endLine":66,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":63,"column":22,"nodeType":"808","messageId":"809","endLine":63,"endColumn":24},{"ruleId":"813","severity":1,"message":"814","line":68,"column":7,"nodeType":"815","messageId":"816","endLine":72,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":69,"column":23,"nodeType":"808","messageId":"809","endLine":69,"endColumn":25},{"ruleId":"806","severity":1,"message":"807","line":74,"column":28,"nodeType":"808","messageId":"809","endLine":74,"endColumn":30},{"ruleId":"806","severity":1,"message":"818","line":90,"column":19,"nodeType":"808","messageId":"809","endLine":90,"endColumn":21},{"ruleId":"806","severity":1,"message":"807","line":93,"column":30,"nodeType":"808","messageId":"809","endLine":93,"endColumn":32},{"ruleId":"806","severity":1,"message":"818","line":102,"column":24,"nodeType":"808","messageId":"809","endLine":102,"endColumn":26},{"ruleId":"806","severity":1,"message":"818","line":103,"column":22,"nodeType":"808","messageId":"809","endLine":103,"endColumn":24},{"ruleId":"781","severity":1,"message":"876","line":184,"column":7,"nodeType":"783","messageId":"784","endLine":184,"endColumn":24},{"ruleId":"806","severity":1,"message":"807","line":267,"column":29,"nodeType":"808","messageId":"809","endLine":267,"endColumn":31},{"ruleId":"781","severity":1,"message":"877","line":5,"column":124,"nodeType":"783","messageId":"784","endLine":5,"endColumn":134},{"ruleId":"781","severity":1,"message":"861","line":9,"column":1,"nodeType":"783","messageId":"784","endLine":9,"endColumn":17},{"ruleId":"781","severity":1,"message":"826","line":12,"column":1,"nodeType":"783","messageId":"784","endLine":12,"endColumn":11},{"ruleId":"781","severity":1,"message":"878","line":13,"column":1,"nodeType":"783","messageId":"784","endLine":13,"endColumn":10},{"ruleId":"781","severity":1,"message":"879","line":14,"column":1,"nodeType":"783","messageId":"784","endLine":14,"endColumn":17},{"ruleId":"781","severity":1,"message":"880","line":16,"column":1,"nodeType":"783","messageId":"784","endLine":16,"endColumn":17},{"ruleId":"781","severity":1,"message":"862","line":19,"column":1,"nodeType":"783","messageId":"784","endLine":19,"endColumn":13},{"ruleId":"781","severity":1,"message":"881","line":27,"column":9,"nodeType":"783","messageId":"784","endLine":27,"endColumn":14},{"ruleId":"781","severity":1,"message":"864","line":31,"column":7,"nodeType":"783","messageId":"784","endLine":31,"endColumn":14},{"ruleId":"781","severity":1,"message":"882","line":147,"column":1,"nodeType":"783","messageId":"784","endLine":147,"endColumn":23},{"ruleId":"781","severity":1,"message":"833","line":12,"column":3,"nodeType":"783","messageId":"784","endLine":12,"endColumn":11},{"ruleId":"781","severity":1,"message":"883","line":42,"column":10,"nodeType":"783","messageId":"784","endLine":42,"endColumn":25},{"ruleId":"781","severity":1,"message":"881","line":46,"column":9,"nodeType":"783","messageId":"784","endLine":46,"endColumn":14},{"ruleId":"813","severity":1,"message":"814","line":117,"column":5,"nodeType":"815","messageId":"816","endLine":125,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":118,"column":25,"nodeType":"808","messageId":"809","endLine":118,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":126,"column":5,"nodeType":"815","messageId":"816","endLine":134,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":127,"column":25,"nodeType":"808","messageId":"809","endLine":127,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":156,"column":7,"nodeType":"815","messageId":"816","endLine":160,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":157,"column":23,"nodeType":"808","messageId":"809","endLine":157,"endColumn":25},{"ruleId":"806","severity":1,"message":"807","line":161,"column":35,"nodeType":"808","messageId":"809","endLine":161,"endColumn":37},{"ruleId":"806","severity":1,"message":"807","line":163,"column":42,"nodeType":"808","messageId":"809","endLine":163,"endColumn":44},{"ruleId":"813","severity":1,"message":"814","line":164,"column":9,"nodeType":"815","messageId":"816","endLine":166,"endColumn":10},{"ruleId":"806","severity":1,"message":"807","line":167,"column":42,"nodeType":"808","messageId":"809","endLine":167,"endColumn":44},{"ruleId":"813","severity":1,"message":"814","line":168,"column":9,"nodeType":"815","messageId":"816","endLine":174,"endColumn":10},{"ruleId":"813","severity":1,"message":"814","line":176,"column":7,"nodeType":"815","messageId":"816","endLine":186,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":177,"column":26,"nodeType":"808","messageId":"809","endLine":177,"endColumn":28},{"ruleId":"813","severity":1,"message":"814","line":188,"column":7,"nodeType":"815","messageId":"816","endLine":196,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":189,"column":24,"nodeType":"808","messageId":"809","endLine":189,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":197,"column":7,"nodeType":"815","messageId":"816","endLine":205,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":198,"column":21,"nodeType":"808","messageId":"809","endLine":198,"endColumn":23},{"ruleId":"813","severity":1,"message":"814","line":206,"column":7,"nodeType":"815","messageId":"816","endLine":215,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":207,"column":39,"nodeType":"808","messageId":"809","endLine":207,"endColumn":41},{"ruleId":"781","severity":1,"message":"823","line":220,"column":13,"nodeType":"783","messageId":"784","endLine":220,"endColumn":31},{"ruleId":"806","severity":1,"message":"818","line":248,"column":26,"nodeType":"808","messageId":"809","endLine":248,"endColumn":28},{"ruleId":"781","severity":1,"message":"820","line":287,"column":28,"nodeType":"783","messageId":"784","endLine":287,"endColumn":40},{"ruleId":"781","severity":1,"message":"884","line":313,"column":7,"nodeType":"783","messageId":"784","endLine":313,"endColumn":25},{"ruleId":"806","severity":1,"message":"818","line":351,"column":33,"nodeType":"808","messageId":"809","endLine":351,"endColumn":35},{"ruleId":"806","severity":1,"message":"818","line":353,"column":40,"nodeType":"808","messageId":"809","endLine":353,"endColumn":42},{"ruleId":"806","severity":1,"message":"818","line":365,"column":33,"nodeType":"808","messageId":"809","endLine":365,"endColumn":35},{"ruleId":"806","severity":1,"message":"818","line":367,"column":40,"nodeType":"808","messageId":"809","endLine":367,"endColumn":42},{"ruleId":"885","severity":1,"message":"886","line":400,"column":14,"nodeType":"783","messageId":"887","endLine":400,"endColumn":15},{"ruleId":"806","severity":1,"message":"807","line":412,"column":69,"nodeType":"808","messageId":"809","endLine":412,"endColumn":71},{"ruleId":"885","severity":1,"message":"888","line":421,"column":14,"nodeType":"783","messageId":"887","endLine":421,"endColumn":15},{"ruleId":"885","severity":1,"message":"886","line":447,"column":14,"nodeType":"783","messageId":"887","endLine":447,"endColumn":15},{"ruleId":"781","severity":1,"message":"817","line":586,"column":7,"nodeType":"783","messageId":"784","endLine":586,"endColumn":20},{"ruleId":"781","severity":1,"message":"817","line":641,"column":7,"nodeType":"783","messageId":"784","endLine":641,"endColumn":20},{"ruleId":"781","severity":1,"message":"817","line":688,"column":7,"nodeType":"783","messageId":"784","endLine":688,"endColumn":20},{"ruleId":"806","severity":1,"message":"807","line":738,"column":19,"nodeType":"808","messageId":"809","endLine":738,"endColumn":21},{"ruleId":"781","severity":1,"message":"889","line":836,"column":7,"nodeType":"783","messageId":"784","endLine":836,"endColumn":33},{"ruleId":"781","severity":1,"message":"820","line":845,"column":7,"nodeType":"783","messageId":"784","endLine":845,"endColumn":19},{"ruleId":"781","severity":1,"message":"819","line":846,"column":7,"nodeType":"783","messageId":"784","endLine":846,"endColumn":22},{"ruleId":"806","severity":1,"message":"807","line":2033,"column":67,"nodeType":"808","messageId":"809","endLine":2033,"endColumn":69},{"ruleId":"806","severity":1,"message":"807","line":2037,"column":71,"nodeType":"808","messageId":"809","endLine":2037,"endColumn":73},{"ruleId":"806","severity":1,"message":"807","line":2959,"column":67,"nodeType":"808","messageId":"809","endLine":2959,"endColumn":69},{"ruleId":"806","severity":1,"message":"807","line":2963,"column":71,"nodeType":"808","messageId":"809","endLine":2963,"endColumn":73},{"ruleId":"806","severity":1,"message":"807","line":3107,"column":67,"nodeType":"808","messageId":"809","endLine":3107,"endColumn":69},{"ruleId":"806","severity":1,"message":"807","line":3111,"column":71,"nodeType":"808","messageId":"809","endLine":3111,"endColumn":73},{"ruleId":"781","severity":1,"message":"871","line":4,"column":3,"nodeType":"783","messageId":"784","endLine":4,"endColumn":7},{"ruleId":"781","severity":1,"message":"890","line":13,"column":3,"nodeType":"783","messageId":"784","endLine":13,"endColumn":19},{"ruleId":"781","severity":1,"message":"891","line":14,"column":3,"nodeType":"783","messageId":"784","endLine":14,"endColumn":19},{"ruleId":"781","severity":1,"message":"812","line":18,"column":9,"nodeType":"783","messageId":"784","endLine":18,"endColumn":15},{"ruleId":"785","replacedBy":"892"},{"ruleId":"787","replacedBy":"893"},{"ruleId":"781","severity":1,"message":"872","line":9,"column":3,"nodeType":"783","messageId":"784","endLine":9,"endColumn":9},{"ruleId":"781","severity":1,"message":"873","line":19,"column":3,"nodeType":"783","messageId":"784","endLine":19,"endColumn":18},{"ruleId":"781","severity":1,"message":"894","line":38,"column":10,"nodeType":"783","messageId":"784","endLine":38,"endColumn":20},{"ruleId":"781","severity":1,"message":"812","line":39,"column":9,"nodeType":"783","messageId":"784","endLine":39,"endColumn":15},{"ruleId":"813","severity":1,"message":"814","line":84,"column":5,"nodeType":"815","messageId":"816","endLine":92,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":85,"column":28,"nodeType":"808","messageId":"809","endLine":85,"endColumn":30},{"ruleId":"781","severity":1,"message":"895","line":109,"column":11,"nodeType":"783","messageId":"784","endLine":109,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":124,"column":7,"nodeType":"815","messageId":"816","endLine":131,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":125,"column":33,"nodeType":"808","messageId":"809","endLine":125,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":132,"column":7,"nodeType":"815","messageId":"816","endLine":136,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":133,"column":29,"nodeType":"808","messageId":"809","endLine":133,"endColumn":31},{"ruleId":"813","severity":1,"message":"814","line":137,"column":7,"nodeType":"815","messageId":"816","endLine":141,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":138,"column":28,"nodeType":"808","messageId":"809","endLine":138,"endColumn":30},{"ruleId":"806","severity":1,"message":"807","line":143,"column":25,"nodeType":"808","messageId":"809","endLine":143,"endColumn":27},{"ruleId":"806","severity":1,"message":"807","line":149,"column":26,"nodeType":"808","messageId":"809","endLine":149,"endColumn":28},{"ruleId":"813","severity":1,"message":"814","line":155,"column":7,"nodeType":"815","messageId":"816","endLine":163,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":156,"column":24,"nodeType":"808","messageId":"809","endLine":156,"endColumn":26},{"ruleId":"813","severity":1,"message":"814","line":164,"column":7,"nodeType":"815","messageId":"816","endLine":172,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":165,"column":21,"nodeType":"808","messageId":"809","endLine":165,"endColumn":23},{"ruleId":"781","severity":1,"message":"823","line":177,"column":7,"nodeType":"783","messageId":"784","endLine":177,"endColumn":25},{"ruleId":"806","severity":1,"message":"807","line":199,"column":16,"nodeType":"808","messageId":"809","endLine":199,"endColumn":18},{"ruleId":"806","severity":1,"message":"818","line":220,"column":16,"nodeType":"808","messageId":"809","endLine":220,"endColumn":18},{"ruleId":"806","severity":1,"message":"818","line":242,"column":16,"nodeType":"808","messageId":"809","endLine":242,"endColumn":18},{"ruleId":"781","severity":1,"message":"896","line":260,"column":9,"nodeType":"783","messageId":"784","endLine":260,"endColumn":19},{"ruleId":"806","severity":1,"message":"807","line":268,"column":15,"nodeType":"808","messageId":"809","endLine":268,"endColumn":17},{"ruleId":"806","severity":1,"message":"807","line":274,"column":15,"nodeType":"808","messageId":"809","endLine":274,"endColumn":17},{"ruleId":"781","severity":1,"message":"897","line":329,"column":7,"nodeType":"783","messageId":"784","endLine":329,"endColumn":20},{"ruleId":"781","severity":1,"message":"898","line":330,"column":7,"nodeType":"783","messageId":"784","endLine":330,"endColumn":32},{"ruleId":"806","severity":1,"message":"807","line":621,"column":42,"nodeType":"808","messageId":"809","endLine":621,"endColumn":44},{"ruleId":"806","severity":1,"message":"807","line":650,"column":34,"nodeType":"808","messageId":"809","endLine":650,"endColumn":36},{"ruleId":"806","severity":1,"message":"807","line":681,"column":39,"nodeType":"808","messageId":"809","endLine":681,"endColumn":41},{"ruleId":"899","severity":1,"message":"900","line":47,"column":9,"nodeType":"901","messageId":"809","endLine":47,"endColumn":20},{"ruleId":"899","severity":1,"message":"900","line":54,"column":9,"nodeType":"901","messageId":"809","endLine":54,"endColumn":20},{"ruleId":"899","severity":1,"message":"900","line":47,"column":9,"nodeType":"901","messageId":"809","endLine":47,"endColumn":20},{"ruleId":"899","severity":1,"message":"900","line":54,"column":9,"nodeType":"901","messageId":"809","endLine":54,"endColumn":20},{"ruleId":"781","severity":1,"message":"822","line":27,"column":9,"nodeType":"783","messageId":"784","endLine":27,"endColumn":17},{"ruleId":"781","severity":1,"message":"812","line":28,"column":9,"nodeType":"783","messageId":"784","endLine":28,"endColumn":15},{"ruleId":"813","severity":1,"message":"814","line":54,"column":5,"nodeType":"815","messageId":"816","endLine":62,"endColumn":6},{"ruleId":"806","severity":1,"message":"807","line":55,"column":25,"nodeType":"808","messageId":"809","endLine":55,"endColumn":27},{"ruleId":"813","severity":1,"message":"814","line":80,"column":7,"nodeType":"815","messageId":"816","endLine":87,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":81,"column":33,"nodeType":"808","messageId":"809","endLine":81,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":89,"column":7,"nodeType":"815","messageId":"816","endLine":93,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":90,"column":33,"nodeType":"808","messageId":"809","endLine":90,"endColumn":35},{"ruleId":"813","severity":1,"message":"814","line":95,"column":7,"nodeType":"815","messageId":"816","endLine":101,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":96,"column":26,"nodeType":"808","messageId":"809","endLine":96,"endColumn":28},{"ruleId":"813","severity":1,"message":"814","line":102,"column":7,"nodeType":"815","messageId":"816","endLine":111,"endColumn":8},{"ruleId":"806","severity":1,"message":"807","line":103,"column":39,"nodeType":"808","messageId":"809","endLine":103,"endColumn":41},{"ruleId":"781","severity":1,"message":"823","line":116,"column":13,"nodeType":"783","messageId":"784","endLine":116,"endColumn":31},{"ruleId":"806","severity":1,"message":"807","line":125,"column":16,"nodeType":"808","messageId":"809","endLine":125,"endColumn":18},{"ruleId":"806","severity":1,"message":"818","line":185,"column":26,"nodeType":"808","messageId":"809","endLine":185,"endColumn":28},{"ruleId":"781","severity":1,"message":"824","line":224,"column":7,"nodeType":"783","messageId":"784","endLine":224,"endColumn":25},{"ruleId":"781","severity":1,"message":"823","line":226,"column":7,"nodeType":"783","messageId":"784","endLine":226,"endColumn":25},{"ruleId":"806","severity":1,"message":"807","line":444,"column":39,"nodeType":"808","messageId":"809","endLine":444,"endColumn":41},{"ruleId":"806","severity":1,"message":"818","line":568,"column":53,"nodeType":"808","messageId":"809","endLine":568,"endColumn":55},{"ruleId":"806","severity":1,"message":"807","line":613,"column":47,"nodeType":"808","messageId":"809","endLine":613,"endColumn":49},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["902"],"no-negated-in-lhs",["903"],"'Router' is defined but never used.","'API_URL' is defined but never used.","'LOGOUT_URL' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setusername'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user] as a second argument to the useEffect Hook.",["904"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useCallback has a missing dependency: 'scrollBoxHeight'. Either include it or remove the dependency array.","ArrayExpression",["905"],"React Hook useEffect has a missing dependency: 'handleScroll'. Either include it or remove the dependency array.",["906"],["902"],["903"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'update_target_date' is assigned a value but never used.","'Component' is defined but never used.","'Option' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'currentOffset' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'currentUnitType' is assigned a value but never used.","'currentUnits' is assigned a value but never used.","'units' is assigned a value but never used.","'TextArea' is assigned a value but never used.","'userRoleSuperAdmin' is assigned a value but never used.","'recommendationData' is assigned a value but never used.","'notification' is defined but never used.","'LockFilled' is defined but never used.","'members' is assigned a value but never used.","'agenda' is assigned a value but never used.","'DatePicker' is defined but never used.","'Card' is defined but never used.","'Breadcrumb' is defined but never used.","'Radio' is defined but never used.","'Checkbox' is defined but never used.","'Switch' is defined but never used.","'HomeOutlined' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["907","908"],"'ip_address' is assigned a value but never used.","'mem_email' is assigned a value but never used.","'Upload' is defined but never used.","'message' is defined but never used.","'UploadOutlined' is defined but never used.","'dateTimeFormats' is assigned a value but never used.","'file' is assigned a value but never used.","'TabPane' is assigned a value but never used.","'currentSchedulerType' is assigned a value but never used.","'openEditScheduler' is assigned a value but never used.","'agendaForData' is assigned a value but never used.","'auditType' is assigned a value but never used.","'currentUpdatedSchedulerFrequencyEnd' is assigned a value but never used.","'Progress' is defined but never used.","'Badge' is defined but never used.","'Spin' is defined but never used.","'Loading3QuartersOutlined' is defined but never used.","'ProfileFilled' is defined but never used.","'CheckCircleFilled' is defined but never used.","'ScheduleFilled' is defined but never used.","'CalendarOutlined' is defined but never used.","'SyncOutlined' is defined but never used.","'dateFormat' is assigned a value but never used.","'antIcon' is assigned a value but never used.","'years' is assigned a value but never used.","'months' is assigned a value but never used.","'meetingDetails' is assigned a value but never used.","'data2' is assigned a value but never used.","'schedulermtd' is assigned a value but never used.","'Link' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'HourglassFilled' is defined but never used.","'AuditOutlined' is defined but never used.","'ProfileOutlined' is defined but never used.","'currentAuditsData' is assigned a value but never used.","'Popconfirm' is defined but never used.","'TagFilled' is defined but never used.","'PlusCircleFilled' is defined but never used.","'PlayCircleFilled' is defined but never used.","'Panel' is assigned a value but never used.","'notification_placement' is assigned a value but never used.","'FontAwesomeIcon' is defined but never used.","'currentMeetingType' is assigned a value but never used.","no-redeclare","'j' is already defined.","redeclared","'i' is already defined.","'updateReminderEmailChecked' is assigned a value but never used.","'FileDoneOutlined' is defined but never used.","'FileTextOutlined' is defined but never used.",["902"],["903"],"'faMonument' is defined but never used.","'sheRecommendationStatus1' is assigned a value but never used.","'exactValue' is assigned a value but never used.","'sheMeetingArr' is assigned a value but never used.","'listMeetingRecommendation' is assigned a value but never used.","no-dupe-keys","Duplicate key 'editloading'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"909","fix":"910"},{"desc":"911","fix":"912"},{"desc":"913","fix":"914"},{"messageId":"915","fix":"916","desc":"917"},{"messageId":"918","fix":"919","desc":"920"},"Add dependencies array: [user]",{"range":"921","text":"922"},"Update the dependencies array to be: [scrollBoxHeight]",{"range":"923","text":"924"},"Update the dependencies array to be: [handleScroll]",{"range":"925","text":"926"},"removeEscape",{"range":"927","text":"928"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"929","text":"930"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[2775,2775],", [user]",[2424,2426],"[scrollBoxHeight]",[3014,3016],"[handleScroll]",[1210,1211],"",[1210,1210],"\\"]